# Prepare the TINY_VCPKG_ROOT, take into account also the VCPKG_ROOT environment variable.
defineReplace(tiny_vcpkg_root) {
    # Defined by a user using the qmake variable
    vcpkgRoot = $$TINY_VCPKG_ROOT

    !isEmpty(vcpkgRoot): \
        return($$clean_path($$vcpkgRoot))

    # Defined by a user using the environment variable
    vcpkgRoot = $$(TINY_VCPKG_ROOT)

    !isEmpty(vcpkgRoot): \
        return($$clean_path($$vcpkgRoot))

    # Use the VCPKG_ROOT environment variable
    vcpkgRoot = $$(VCPKG_ROOT)

    !isEmpty(vcpkgRoot): \
        return($$clean_path($$vcpkgRoot))

    return()
}

# Prepare the TINY_VCPKG_TRIPLET, if not defined then try to guess the vcpkg triplet
# on the base of the current compiler and OS (based on the QMAKESPEC).
defineReplace(tiny_vcpkg_triplet) {
    # Defined by a user using the qmake variable
    vcpkgTriplet = $$TINY_VCPKG_TRIPLET

    !isEmpty(vcpkgTriplet): \
        return($$vcpkgTriplet)

    # Defined by a user using the environment variable
    vcpkgTriplet = $$(TINY_VCPKG_TRIPLET)

    !isEmpty(vcpkgTriplet): \
        return($$vcpkgTriplet)

    # Try to guess
    win32-msvc|win32-clang-msvc: \
        return(x64-windows)

    # MinGW
    win32-g++|win32-clang-g++: \
        return(x64-mingw-dynamic)

    unix:!macx: \
        return(x64-linux)

    # Use the VCPKG_DEFAULT_TRIPLET environment variable
    vcpkgTriplet = $$(VCPKG_DEFAULT_TRIPLET)

    !isEmpty(vcpkgTriplet): \
        return($$vcpkgTriplet)

    return()
}
