# Check/verify all toolchain requirements and edge cases, throws error() on any problem

# Populate the TINY_COMPILER_VERSION and TINY_SIMULATED_VERSION qmake variables
load(tiny_compiler_version)

!build_pass: \
if(win32-msvc|win32-clang-msvc) {
    win32-msvc:       tinyMsvcVersion = $$TINY_COMPILER_VERSION
    win32-clang-msvc: tinyMsvcVersion = $$TINY_SIMULATED_VERSION

    !versionAtLeast(tinyMsvcVersion, $$replace(tinyMinReqMsvc, \., "")): \
        error( "Minimum required MSVC version was not satisfied, required version\
                >=$${tinyMinReqMsvc}, your version is $${tinyMsvcVersion},\
                upgrade Visual Studio." )

    unset(tinyMsvcVersion)
}

!build_pass: \
win32-clang-msvc: \
!versionAtLeast(TINY_COMPILER_VERSION, $$tinyMinReqClangCl): \
    error( "Minimum required clang-cl version was not satisfied, required version\
            >=$${tinyMinReqClangCl}, your version is $${TINY_COMPILER_VERSION},\
            upgrade LLVM." )

!build_pass: \
!versionAtLeast(QT_VERSION, $$tinyMinRecQt): \
    message( "Minimum recommended Qt Framework version was not satisfied, recommended\
              version >=$${tinyMinRecQt}, your version is $${QT_VERSION}, upgrade\
              Qt Framework.")

!build_pass: \
!win32-clang-msvc:if(gcc|clang) {
    clang:!versionAtLeast(TINY_COMPILER_VERSION, $$tinyMinRecClang): \
        message( "Minimum recommended Clang compiler version was not satisfied,\
                  recommended version >=$${tinyMinRecClang}, your version is\
                  $${TINY_COMPILER_VERSION}, upgrade Clang compiler.")

    gcc:!versionAtLeast(TINY_COMPILER_VERSION, $$tinyMinRecGCC): \
        message( "Minimum recommended GCC compiler version was not satisfied,\
                  recommended version >=$${tinyMinRecGCC}, your version is\
                  $${TINY_COMPILER_VERSION}, upgrade GCC compiler.")
}
