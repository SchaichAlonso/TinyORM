# MySQL
# ---
# Forces TLS connections with the caching_sha2_password and certificate validation, also validates
# issuer  == CN=MySQL_Server_TinyORM_Auto_Generated_CA_Certificate and
# subject == CN=MySQL_Server_TinyORM_Auto_Generated_Client_Certificate.

name: MSVC2022 Qt6.7 TinyDrivers

on:
  workflow_dispatch:
  push:
    branches:
      - main

concurrency:
  group: tinyorm-windows

# I will not remove the build folders before a job execution it's not necessary and
# it will be faster this way. I can still remove them manually if needed or
# if something goes wrong.

jobs:

  build:
    name: cmake build / ctest

    # Self-hosted runner is Windows 11 (Release Preview channel - 23H2)
    runs-on: [ self-hosted, windows ]

    strategy:
      matrix:
        drivers-type: [ Shared, Loadable, Static ]

        build-type:
          - key: debug
            name: Debug

          - key: release
            name: Release

    steps:
    - uses: actions/checkout@v4
      with:
        path: main

    - name: TinyORM prepare environment
      run: |
        $runnerWorkPath = Resolve-Path -Path '${{ runner.workspace }}/..'
        "TinyRunnerWorkPath=$runnerWorkPath" >> $env:GITHUB_ENV

        $mysqlExePath = (Get-Command -Name mysql.exe).Source
        $mysqlInstallationPath = Split-Path -Parent -Path (Split-Path -Parent -Path $mysqlExePath)
        "TinyMySQLInstallationPath=$mysqlInstallationPath" >> $env:GITHUB_ENV

        # Parallel 10 is maximum what my computer allows, I have to invoke Linux self-hosted runners
        # manually so 10 is ok.
        # --
        # The description below is Outdated but I leave the comment.
        # I must divide all parallel by 2 because I have 2 self-hosted runners on the same computer
        # and also -1 for reserve to avoid swapping, so 10 / 2 - 1 = 4
        "TinyParallel=10" >> $env:GITHUB_ENV

        $tinyormPath = Resolve-Path -Path ./main
        "TinyORMPath=$tinyormPath" >> $env:GITHUB_ENV

        # I had to shorten the folder name because of long path names, removed build-Tiny
        # at the beginning.
        $tinyormBuildFolder = 'Drivers-msvc-${{ matrix.drivers-type }}-${{ matrix.build-type.key }}'
        "TinyORMBuildFolder=$tinyormBuildFolder" >> $env:GITHUB_ENV

        $tinyormBuildTree = Join-Path -Path '${{ runner.workspace }}' TinyORM-builds-cmake `
        $tinyormBuildFolder
        "TinyORMBuildTree=$tinyormBuildTree" >> $env:GITHUB_ENV

    - name: MySQL add libmysql.dll on the $env:Path, INCLUDE, and LIB
      run: |
        '${{ env.TinyMySQLInstallationPath }}\lib' >> $env:GITHUB_PATH
        # Needed by the lastest FindMySQL.cmake module, it stopped working without this
        'INCLUDE=${{ env.TinyMySQLInstallationPath }}\include' >> $env:GITHUB_ENV
        'LIB=${{ env.TinyMySQLInstallationPath }}\lib' >> $env:GITHUB_ENV

    - name: MySQL service check status
      run: |
        $serviceName = 'MySQL83'

        Write-Output '::group::Get-Service'
        $mysqlService = Get-Service $serviceName
        Write-Output $mysqlService
        Write-Output '::endgroup::'

        Write-Output '::group::Service running check'
        $mysqlService.status.ToString() -ceq 'Running' -or `
        $(throw "$serviceName service is not running") > $null
        Write-Output '::endgroup::'

        # .mylogin.cnf isn't detected because self-hosted runners are running under
        # the NT AUTHORITY\NetworkService account so the $env:APPDATA points to:
        # C:\WINDOWS\ServiceProfiles\NetworkService\AppData\Roaming
        # [client] sections from the $env:ProgramFiles\MySQL\MySQL Server 8.x\my.ini are picked up
        # correctly.
        Write-Output '::group::Ping'
        mysqladmin.exe --host=$env:DB_MYSQL_HOST --user=$env:DB_MYSQL_USERNAME `
        --password=$env:DB_MYSQL_PASSWORD ping
        Write-Output '::endgroup::'
      env:
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST_SELF }}
        DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD_SELF }}
        DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME_SELF }}

    - name: Print MySQL database version
      run: |
        mysql.exe --version

    - name: Ninja install latest version
      uses: seanmiddleditch/gha-setup-ninja@master
      with:
        destination: ${{ env.TinyRunnerWorkPath }}/ninja-build

    - name: Visual Studio 2022 pwsh shell setup
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    # Don't use the default CCACHE_DIR path on self-hosted runners
    - name: Ccache prepare environment
      run: |
        $ccacheDirPath = Join-Path -Path '${{ runner.workspace }}' -ChildPath ccache
        "CCACHE_DIR=$ccacheDirPath" >> $env:GITHUB_ENV

    # I'm managing the ccache configuration manually on self-hosted runners using the ccache.conf
    # because it's used by more actions.

    - name: Ccache print version and configuration
      run: |
        Write-Output '::group::Print version'
        ccache.exe --version
        Write-Output '::endgroup::'

        Write-Output '::group::Print ccache config'
        ccache.exe --show-config
        Write-Output '::endgroup::'

    # Must be after the ilammy/msvc-dev-cmd@v1 because vcvars64 overrides the VCPKG_ROOT
    - name: vcpkg prepare environment
      run: |
        "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" >> $env:GITHUB_ENV
        'VCPKG_DEFAULT_TRIPLET=x64-windows' >> $env:GITHUB_ENV
        'VCPKG_MAX_CONCURRENCY=${{ env.TinyParallel }}' >> $env:GITHUB_ENV

    - name: Self-hosted runner prepare environment
      run: |
        'C:\Program Files\CMake\bin' >> $env:GITHUB_PATH
        "$env:VCPKG_INSTALLATION_ROOT" >> $env:GITHUB_PATH
        "$env:TINY_QT_ROOT\6.7.0\msvc2019_64\bin" >> $env:GITHUB_PATH

    - name: CMake print version
      run: |
        cmake.exe --version

    - name: vcpkg print version
      run: |
        vcpkg.exe --version

    - name: TinyORM create build folder (${{ env.TinyORMBuildFolder }})
      run: |
        if (-not (Test-Path '${{ env.TinyORMBuildTree }}')) {
          New-Item -Type Directory '${{ env.TinyORMBuildTree }}'
        }

    - name: Ccache clear statistics
      run: |
        ccache.exe --zero-stats

    # BUILD_TREE_DEPLOY isn't needed because CMake forces linker to write absolute paths to exe, but
    # I enable it anyway to test this feature.
    # CMAKE_DISABLE_PRECOMPILE_HEADERS=ON is correct as we need to test missing #include-s.
    - name: TinyORM cmake configure (${{ env.TinyORMBuildFolder }})
      working-directory: ${{ env.TinyORMPath }}
      run: >-
        cmake.exe
        -S .
        -B '${{ env.TinyORMBuildTree }}'
        -G Ninja
        -D CMAKE_CXX_COMPILER_LAUNCHER:FILEPATH='C:/ProgramData/chocolatey/bin/ccache.exe'
        -D CMAKE_TOOLCHAIN_FILE:FILEPATH="$env:VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake"
        -D CMAKE_DISABLE_PRECOMPILE_HEADERS:BOOL=ON
        -D CMAKE_EXPORT_PACKAGE_REGISTRY:BOOL=OFF
        -D CMAKE_BUILD_TYPE:STRING=${{ matrix.build-type.name }}
        -D CMAKE_CXX_SCAN_FOR_MODULES:BOOL=OFF
        -D VCPKG_APPLOCAL_DEPS:BOOL=OFF
        -D VERBOSE_CONFIGURE:BOOL=ON
        -D BUILD_TREE_DEPLOY:BOOL=ON
        -D MATCH_EQUAL_EXPORTED_BUILDTREE:BOOL=ON
        -D STRICT_MODE:BOOL=ON
        -D MYSQL_PING:BOOL=ON
        -D BUILD_TESTS:BOOL=ON
        -D ORM:BOOL=ON
        -D TOM:BOOL=ON
        -D TOM_EXAMPLE:BOOL=ON
        -D BUILD_DRIVERS:BOOL=ON
        -D DRIVERS_TYPE:STRING=${{ matrix.drivers-type }}

    - name: TinyORM cmake build âœ¨ (${{ env.TinyORMBuildFolder }})
      working-directory: ${{ env.TinyORMBuildTree }}
      run: |
        cmake.exe --build . --target all --parallel ${{ env.TinyParallel }}

    - name: Ccache print statistics
      run: |
        ccache.exe --show-stats -vv

    # Used migrate:fresh instead (is safer)
    - name: Create and Seed tables for unit tests ðŸŽ‰
      working-directory: ${{ env.TinyORMBuildTree }}/tests/testdata_tom
      run: |
        $env:Path = '..\..;' + $env:Path

        .\tom_testdata.exe migrate:fresh --database=tinyorm_testdata_tom_mysql --seed --no-ansi
      env:
        DB_MYSQL_CHARSET: ${{ secrets.DB_MYSQL_CHARSET }}
        DB_MYSQL_COLLATION: ${{ secrets.DB_MYSQL_COLLATION }}
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST_SELF }}
        DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD_SELF }}
        DB_MYSQL_SSL_CA: ${{ secrets.DB_MYSQL_DATA_SELF_WINDOWS }}/ca.pem
        DB_MYSQL_SSL_CERT: ${{ secrets.DB_MYSQL_DATA_SELF_WINDOWS }}/client-cert.pem
        DB_MYSQL_SSL_KEY: ${{ secrets.DB_MYSQL_DATA_SELF_WINDOWS }}/client-key.pem
        DB_MYSQL_SSL_MODE: ${{ secrets.DB_MYSQL_SSL_MODE }}
        DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME_SELF }}
        TOM_TESTDATA_ENV: ${{ vars.TOM_TESTDATA_ENV }}

    - name: TinyORM execute ctest ðŸ”¥
      working-directory: ${{ env.TinyORMBuildTree }}
      run: |
        ctest.exe --output-on-failure
      env:
        DB_MYSQL_CHARSET: ${{ secrets.DB_MYSQL_CHARSET }}
        DB_MYSQL_COLLATION: ${{ secrets.DB_MYSQL_COLLATION }}
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST_SELF }}
        DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD_SELF }}
        DB_MYSQL_SSL_CA: ${{ secrets.DB_MYSQL_DATA_SELF_WINDOWS }}/ca.pem
        DB_MYSQL_SSL_CERT: ${{ secrets.DB_MYSQL_DATA_SELF_WINDOWS }}/client-cert.pem
        DB_MYSQL_SSL_KEY: ${{ secrets.DB_MYSQL_DATA_SELF_WINDOWS }}/client-key.pem
        DB_MYSQL_SSL_MODE: ${{ secrets.DB_MYSQL_SSL_MODE }}
        DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME_SELF }}
        TOM_TESTS_ENV: ${{ vars.TOM_TESTS_ENV }}

    - name: Tom example test some commands (MySQL) ðŸš€
      working-directory: ${{ env.TinyORMBuildTree }}/examples/tom
      run: |
        $env:Path = '..\..;' + $env:Path

        .\tom.exe migrate:fresh --database=tinyorm_tom_mysql --no-ansi
        .\tom.exe migrate:uninstall --reset --database=tinyorm_tom_mysql --no-ansi
        .\tom.exe migrate:install --database=tinyorm_tom_mysql --no-ansi
        .\tom.exe migrate --database=tinyorm_tom_mysql --seed --no-ansi
        .\tom.exe migrate:status --database=tinyorm_tom_mysql --no-ansi
        .\tom.exe migrate:refresh --database=tinyorm_tom_mysql --seed --no-ansi
        .\tom.exe migrate:reset --database=tinyorm_tom_mysql --no-ansi
        .\tom.exe migrate:uninstall --database=tinyorm_tom_mysql --no-ansi
      env:
        DB_MYSQL_CHARSET: ${{ secrets.DB_MYSQL_CHARSET }}
        DB_MYSQL_COLLATION: ${{ secrets.DB_MYSQL_COLLATION }}
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST_SELF }}
        DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD_SELF }}
        DB_MYSQL_SSL_CA: ${{ secrets.DB_MYSQL_DATA_SELF_WINDOWS }}/ca.pem
        DB_MYSQL_SSL_CERT: ${{ secrets.DB_MYSQL_DATA_SELF_WINDOWS }}/client-cert.pem
        DB_MYSQL_SSL_KEY: ${{ secrets.DB_MYSQL_DATA_SELF_WINDOWS }}/client-key.pem
        DB_MYSQL_SSL_MODE: ${{ secrets.DB_MYSQL_SSL_MODE }}
        DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME_SELF }}
        TOM_EXAMPLE_ENV: ${{ vars.TOM_EXAMPLE_ENV }}

    # The reason for this is the concurrency:group: can contain only two in_progress workflows,
    # one will be in_progress and the second will be queued (waiting until the first finish),
    # and all others will be canceled.
    - name: Run msys2-ucrt64-drivers.yml workflows
      working-directory: ${{ env.TinyORMPath }}
      run: |
        gh workflow run msys2-ucrt64-drivers.yml --ref ${{ github.ref_name }}
      env:
        GH_TOKEN: ${{ github.token }}
