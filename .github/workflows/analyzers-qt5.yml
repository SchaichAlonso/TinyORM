name: Clang Tidy/Clazy Qt5.15

on:
  push:
    branches:
      - main
      - gh-actions

jobs:

  clang-analyzers:
    name: clang-tidy and clazy

    runs-on: ubuntu-22.04

    env:
      TINY_CLANG_TIDY_EXECUTED: false

    steps:
    - uses: actions/checkout@v4

    - name: TinyORM prepare environment
      run: |
        runnerWorkPath=$(realpath '${{ runner.workspace }}/..')
        echo "TinyRunnerWorkPath=$runnerWorkPath" >> $GITHUB_ENV

    - name: add-apt-repository Clang 17
      run: >-
        wget -O- https://apt.llvm.org/llvm-snapshot.gpg.key |
        sudo tee /etc/apt/trusted.gpg.d/llvm-17.asc > /dev/null

        sudo add-apt-repository --yes
        --sourceslist 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main'

    - name: apt update
      run: |
        sudo apt update

    - name: apt install clang-17, lld-17, g++-12, clang-tidy-17, and Qt 5.15.3 base
      run: |
        sudo apt install --yes clang-17 lld-17 g++-12 clang-tidy-17 qtbase5-dev

    - name: ninja install latest version
      uses: seanmiddleditch/gha-setup-ninja@master
      with:
        destination: ${{ env.TinyRunnerWorkPath }}/ninja-build

    - name: Ccache initialize download
      id: downloads-initialize-ccache
      run: |
        filename=$(basename "$URL_CCACHE_LINUX_X64")
        echo "Filename=$filename" >> $GITHUB_OUTPUT

        filepath="${{ runner.temp }}/$filename"
        echo "Filepath=$filepath" >> $GITHUB_OUTPUT

        hash=$(wget "$URL_CACHE_HASH_LINUX" -O- --no-verbose --quiet)
        echo "Hash=$hash" >> $GITHUB_OUTPUT
      env:
        URL_CACHE_HASH_LINUX: ${{ secrets.URL_CACHE_HASH_LINUX }}
        URL_CCACHE_LINUX_X64: ${{ secrets.URL_CCACHE_LINUX_X64 }}

    - name: Ccache restore cache (download)
      uses: actions/cache@v3
      id: downloads-cache-ccache
      with:
        path: ${{ env.archive_filepath }}
        key: ${{ runner.os }}-caches-${{ env.cache_name }}-${{ env.cache_hash }}
      env:
        archive_filepath: ${{ steps.downloads-initialize-ccache.outputs.Filepath }}
        cache_hash: ${{ steps.downloads-initialize-ccache.outputs.Hash }}
        cache_name: ccache

    - name: Ccache download
      if: steps.downloads-cache-ccache.outputs.cache-hit != 'true'
      run: |
        wget "$URL_CCACHE_LINUX_X64" -O "$archive_filepath" --no-verbose
      env:
        archive_filepath: ${{ steps.downloads-initialize-ccache.outputs.Filepath }}
        URL_CCACHE_LINUX_X64: ${{ secrets.URL_CCACHE_LINUX_X64 }}

    - name: Ccache install
      run: |
        echo '::group::Extract archive'
        tar xJvf "$archive_filepath" --directory '${{ runner.temp }}'
        echo '::endgroup::'

        echo '::group::Install'
        extractedFolder=$(basename --suffix='.tar.xz' "$archive_filename")
        cd "${{ runner.temp }}/$extractedFolder"
        sudo make install
        echo '::endgroup::'

        echo '::group::Print version'
        ccache --version
        echo '::endgroup::'
      env:
        archive_filename: ${{ steps.downloads-initialize-ccache.outputs.Filename }}
        archive_filepath: ${{ steps.downloads-initialize-ccache.outputs.Filepath }}

    - name: Ccache initialize
      id: ccache-initialize-cache
      run: |
        cachePath=$(ccache --get-config cache_dir)
        echo "CachePath=$cachePath" >> $GITHUB_OUTPUT

        echo "ImageOS=$ImageOS" >> $GITHUB_OUTPUT

    - name: Ccache restore cache ðŸ•º
      uses: actions/cache@v3
      with:
        path: ${{ env.cache_path }}
        key: ${{ runner.os }}-${{ env.image_os }}-ccache-${{ env.cache_name }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-${{ env.image_os }}-ccache-${{ env.cache_name }}-
      env:
        # Don't reuse the clang ccache cache from the linux-qt5.yml (prepended analyzers)
        cache_name: analyzers-clang17-qt5
        cache_path: ${{ steps.ccache-initialize-cache.outputs.CachePath }}
        image_os: ${{ steps.ccache-initialize-cache.outputs.ImageOS }}

    - name: Ccache setup ðŸ¥³
      run: |
        echo '::group::Prepare ccache config'
        # ~ 90 * 3 + 100
        ccache --set-config max_size=380M
        ccache --set-config sloppiness=pch_defines,time_macros
        ccache --show-config
        echo '::endgroup::'

        echo '::group::Clear ccache statistics'
        ccache --zero-stats
        echo '::endgroup::'

        echo '::group::Print version'
        ccache --version
        echo '::endgroup::'

    - name: vcpkg set-up environment
      run: |
        echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
        echo 'VCPKG_DEFAULT_TRIPLET=x64-linux-dynamic' >> $GITHUB_ENV
        echo 'VCPKG_MAX_CONCURRENCY=2' >> $GITHUB_ENV

    - name: CMake print version
      run: |
        cmake --version

    - name: TinyORM create build folder (clang-cmake-debug)
      run: |
        mkdir --parents '../TinyORM-builds-cmake/build-clang-cmake-debug'

    - name: TinyORM cmake configure (clang-cmake-debug)
      run: >-
        source .github/resources/qt5env.sh

        cmake
        -S .
        -B ../TinyORM-builds-cmake/build-clang-cmake-debug
        -G Ninja
        -D CMAKE_CXX_COMPILER_LAUNCHER:FILEPATH=/usr/local/bin/ccache
        -D CMAKE_CXX_COMPILER:FILEPATH=/usr/bin/clang++-17
        -D CMAKE_TOOLCHAIN_FILE:FILEPATH="$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake"
        -D CMAKE_DISABLE_PRECOMPILE_HEADERS:BOOL=ON
        -D CMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON
        -D CMAKE_EXPORT_PACKAGE_REGISTRY:BOOL=OFF
        -D CMAKE_BUILD_TYPE:STRING=Debug
        -D VCPKG_APPLOCAL_DEPS:BOOL=OFF
        -D VERBOSE_CONFIGURE:BOOL=ON
        -D MYSQL_PING:BOOL=ON
        -D BUILD_TESTS:BOOL=ON
        -D ORM:BOOL=ON
        -D TOM:BOOL=ON
        -D TOM_EXAMPLE:BOOL=ON

    - name: TinyORM cmake build âœ¨ (clang-cmake-debug)
      run: |
        source .github/resources/qt5env.sh

        cmake --build ../TinyORM-builds-cmake/build-clang-cmake-debug --target all --parallel 2

    - name: Ccache statistics
      run: |
        ccache --show-stats -vv

    - name: clazy-standalone initialize download
      id: downloads-initialize-clazy-standalone
      run: |
        filename=$(basename "$URL_CLAZY_STANDALONE_LINUX_X64")
        echo "Filename=$filename" >> $GITHUB_OUTPUT

        filepath="${{ runner.temp }}/$filename"
        echo "Filepath=$filepath" >> $GITHUB_OUTPUT

        hash=$(wget "$URL_CACHE_HASH_LINUX" -O- --no-verbose --quiet)
        echo "Hash=$hash" >> $GITHUB_OUTPUT
      env:
        URL_CACHE_HASH_LINUX: ${{ secrets.URL_CACHE_HASH_LINUX }}
        URL_CLAZY_STANDALONE_LINUX_X64: ${{ secrets.URL_CLAZY_STANDALONE_LINUX_X64 }}

    - name: clazy-standalone restore cache (download)
      uses: actions/cache@v3
      id: downloads-cache-clazy-standalone
      with:
        path: ${{ env.archive_filepath }}
        key: ${{ runner.os }}-analyzers-${{ env.cache_name }}-${{ env.cache_hash }}
      env:
        archive_filepath: ${{ steps.downloads-initialize-clazy-standalone.outputs.Filepath }}
        cache_hash: ${{ steps.downloads-initialize-clazy-standalone.outputs.Hash }}
        cache_name: clazy-standalone

    - name: clazy-standalone download
      if: steps.downloads-cache-clazy-standalone.outputs.cache-hit != 'true'
      run: |
        wget "$URL_CLAZY_STANDALONE_LINUX_X64" --output-document="$archive_filepath" --no-verbose
      env:
        archive_filepath: ${{ steps.downloads-initialize-clazy-standalone.outputs.Filepath }}
        URL_CLAZY_STANDALONE_LINUX_X64: ${{ secrets.URL_CLAZY_STANDALONE_LINUX_X64 }}

    - name: clazy-standalone install
      run: |
        echo '::group::Extract archive'
        sudo tar xjvf "$archive_filepath" --directory /usr/local
        echo '::endgroup::'

        echo '::group::Print version'
        clazy-standalone --version
        echo '::endgroup::'
      env:
        archive_filepath: ${{ steps.downloads-initialize-clazy-standalone.outputs.Filepath }}

    - name: TinyORM execute clang-tidy ðŸ”¥
      run: >-
        echo 'TINY_CLANG_TIDY_EXECUTED=true' >> $GITHUB_ENV

        run-clang-tidy-17
        -extra-arg-before='-Qunused-arguments'
        -p=../TinyORM-builds-cmake/build-clang-cmake-debug
        '[\\\/]+(?:examples|src|tests)[\\\/]+.+?[\\\/]+(?!mocs_)[\w\d_\-\+]+\.cpp$'

    # Disabled checks
    # Level 2      - qstring-allocations
    # Manual level - qt4-qstring-from-array, qt6-qlatin1stringchar-to-u,
    #                qvariant-template-instantiation
    - name: TinyORM execute clazy-standalone ðŸš€
      # Run the clazy if the clang-tidy was executed and was success or failed
      if: env.TINY_CLANG_TIDY_EXECUTED == 'true' && (success() || failure())
      run: |
        checks=\
        'level0,level1,level2,'\
        `# Manual checks`\
        'assert-with-side-effects,container-inside-loop,detaching-member,'\
        'heap-allocated-small-trivial-type,ifndef-define-typo,isempty-vs-count,jni-signatures,'\
        'qhash-with-char-pointer-key,qproperty-type-mismatch,qrequiredresult-candidates,'\
        'qstring-varargs,qt-keywords,qt6-deprecated-api-fixes,qt6-fwd-fixes,qt6-header-fixes,'\
        'qt6-qhash-signature,raw-environment-function,reserve-candidates,'\
        'signal-with-return-value,thread-with-slots,tr-non-literal,unneeded-cast,'\
        'use-chrono-in-qtimer,'\
        `# New in Clazy 1.11`\
        'unexpected-flag-enumerator-value,'\
        'use-arrow-operator-instead-of-data,'\
        `# Checks Excluded from level2`\
        'no-qstring-allocations'

        tools/run-clazy-standalone \
        -checks="$checks" \
        -extra-arg-before='-Qunused-arguments' \
        -header-filter='[\\\/]+(examples|orm|tests|tom)[\\\/]+.+\.(h|hpp)$' \
        -p=../TinyORM-builds-cmake/build-clang-cmake-debug \
        '[\\\/]+(?:examples|src|tests)[\\\/]+.+?[\\\/]+(?!mocs_)[\w\d_\-\+]+\.cpp$'
