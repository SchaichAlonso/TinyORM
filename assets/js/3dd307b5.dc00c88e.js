"use strict";(self.webpackChunktinyorm_org=self.webpackChunktinyorm_org||[]).push([[117],{4251:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>a});var s=t(4848),o=t(8453),r=t(8774);const l={sidebar_position:2,sidebar_label:"Collections",description:"The ModelsCollection is specialized container which provides a fluent, convenient wrapper for working with vector of models. Is much more powerful than vectors and expose a variety of map / reduce operations that may be chained using an intuitive interface. All TinyORM methods that return more than one model result will return instances of the ModelsCollection class.",keywords:["c++ orm","orm","collections","collection","model","tinyorm"]},i="TinyORM: Collections",d={id:"tinyorm/collections",title:"TinyORM: Collections",description:"The ModelsCollection is specialized container which provides a fluent, convenient wrapper for working with vector of models. Is much more powerful than vectors and expose a variety of map / reduce operations that may be chained using an intuitive interface. All TinyORM methods that return more than one model result will return instances of the ModelsCollection class.",source:"@site/docs/tinyorm/collections.mdx",sourceDirName:"tinyorm",slug:"/tinyorm/collections",permalink:"/tinyorm/collections",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Collections",description:"The ModelsCollection is specialized container which provides a fluent, convenient wrapper for working with vector of models. Is much more powerful than vectors and expose a variety of map / reduce operations that may be chained using an intuitive interface. All TinyORM methods that return more than one model result will return instances of the ModelsCollection class.",keywords:["c++ orm","orm","collections","collection","model","tinyorm"]},sidebar:"tinyormSidebar",previous:{title:"Relationships",permalink:"/tinyorm/relationships"},next:{title:"Casts",permalink:"/tinyorm/casts"}},c={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Collection Conversion",id:"collection-conversion",level:4},{value:"Creating Collections",id:"creating-collections",level:3},{value:"Available Methods",id:"available-methods",level:2},{value:"<code>all()</code>",id:"method-all",level:4},{value:"<code>contains()</code>",id:"method-contains",level:4},{value:"<code>doesntContain()</code>",id:"method-doesntcontain",level:4},{value:"<code>each()</code>",id:"method-each",level:4},{value:"<code>except()</code>",id:"method-except",level:4},{value:"<code>filter()</code>",id:"method-filter",level:4},{value:"<code>find()</code>",id:"method-find",level:4},{value:"<code>first()</code>",id:"method-first",level:4},{value:"<code>firstWhere()</code>",id:"method-first-where",level:4},{value:"<code>fresh()</code>",id:"method-fresh",level:4},{value:"<code>implode()</code>",id:"method-implode",level:4},{value:"<code>isEmpty()</code>",id:"method-isempty",level:4},{value:"<code>isNotEmpty()</code>",id:"method-isnotempty",level:4},{value:"<code>last()</code>",id:"method-last",level:4},{value:"<code>load()</code>",id:"method-load",level:4},{value:"<code>map()</code>",id:"method-map",level:4},{value:"<code>mapWithKeys()</code>",id:"method-mapwithkeys",level:4},{value:"<code>mapWithModelKeys()</code>",id:"method-mapwithmodelkeys",level:4},{value:"<code>modelKeys()</code>",id:"method-modelkeys",level:4},{value:"<code>only()</code>",id:"method-only",level:4},{value:"<code>pluck()</code>",id:"method-pluck",level:4},{value:"<code>reject()</code>",id:"method-reject",level:4},{value:"<code>sort()</code>",id:"method-sort",level:4},{value:"<code>sortBy()</code>",id:"method-sortby",level:4},{value:"<code>sortByDesc()</code>",id:"method-sortbydesc",level:4},{value:"<code>sortDesc()</code>",id:"method-sortdesc",level:4},{value:"<code>stableSort()</code>",id:"method-stablesort",level:4},{value:"<code>stableSortBy()</code>",id:"method-stablesortby",level:4},{value:"<code>stableSortByDesc()</code>",id:"method-stablesortbydesc",level:4},{value:"<code>stableSortDesc()</code>",id:"method-stablesortdesc",level:4},{value:"<code>tap()</code>",id:"method-tap",level:4},{value:"<code>toBase()</code>",id:"method-tobase",level:4},{value:"<code>toJson()</code>",id:"method-tojson",level:4},{value:"<code>toJsonArray()</code>",id:"method-tojsonarray",level:4},{value:"<code>toJsonDocument()</code>",id:"method-tojsondocument",level:4},{value:"<code>toMap()</code>",id:"method-tomap",level:4},{value:"<code>toMapVariantList()</code>",id:"method-tomapvariantlist",level:4},{value:"<code>toQuery()</code>",id:"method-toquery",level:4},{value:"<code>toList()</code>",id:"method-tolist",level:4},{value:"<code>toListVariantList()</code>",id:"method-tolistvariantlist",level:4},{value:"<code>unique()</code>",id:"method-unique",level:4},{value:"<code>uniqueBy()</code>",id:"method-uniqueby",level:4},{value:"<code>uniqueRelaxed()</code>",id:"method-uniquerelaxed",level:4},{value:"<code>uniqueRelaxedBy()</code>",id:"method-uniquerelaxedby",level:4},{value:"<code>value()</code>",id:"method-value",level:4},{value:"<code>where()</code>",id:"method-where",level:4},{value:"<code>whereBetween()</code>",id:"method-wherebetween",level:4},{value:"<code>whereIn()</code>",id:"method-wherein",level:4},{value:"<code>whereNotBetween()</code>",id:"method-wherenotbetween",level:4},{value:"<code>whereNotIn()</code>",id:"method-wherenotin",level:4},{value:"<code>whereNotNull()</code>",id:"method-wherenotnull",level:4},{value:"<code>whereNull()</code>",id:"method-wherenull",level:4}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"tinyorm-collections",children:"TinyORM: Collections"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#introduction",children:"Introduction"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#creating-collections",children:"Creating Collections"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#available-methods",children:"Available Methods"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)("div",{class:"api-stability alert alert--success",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(r.A,{to:"/stability#stability-indexes",children:(0,s.jsx)(n.strong,{children:"Stability: 2"})})," - Stable"]})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Orm::Tiny::Types::ModelsCollection"})," is specialized container which provides a fluent, convenient wrapper for working with vector of models. All TinyORM methods that return more than one model result, will return instances of the ",(0,s.jsx)(n.code,{children:"ModelsCollection"})," class, including results retrieved via the ",(0,s.jsx)(n.code,{children:"get"})," method or methods that return relationships like the ",(0,s.jsx)(n.code,{children:"getRelation"})," and ",(0,s.jsx)(n.code,{children:"getRelationValue"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ModelsCollection"})," class extends ",(0,s.jsx)(n.code,{children:"QList<Model>"}),", so it naturally inherits dozens of methods used to work with the underlying vector of TinyORM models. Be sure to review the ",(0,s.jsx)(n.a,{href:"https://doc.qt.io/qt/qlist.html",children:(0,s.jsx)(n.code,{children:"QList"})})," documentation to learn all about these helpful methods!"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ModelsCollection"})," template parameter can be declared only with the model type or a model type pointer, it also can't be ",(0,s.jsx)(n.code,{children:"const"})," and can't be a reference. It's constrained using the ",(0,s.jsx)(n.code,{children:"DerivedCollectionModel"})," concept."]})}),"\n",(0,s.jsxs)(n.p,{children:["You can iterate over the ",(0,s.jsx)(n.code,{children:"ModelsCollection"})," the same way as over the ",(0,s.jsx)(n.code,{children:"QList"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'using Models::User;\n\nModelsCollection<User> users = User::whereEq("active", true)->get();\n\nfor (const auto &user : users)\n    qDebug() << user.getAttribute<QString>("name");\n'})}),"\n",(0,s.jsx)(n.p,{children:"However, as previously mentioned, collections are much more powerful than vectors and expose a variety of map / reduce operations that may be chained using an intuitive interface. For example, we may remove all active users and then gather the first name of each remaining user:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'auto names = User::all().reject([](User *const user)\n{\n    return user->getAttribute<bool>("active");\n})\n    .pluck("name");\n'})}),"\n",(0,s.jsxs)(n.p,{children:["As you can see, the ",(0,s.jsx)(n.code,{children:"ModelsCollection"})," class allows you to chain its methods to perform fluent mapping and reducing of the underlying vector. In general, collections are immutable, meaning every ",(0,s.jsx)(n.code,{children:"ModelsCollection"})," method returns an entirely new ",(0,s.jsx)(n.code,{children:"ModelsCollection"})," instance."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ModelsCollection<Model>"})," is returning from the Models' methods like ",(0,s.jsx)(n.code,{children:"get"}),", ",(0,s.jsx)(n.code,{children:"all"}),", ",(0,s.jsx)(n.code,{children:"findMany"}),", ",(0,s.jsx)(n.code,{children:"chunk"}),"; the ",(0,s.jsx)(n.code,{children:"ModelsCollection<Model *>"})," is returning from the relationship-related methods as ",(0,s.jsx)(n.code,{children:"getRelation"})," and ",(0,s.jsx)(n.code,{children:"getRelationValue"}),"."]})}),"\n",(0,s.jsx)(n.h4,{id:"collection-conversion",children:"Collection Conversion"}),"\n",(0,s.jsxs)(n.p,{children:["While most TinyORM collection methods return a new instance of ",(0,s.jsx)(n.code,{children:"ModelsCollection"}),", the ",(0,s.jsx)(n.code,{children:"modelKeys"}),", ",(0,s.jsx)(n.code,{children:"mapWithKeys"}),", and ",(0,s.jsx)(n.code,{children:"pluck"})," methods return a base QList or std unordered/map instances. Likewise, one of the ",(0,s.jsx)(n.code,{children:"map"})," methods overload returns the ",(0,s.jsx)(n.code,{children:"QList<T>"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"creating-collections",children:"Creating Collections"}),"\n",(0,s.jsxs)(n.p,{children:["Creating a ",(0,s.jsx)(n.code,{children:"ModelsCollection"})," is as simple as:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users {\n    {{"name", "Kate"}, {"votes", 150}},\n    {{"name", "John"}, {"votes", 200}},\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can also create a collection of pointers, eg. ",(0,s.jsx)(n.code,{children:"ModelsCollection<User *>"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"ModelsCollection<User *> userPointers {\n    &users[0], &users[1],\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ModelsCollection<Model>"})," is implicitly convertible and assignable from the ",(0,s.jsx)(n.code,{children:"QList<Model>"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'QList<User> usersVector {\n    {{"name", "Kate"}, {"votes", 150}},\n    {{"name", "John"}, {"votes", 200}},\n};\n\nModelsCollection<User> users(usersVector);\nusers = usersVector;\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Alternatively, you can use the ",(0,s.jsx)(n.code,{children:"Orm::collect<Model>"})," helper function to create a ",(0,s.jsx)(n.code,{children:"ModelsCollection"})," from the given attributes:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users = Orm::collect<User>({\n    {{"name", "Kate"}, {"added_on", QDateTime::currentDateTimeUtc()}},\n    {{"name", "John"}, {"added_on", QDateTime({2023, 6, 1}, {13, 46, 15}, QTimeZone::UTC)}},\n});\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Orm::collect<Model>"})," function is ",(0,s.jsx)(n.strong,{children:"mandatory"})," if your attributes contain the ",(0,s.jsx)(n.code,{children:"QDateTime"})," instance, you can read more about this problem ",(0,s.jsx)(n.a,{href:"/tinyorm/getting-started#qdatetime-and-connection-name-problem",children:"here"}),"."]})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The results of ",(0,s.jsx)(n.a,{href:"/tinyorm/getting-started",children:"TinyORM"})," queries are always returned as ",(0,s.jsx)(n.code,{children:"ModelsCollection"})," instances."]})}),"\n",(0,s.jsx)(n.h2,{id:"available-methods",children:"Available Methods"}),"\n",(0,s.jsxs)(n.p,{children:["For the majority of the remaining collection documentation, we'll discuss each method available on the ",(0,s.jsx)(n.code,{children:"ModelsCollection"})," class. Remember, all of these methods may be chained to fluently manipulate the underlying vector."]}),"\n",(0,s.jsxs)(n.p,{children:["Furthermore, almost every method returns a new ",(0,s.jsx)(n.code,{children:"ModelsCollection"})," instance, allowing you to preserve the original copy of the collection when necessary:"]}),"\n",(0,s.jsx)("div",{className:"collection-methods-list",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"#method-all",children:"all"}),"\n",(0,s.jsx)(n.a,{href:"#method-contains",children:"contains"}),"\n",(0,s.jsx)(n.a,{href:"#method-doesntcontain",children:"doesntContain"}),"\n",(0,s.jsx)(n.a,{href:"#method-each",children:"each"}),"\n",(0,s.jsx)(n.a,{href:"#method-except",children:"except"}),"\n",(0,s.jsx)(n.a,{href:"#method-filter",children:"filter"}),"\n",(0,s.jsx)(n.a,{href:"#method-find",children:"find"}),"\n",(0,s.jsx)(n.a,{href:"#method-first",children:"first"}),"\n",(0,s.jsx)(n.a,{href:"#method-first-where",children:"firstWhere"}),"\n",(0,s.jsx)(n.a,{href:"#method-fresh",children:"fresh"}),"\n",(0,s.jsx)(n.a,{href:"#method-implode",children:"implode"}),"\n",(0,s.jsx)(n.a,{href:"#method-isempty",children:"isEmpty"}),"\n",(0,s.jsx)(n.a,{href:"#method-isnotempty",children:"isNotEmpty"}),"\n",(0,s.jsx)(n.a,{href:"#method-last",children:"last"}),"\n",(0,s.jsx)(n.a,{href:"#method-load",children:"load"}),"\n",(0,s.jsx)(n.a,{href:"#method-map",children:"map"}),"\n",(0,s.jsx)(n.a,{href:"#method-mapwithkeys",children:"mapWithKeys"}),"\n",(0,s.jsx)(n.a,{href:"#method-mapwithmodelkeys",children:"mapWithModelKeys"}),"\n",(0,s.jsx)(n.a,{href:"#method-modelkeys",children:"modelKeys"}),"\n",(0,s.jsx)(n.a,{href:"#method-only",children:"only"}),"\n",(0,s.jsx)(n.a,{href:"#method-pluck",children:"pluck"}),"\n",(0,s.jsx)(n.a,{href:"#method-reject",children:"reject"}),"\n",(0,s.jsx)(n.a,{href:"#method-sort",children:"sort"}),"\n",(0,s.jsx)(n.a,{href:"#method-sortby",children:"sortBy"}),"\n",(0,s.jsx)(n.a,{href:"#method-sortbydesc",children:"sortByDesc"}),"\n",(0,s.jsx)(n.a,{href:"#method-sortdesc",children:"sortDesc"}),"\n",(0,s.jsx)(n.a,{href:"#method-stablesort",children:"stableSort"}),"\n",(0,s.jsx)(n.a,{href:"#method-stablesortby",children:"stableSortBy"}),"\n",(0,s.jsx)(n.a,{href:"#method-stablesortbydesc",children:"stableSortByDesc"}),"\n",(0,s.jsx)(n.a,{href:"#method-stablesortdesc",children:"stableSortDesc"}),"\n",(0,s.jsx)(n.a,{href:"#method-tap",children:"tap"}),"\n",(0,s.jsx)(n.a,{href:"#method-tobase",children:"toBase"}),"\n",(0,s.jsx)(n.a,{href:"#method-tojson",children:"toJson"}),"\n",(0,s.jsx)(n.a,{href:"#method-tojsonarray",children:"toJsonArray"}),"\n",(0,s.jsx)(n.a,{href:"#method-tojsondocument",children:"toJsonDocument"}),"\n",(0,s.jsx)(n.a,{href:"#method-tomap",children:"toMap"}),"\n",(0,s.jsx)(n.a,{href:"#method-tomapvariantlist",children:"toMapVariantList"}),"\n",(0,s.jsx)(n.a,{href:"#method-toquery",children:"toQuery"}),"\n",(0,s.jsx)(n.a,{href:"#method-tolist",children:"toList"}),"\n",(0,s.jsx)(n.a,{href:"#method-tolistvariantlist",children:"toListVariantList"}),"\n",(0,s.jsx)(n.a,{href:"#method-unique",children:"unique"}),"\n",(0,s.jsx)(n.a,{href:"#method-uniqueby",children:"uniqueBy"}),"\n",(0,s.jsx)(n.a,{href:"#method-uniquerelaxed",children:"uniqueRelaxed"}),"\n",(0,s.jsx)(n.a,{href:"#method-uniquerelaxedby",children:"uniqueRelaxedBy"}),"\n",(0,s.jsx)(n.a,{href:"#method-value",children:"value"}),"\n",(0,s.jsx)(n.a,{href:"#method-where",children:"where"}),"\n",(0,s.jsx)(n.a,{href:"#method-wherebetween",children:"whereBetween"}),"\n",(0,s.jsx)(n.a,{href:"#method-wherein",children:"whereIn"}),"\n",(0,s.jsx)(n.a,{href:"#method-wherenotbetween",children:"whereNotBetween"}),"\n",(0,s.jsx)(n.a,{href:"#method-wherenotin",children:"whereNotIn"}),"\n",(0,s.jsx)(n.a,{href:"#method-wherenotnull",children:"whereNotNull"}),"\n",(0,s.jsx)(n.a,{href:"#method-wherenull",children:"whereNull"})]})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["For a better understanding of the following examples, many of the variable declarations below use actual types instead of the ",(0,s.jsx)(n.code,{children:"auto"})," keyword."]})}),"\n",(0,s.jsxs)("div",{className:"collection-methods",children:[(0,s.jsx)(n.h4,{id:"method-all",children:(0,s.jsx)(n.code,{children:"all()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"all"})," method returns a copy of the underlying vector represented by the collection:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"QList<User> = users.all();\n"})}),(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"#method-tobase",children:(0,s.jsx)(n.code,{children:"toBase"})})," is an alias to the ",(0,s.jsx)(n.code,{children:"all"})," method."]})}),(0,s.jsx)(n.h4,{id:"method-contains",children:(0,s.jsx)(n.code,{children:"contains()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"contains"})," method may be used to determine if a given model instance is contained by the collection. This method accepts a primary key or a model instance:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"users.contains(1);\n\nusers.contains(User::find(1));\n"})}),(0,s.jsxs)(n.p,{children:["Alternatively, you may pass a lambda expression to the ",(0,s.jsx)(n.code,{children:"contains"})," method to determine if a model exists in the collection matching a given truth test:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"users.contains([](const User *const user)\n{\n    return user->getKeyCasted() == 2;\n});\n"})}),(0,s.jsxs)(n.p,{children:["For the inverse of ",(0,s.jsx)(n.code,{children:"contains"}),", see the ",(0,s.jsx)(n.a,{href:"#method-doesntcontain",children:"doesntContain"})," method."]}),(0,s.jsx)(n.h4,{id:"method-doesntcontain",children:(0,s.jsx)(n.code,{children:"doesntContain()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"doesntContain"})," method determines whether the collection does not contain a given item. This method accepts a primary key or a model instance:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"users.doesntContain(1);\n\nusers.doesntContain(User::find(1));\n"})}),(0,s.jsxs)(n.p,{children:["Alternatively, you may pass a lambda expression to the ",(0,s.jsx)(n.code,{children:"doesntContain"})," method to determine if a model does not exist in the collection matching a given truth test:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"users.doesntContain([](const User *const user)\n{\n    return user->getKeyCasted() == 2;\n});\n"})}),(0,s.jsxs)(n.p,{children:["For the inverse of ",(0,s.jsx)(n.code,{children:"doesntContain"}),", see the ",(0,s.jsx)(n.a,{href:"#method-contains",children:"contains"})," method."]}),(0,s.jsx)(n.h4,{id:"method-each",children:(0,s.jsx)(n.code,{children:"each()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"each"})," method iterates over the models in the collection and passes each model to the lambda expression:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users = Post::whereEq("user_id", 1)->get();\n\nusers.each([](User *const user)\n{\n    // ...\n});\n'})}),(0,s.jsxs)(n.p,{children:["If you would like to stop iterating through the models, you may return ",(0,s.jsx)(n.code,{children:"false"})," from your lambda expression:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"users.each([](User *const user)\n{\n    if (/* condition */)\n        return false;\n\n    // Some logic\n\n    return true;\n});\n"})}),(0,s.jsx)(n.p,{children:"You may also pass the lambda expression with two parameters, whereas the second one is an index:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"users.each([](User *const user, const std::size_t index)\n{\n    // ...\n});\n"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"each"})," method returns an lvalue ",(0,s.jsx)(n.strong,{children:"reference"})," to the currently processed collection."]}),(0,s.jsxs)(n.p,{children:["It can be also called on ",(0,s.jsx)(n.code,{children:"ModelsCollection"})," rvalues, it returns an rvalue reference in this case."]}),(0,s.jsx)(n.h4,{id:"method-except",children:(0,s.jsx)(n.code,{children:"except()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"except"})," method returns all of the models that do not have the given primary keys:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"ModelsCollection<User *> usersResult = users.except({1, 2, 3});\n"})}),(0,s.jsxs)(n.p,{children:["All of the models are returned if the ",(0,s.jsx)(n.code,{children:"ids"})," argument is empty ",(0,s.jsx)(n.code,{children:"except({})"}),"."]}),(0,s.jsx)(n.p,{children:"The order of models in the collection is preserved."}),(0,s.jsxs)(n.p,{children:["For the inverse of ",(0,s.jsx)(n.code,{children:"except"}),", see the ",(0,s.jsx)(n.a,{href:"#method-only",children:"only"})," method."]}),(0,s.jsx)(n.h4,{id:"method-filter",children:(0,s.jsx)(n.code,{children:"filter()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"filter"})," method filters the collection using the lambda expression, keeping only those models that pass a given truth test:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'auto usersBanned = users.filter([](const User *const user)\n{\n    return user->getAttribute<bool>("is_banned");\n});\n'})}),(0,s.jsx)(n.p,{children:"You may also pass the lambda expression with two parameters, whereas the second one is an index:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'auto usersBanned = users.filter([](const User *const user,\n                                   const std::size_t index)\n{\n    return index < 10 && user->getAttribute<bool>("is_banned");\n});\n'})}),(0,s.jsxs)(n.p,{children:["If no lambda expression is supplied, all models of the collection that are equivalent to the ",(0,s.jsx)(n.code,{children:"nullptr"})," will be removed:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"ModelsCollection<User> usersRaw = User::findMany({1, 2});\nModelsCollection<User *> users {&usersRaw[0], nullptr, &usersRaw[1]};\n\nModelsCollection<User *> filtered = users.filter();\n\n// {1, 2}\n"})}),(0,s.jsxs)(n.p,{children:["For the inverse of ",(0,s.jsx)(n.code,{children:"filter"}),", see the ",(0,s.jsx)(n.a,{href:"#method-reject",children:"reject"})," method."]}),(0,s.jsx)(n.h4,{id:"method-find",children:(0,s.jsx)(n.code,{children:"find()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"find"})," method returns the model that has a primary key matching the given key:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"User *const user = users.find(1);\n"})}),(0,s.jsxs)(n.p,{children:["If you pass a model instance, ",(0,s.jsx)(n.code,{children:"find"})," will attempt to return a model matching the primary key:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"User *user = users.find(anotherUser);\n"})}),(0,s.jsxs)(n.p,{children:["The two overloads above also accept the second ",(0,s.jsx)(n.code,{children:"defaultModel"})," model argument, which will be returned if a model was not found in the collection, its default value is the ",(0,s.jsx)(n.code,{children:"nullptr"}),"."]}),(0,s.jsxs)(n.p,{children:["Alternatively, may pass more IDs and ",(0,s.jsx)(n.code,{children:"find"})," will return all models which have a primary key within the given unordered set:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"ModelsCollection<User *> usersMany = users.find({1, 2});\n"})}),(0,s.jsxs)(n.p,{children:["This overload internally calls the ",(0,s.jsx)(n.a,{href:"#method-only",children:(0,s.jsx)(n.code,{children:"only"})})," method."]}),(0,s.jsx)(n.h4,{id:"method-first",children:(0,s.jsx)(n.code,{children:"first()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"first"})," method returns the first model in the collection that passes a given truth test:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users {\n    {{"name", "Kate"}, {"votes", 150}},\n    {{"name", "John"}, {"votes", 200}},\n    {{"name", "Jack"}, {"votes", 400}},\n};\n\nUser *user = users.first([](User *const user)\n{\n    return user->getAttribute<quint64>("votes") > 150;\n});\n\n// {{"name", "John"}, {"votes", 200}}\n'})}),(0,s.jsxs)(n.p,{children:["If no model passes a given truth test then the value of the second ",(0,s.jsx)(n.code,{children:"defaultModel"})," argument will be returned, its default value is the ",(0,s.jsx)(n.code,{children:"nullptr"}),"."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'using NullVariant = Orm::Utils::NullVariant;\n\nUser defaultUser {{"name", NullVariant::QString()},\n                  {"votes", NullVariant::ULongLong()}};\n\nUser *user = users.first([](User *const user)\n{\n    return user->getAttribute<quint64>("votes") > 500;\n},\n    &defaultUser);\n\n/*\n    {{"name", NullVariant::QString()},\n     {"votes", NullVariant::ULongLong()}}\n*/\n'})}),(0,s.jsxs)(n.p,{children:["You can also call all ",(0,s.jsx)(n.code,{children:"first"})," overloads provided by the ",(0,s.jsx)(n.a,{href:"https://doc.qt.io/qt/qlist.html#first",children:(0,s.jsx)(n.code,{children:"QList::first"})}),"."]}),(0,s.jsx)(n.h4,{id:"method-first-where",children:(0,s.jsx)(n.code,{children:"firstWhere()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"firstWhere"})," method returns the first model in the collection with the given column / value pair:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'using NullVariant = Orm::Utils::NullVariant;\n\nModelsCollection<User> users {\n    {{"name", "Leon"}, {"age", NullVariant::UShort()}},\n    {{"name", "Jill"}, {"age", 14}},\n    {{"name", "Jack"}, {"age", 23}},\n    {{"name", "Jill"}, {"age", 84}},\n};\n\nauto user = users.firstWhereEq("name", "Linda");\n\n// {{"name", "Jill"}, {"age", 14}}\n'})}),(0,s.jsxs)(n.p,{children:["You may also call the ",(0,s.jsx)(n.code,{children:"firstWhere"})," method with a comparison operator:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'users.firstWhere("age", ">=", 18);\n\n// {{"name", "Jack"}, {"age", 23}}\n'})}),(0,s.jsx)(n.h4,{id:"method-fresh",children:(0,s.jsx)(n.code,{children:"fresh()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"fresh"})," method retrieves a fresh instance of each model in the collection from the database. In addition, any specified relationships will be eager loaded:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'auto usersFresh = users.fresh();\n\nauto usersFresh = users.fresh("comments");\n\nauto usersFresh = users.fresh("posts:id,name");\n\nauto usersFresh = users.fresh({"comments", "posts:id,name"});\n'})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"relations"})," argument format is the same as for TinyBuilder's ",(0,s.jsx)(n.a,{href:"/tinyorm/relationships#lazy-eager-loading",children:(0,s.jsx)(n.code,{children:"load"})})," method."]}),(0,s.jsx)(n.h4,{id:"method-implode",children:(0,s.jsx)(n.code,{children:"implode()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"implode"}),' method joins attributes by the given column and the "glue" string you wish to place between the values:']}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<Product> products {\n    {{"product", "Desk"},  {"price", 200}},\n    {{"product", "Chair"}, {"price", 100}},\n};\n\nproducts.implode("product", ", ");\n\n// {Desk, Chair}\n'})}),(0,s.jsx)(n.p,{children:'The default "glue" value is an empty string "".'}),(0,s.jsx)(n.h4,{id:"method-isempty",children:(0,s.jsx)(n.code,{children:"isEmpty()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"isEmpty"})," method returns ",(0,s.jsx)(n.code,{children:"true"})," if the collection is empty; otherwise, ",(0,s.jsx)(n.code,{children:"false"})," is returned:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"ModelsCollection<User>().isEmpty();\n\n// true\n"})}),(0,s.jsx)(n.h4,{id:"method-isnotempty",children:(0,s.jsx)(n.code,{children:"isNotEmpty()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"isNotEmpty"})," method returns ",(0,s.jsx)(n.code,{children:"true"})," if the collection is not empty; otherwise, ",(0,s.jsx)(n.code,{children:"false"})," is returned:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"ModelsCollection<User>().isNotEmpty();\n\n// false\n"})}),(0,s.jsx)(n.h4,{id:"method-last",children:(0,s.jsx)(n.code,{children:"last()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"last"})," method returns the last model in the collection that passes a given truth test:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users {\n    {{"name", "Kate"}, {"votes", 150}},\n    {{"name", "John"}, {"votes", 200}},\n    {{"name", "Jack"}, {"votes", 400}},\n    {{"name", "Rose"}, {"votes", 350}},\n};\n\nUser *user = users.last([](User *const user)\n{\n    return user->getAttribute<quint64>("votes") < 300;\n});\n\n// {{"name", "John"}, {"votes", 200}}\n'})}),(0,s.jsxs)(n.p,{children:["If no model passes a given truth test then the value of the second ",(0,s.jsx)(n.code,{children:"defaultModel"})," argument will be returned, its default value is the ",(0,s.jsx)(n.code,{children:"nullptr"}),"."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'using NullVariant = Orm::Utils::NullVariant;\n\nUser defaultUser {{"name",  NullVariant::QString()},\n                  {"votes", NullVariant::ULongLong()}};\n\nUser *user = users.last([](User *const user)\n{\n    return user->getAttribute<quint64>("votes") < 100;\n},\n    &defaultUser);\n\n/*\n    {{"name", NullVariant::QString()},\n     {"votes", NullVariant::ULongLong()}}\n*/\n'})}),(0,s.jsxs)(n.p,{children:["You can also call all ",(0,s.jsx)(n.code,{children:"last"})," overloads provided by the ",(0,s.jsx)(n.a,{href:"https://doc.qt.io/qt/qlist.html#last",children:(0,s.jsx)(n.code,{children:"QList::last"})}),"."]}),(0,s.jsx)(n.h4,{id:"method-load",children:(0,s.jsx)(n.code,{children:"load()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"load"})," method eager loads the given relationships for all models in the collection:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'users.load({"comments", "posts"});\n\nusers.load("comments.author");\n\nusers.load({{"comments"}, {"posts", [](auto &query)\n{\n    query.whereEq("active", true);\n}}});\n'})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"relations"})," argument format is the same as for TinyBuilder's ",(0,s.jsx)(n.a,{href:"/tinyorm/relationships#lazy-eager-loading",children:(0,s.jsx)(n.code,{children:"load"})})," method."]}),(0,s.jsx)(n.h4,{id:"method-map",children:(0,s.jsx)(n.code,{children:"map()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"map"})," method iterates through the collection and passes a ",(0,s.jsx)(n.strong,{children:"copy"})," of each model to the given lambda expression. The lambda expression is free to modify the model and return it, thus forming a new collection of modified models:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users {\n    {{"name", "John"}, {"votes", 200}},\n    {{"name", "Jack"}, {"votes", 400}},\n};\n\nauto usersAdded = users.map([](User &&userCopy)\n{\n    if (userCopy.getAttribute<QString>("name") == "John")\n        userCopy["votes"] = userCopy.getAttribute<quint64>("votes") + 1;\n\n    return std::move(userCopy);\n});\n\n/*\n    {\n        {{"name", "John"}, {"price", 201}},\n        {{"name", "Jack"}, {"price", 400}},\n    }\n*/\n'})}),(0,s.jsxs)(n.p,{children:["The second ",(0,s.jsx)(n.code,{children:"map"})," overload allows to return the ",(0,s.jsx)(n.code,{children:"QList<T>"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'QList<quint64> usersAdded = users.map<quint64>([](User &&userCopy)\n{\n    const auto votesRef = userCopy["votes"];\n\n    if (userCopy.getAttribute<QString>("name") == "John")\n         votesRef = userCopy.getAttribute<quint64>("votes") + 1;\n\n    return votesRef->value<quint64>();\n});\n\n// {201, 400}\n'})}),(0,s.jsxs)(n.p,{children:["Both overloads allow to pass the lambda expression with two arguments, whereas the second argument can be an index of the ",(0,s.jsx)(n.code,{children:"std::size_t"})," type."]}),(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["Like most other collection methods, ",(0,s.jsx)(n.code,{children:"map"})," returns a new collection instance; it does not modify the collection it is called on. If you want to modify the original collection in place, use the ",(0,s.jsx)(n.a,{href:"#method-each",children:(0,s.jsx)(n.code,{children:"each"})})," method."]})}),(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The model copy is passed to the lambda expression even if the ",(0,s.jsx)(n.code,{children:"map"})," iterates over a collection of model pointers ",(0,s.jsx)(n.code,{children:"ModelsCollection<Model *>"}),". The models are dereferenced behind the scene."]})}),(0,s.jsx)(n.h4,{id:"method-mapwithkeys",children:(0,s.jsx)(n.code,{children:"mapWithKeys()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"mapWithKeys"})," method iterates through the collection and passes each model to the given lambda expression. It returns the ",(0,s.jsx)(n.code,{children:"std::unordered_map<K, V>"})," and the lambda expression should return the ",(0,s.jsx)(n.code,{children:"std::pair<K, V>"})," containing a single column / value pair:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users {\n    {{"id", 1}, {"name", "John"}, {"email", "john@example.com"}},\n    {{"id", 2}, {"name", "Jill"}, {"email", "jill@example.com"}},\n};\n\nauto usersMap = users.mapWithKeys<quint64, QString>(\n                    [](User *const user) -> std::pair<quint64, QString>\n{\n    return {user->getKeyCasted(), user->getAttribute<QString>("name")};\n});\n\n// {{1, \'John\'}, {2, \'Jill\'}}\n'})}),(0,s.jsx)(n.p,{children:"You can also map IDs to the model pointers:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"auto usersMap = users.mapWithKeys<quint64, User *>(\n                    [](User *const user) -> std::pair<quint64, User *>\n{\n    return {user->getKeyCasted(), user};\n});\n"})}),(0,s.jsx)(n.h4,{id:"method-mapwithmodelkeys",children:(0,s.jsx)(n.code,{children:"mapWithModelKeys()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"mapWithModelKeys"})," maps the primary keys to the ",(0,s.jsx)(n.code,{children:"Model *"}),", it returns the ",(0,s.jsx)(n.code,{children:"std::unordered_map<Model::KeyType, Model *>"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"auto usersMap = users.mapWithModelKeys();\n"})}),(0,s.jsx)(n.h4,{id:"method-modelkeys",children:(0,s.jsx)(n.code,{children:"modelKeys()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"modelKeys"})," method returns the primary keys for all models in the collection:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users {\n    {{"id", 1}, {"name", "John"}},\n    {{"id", 2}, {"name", "Jill"}},\n    {{"id", 3}, {"name", "Kate"}},\n    {{"id", 5}, {"name", "Rose"}},\n};\n\nusers.modelKeys(); // Returns QList<QVariant>\nusers.modelKeys<quint64>();\n\n// {1, 2, 3, 5}\n'})}),(0,s.jsx)(n.h4,{id:"method-only",children:(0,s.jsx)(n.code,{children:"only()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"only"})," method returns all of the models that have the given primary keys:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"ModelsCollection<User *> usersResult = users.only({1, 2, 3});\n"})}),(0,s.jsxs)(n.p,{children:["An empty collection is returned if the ",(0,s.jsx)(n.code,{children:"ids"})," argument is empty ",(0,s.jsx)(n.code,{children:"only({})"}),"."]}),(0,s.jsx)(n.p,{children:"The order of models in the collection is preserved."}),(0,s.jsxs)(n.p,{children:["For the inverse of ",(0,s.jsx)(n.code,{children:"only"}),", see the ",(0,s.jsx)(n.a,{href:"#method-except",children:"except"})," method."]}),(0,s.jsx)(n.h4,{id:"method-pluck",children:(0,s.jsx)(n.code,{children:"pluck()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"pluck"})," method retrieves all of the values for a given column, the following overload returns the ",(0,s.jsx)(n.code,{children:"QList<QVariant>"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<Product> products {\n    {{"id", 1}, {"name", "Desk"}},\n    {{"id", 2}, {"name", "Chair"}},\n};\n\nauto plucked = products.pluck("name");\n\n// {Desk, Chair}\n'})}),(0,s.jsxs)(n.p,{children:["The second overload allows returning the custom type ",(0,s.jsx)(n.code,{children:"QList<T>"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'auto plucked = products.pluck<QString>("name");\n'})}),(0,s.jsxs)(n.p,{children:["You may also specify how you wish the resulting collection to be keyed, this overload returns the ",(0,s.jsx)(n.code,{children:"std::map<T, QVariant>"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'auto plucked = products.pluck<quint64>("name", "id");\n\n// {{1, "Desk"}, {2, "Chair"}}\n'})}),(0,s.jsx)(n.p,{children:"If duplicate keys exist, the last matching attribute will be inserted into the plucked collection:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<Product> collection {\n    {{"brand", "Tesla"},  {"color", "red"}},\n    {{"brand", "Pagani"}, {"color", "white"}},\n    {{"brand", "Tesla"},  {"color", "black"}},\n    {{"brand", "Pagani"}, {"color", "orange"}},\n};\n\nauto plucked = collection.pluck<QString>("color", "brand");\n\n// {{\'Tesla\', \'black\'}, {\'Pagani\', \'orange"}}\n'})}),(0,s.jsx)(n.h4,{id:"method-reject",children:(0,s.jsx)(n.code,{children:"reject()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"reject"})," method filters the collection using the given lambda expression. The lambda should return ",(0,s.jsx)(n.code,{children:"true"})," if the model should be removed from the resulting collection:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'auto usersWithNote = users.reject([](const User *const user)\n{\n    return user->getAttribute("note").isNull();\n});\n'})}),(0,s.jsxs)(n.p,{children:["You may also pass the lambda expression with two arguments, whereas the second argument can be an index of the ",(0,s.jsx)(n.code,{children:"std::size_t"})," type."]}),(0,s.jsxs)(n.p,{children:["For the inverse of the ",(0,s.jsx)(n.code,{children:"reject"})," method, see the ",(0,s.jsx)(n.a,{href:"#method-filter",children:(0,s.jsx)(n.code,{children:"filter"})})," method."]}),(0,s.jsx)(n.h4,{id:"method-sort",children:(0,s.jsx)(n.code,{children:"sort()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"sort"})," method sorts the models collection by primary keys:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users {\n    {{"id", 2}, {"name", "Kate"}},\n    {{"id", 3}, {"name", "John"}},\n    {{"id", 1}, {"name", "Jack"}},\n};\n\nauto sorted = users.sort();\n\n/*\n    {\n        {{"id", 1}, {"name", "Jack"}},\n        {{"id", 2}, {"name", "Kate"}},\n        {{"id", 3}, {"name", "John"}},\n    }\n*/\n'})}),(0,s.jsxs)(n.p,{children:["You may pass a predicate and projection callbacks to the ",(0,s.jsx)(n.code,{children:"sort"})," method with your own algorithms. Refer to the CPP reference documentation on ",(0,s.jsx)(n.a,{href:"https://en.cppreference.com/w/cpp/algorithm/ranges/sort",children:(0,s.jsx)(n.code,{children:"ranges::sort"})}),", which is what the ",(0,s.jsx)(n.code,{children:"sort"})," method calls internally."]}),(0,s.jsxs)(n.p,{children:["You can eg. sort by multiple columns, for an alternative method of multi-column sorting look at ",(0,s.jsx)(n.a,{href:"#method-sortby",children:"sortBy"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users {\n    {{"name", "Kate"}, {"votes", 350}},\n    {{"name", "John"}, {"votes", 200}},\n    {{"name", "John"}, {"votes", 150}},\n    {{"name", "Kate"}, {"votes", 200}},\n};\n\nauto sorted = users.sort([](const User *const left,\n                            const User *const right)\n{\n    const auto leftValue = left->getAttribute<QString>("name");\n    const auto rightValue = right->getAttribute<QString>("name");\n\n    if (leftValue == rightValue)\n        return left->getAttribute<quint64>("votes") <\n               right->getAttribute<quint64>("votes");\n\n    return leftValue < rightValue;\n});\n\n/*\n    {\n        {{"name", "John"}, {"votes", 150}},\n        {{"name", "John"}, {"votes", 200}},\n        {{"name", "Kate"}, {"votes", 200}},\n        {{"name", "Kate"}, {"votes", 350}},\n    }\n*/\n'})}),(0,s.jsx)(n.p,{children:"The order of equal elements is not guaranteed to be preserved."}),(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["You can use the ",(0,s.jsx)(n.a,{href:"#method-stablesort",children:"stable"})," sort method variants to preserve the order of equal models."]})}),(0,s.jsx)(n.h4,{id:"method-sortby",children:(0,s.jsx)(n.code,{children:"sortBy()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"sortBy"})," method sorts the collection by the given column, this overload needs the template argument so it can cast the attribute value before comparing:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users {\n    {{"name", "Kate"}, {"votes", 150}},\n    {{"name", "John"}, {"votes", 200}},\n    {{"name", "Jack"}, {"votes", 400}},\n};\n\nauto sorted = users.sortBy<QString>("name");\n\n/*\n    {\n        {{"name", "Jack"}, {"votes", 400}},\n        {{"name", "John"}, {"votes", 200}},\n        {{"name", "Kate"}, {"votes", 150}},\n    }\n*/\n'})}),(0,s.jsx)(n.p,{children:"You may pass the projection callback to determine how to sort the collection's models:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'auto sorted = users.sortBy([](User *const user)\n{\n    return user->getAttribute<quint64>("votes");\n});\n\n/*\n    {\n        {{"name", "Kate"}, {"votes", 150}},\n        {{"name", "John"}, {"votes", 200}},\n        {{"name", "Jack"}, {"votes", 400}},\n    }\n*/\n'})}),(0,s.jsxs)(n.p,{children:["If you would like to sort your collection by multiple columns, you may pass a vector of comparison lambda expressions that define each sort operation to the ",(0,s.jsx)(n.code,{children:"sortBy"})," method, in the following example is the ",(0,s.jsx)(n.code,{children:"name"})," column sorted in ascending order and the second ",(0,s.jsx)(n.code,{children:"votes"})," column is sorted in descending order:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'using AttributeUtils = Orm::Tiny::Utils::Attribute;\n\nModelsCollection<User> users {\n    {{"name", "Kate"}, {"votes", 350}},\n    {{"name", "John"}, {"votes", 200}},\n    {{"name", "John"}, {"votes", 150}},\n    {{"name", "Kate"}, {"votes", 200}},\n};\n\nauto sorted = users.sortBy({\n    [](const User *const left, const User *const right)\n    {\n        return AttributeUtils::compareForSortBy(\n                left->getAttribute<QString>("name"),\n                right->getAttribute<QString>("name"));\n    },\n    [](const User *const left, const User *const right)\n    {\n        return AttributeUtils::compareForSortByDesc(\n                left->getAttribute<quint64>("votes"),\n                right->getAttribute<quint64>("votes"));\n    },\n});\n\n/*\n    {\n        {{"name", "John"}, {"votes", 200}},\n        {{"name", "John"}, {"votes", 150}},\n        {{"name", "Kate"}, {"votes", 350}},\n        {{"name", "Kate"}, {"votes", 200}},\n    }\n*/\n'})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"AttributeUtils::compareForSortBy"})," and ",(0,s.jsx)(n.code,{children:"compareForSortByDesc"})," methods are helper methods, they are needed because the Qt framework doesn't define ",(0,s.jsx)(n.code,{children:"<=>"})," spaceship operator on its types, it doesn't support the three-way comparison."]}),(0,s.jsx)(n.p,{children:"The order of equal elements is not guaranteed to be preserved."}),(0,s.jsx)(n.h4,{id:"method-sortbydesc",children:(0,s.jsx)(n.code,{children:"sortByDesc()"})}),(0,s.jsxs)(n.p,{children:["This method has the same signature as the ",(0,s.jsx)(n.a,{href:"#method-sortby",children:(0,s.jsx)(n.code,{children:"sortBy"})})," method but will sort the collection in the opposite order."]}),(0,s.jsx)(n.p,{children:"The order of equal elements is not guaranteed to be preserved."}),(0,s.jsx)(n.h4,{id:"method-sortdesc",children:(0,s.jsx)(n.code,{children:"sortDesc()"})}),(0,s.jsxs)(n.p,{children:["This method will sort the collection in the opposite order as the ",(0,s.jsx)(n.a,{href:"#method-sort",children:(0,s.jsx)(n.code,{children:"sort"})})," method:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users {\n    {{"id", 2}, {"name", "Kate"}},\n    {{"id", 3}, {"name", "John"}},\n    {{"id", 1}, {"name", "Jack"}},\n};\n\nauto sorted = users.sortDesc();\n\n/*\n    {\n        {{"id", 3}, {"name", "John"}},\n        {{"id", 2}, {"name", "Kate"}},\n        {{"id", 1}, {"name", "Jack"}},\n    }\n*/\n'})}),(0,s.jsx)(n.p,{children:"The order of equal elements is not guaranteed to be preserved."}),(0,s.jsx)(n.h4,{id:"method-stablesort",children:(0,s.jsx)(n.code,{children:"stableSort()"})}),(0,s.jsxs)(n.p,{children:["This method has the same signature as the ",(0,s.jsx)(n.a,{href:"#method-sort",children:(0,s.jsx)(n.code,{children:"sort"})})," method but will preserve the order of equal elements (guaranteed to be preserved)."]}),(0,s.jsx)(n.h4,{id:"method-stablesortby",children:(0,s.jsx)(n.code,{children:"stableSortBy()"})}),(0,s.jsxs)(n.p,{children:["This method has the same signature as the ",(0,s.jsx)(n.a,{href:"#method-sortby",children:(0,s.jsx)(n.code,{children:"sortBy"})})," method but will preserve the order of equal elements (guaranteed to be preserved)."]}),(0,s.jsx)(n.h4,{id:"method-stablesortbydesc",children:(0,s.jsx)(n.code,{children:"stableSortByDesc()"})}),(0,s.jsxs)(n.p,{children:["This method has the same signature as the ",(0,s.jsx)(n.a,{href:"#method-sortbydesc",children:(0,s.jsx)(n.code,{children:"sortByDesc"})})," method but will sort the collection in the opposite order and preserve the order of equal elements (guaranteed to be preserved)."]}),(0,s.jsx)(n.h4,{id:"method-stablesortdesc",children:(0,s.jsx)(n.code,{children:"stableSortDesc()"})}),(0,s.jsxs)(n.p,{children:["This method has the same signature as the ",(0,s.jsx)(n.a,{href:"#method-sortdesc",children:(0,s.jsx)(n.code,{children:"sortDesc"})})," method but will sort the collection in the opposite order and preserve the order of equal elements (guaranteed to be preserved)."]}),(0,s.jsx)(n.h4,{id:"method-tap",children:(0,s.jsx)(n.code,{children:"tap()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"tap"}),' method passes a collection to the given lambda expression, allowing you to "tap" into the collection at a specific point and do something with the models while not affecting the collection itself:']}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users {\n    {{"id", 2}, {"name", "Kate"}},\n    {{"id", 3}, {"name", "John"}},\n    {{"id", 1}, {"name", "Jack"}},\n};\n\nusers.sort()\n     .tap([](/*const */ModelsCollection<User *> &usersRef)\n{\n    qDebug() << "IDs after sorting:"\n             << usersRef.template modelKeys<quint64>();\n})\n    .value<quint64>("id");\n\n// 1\n'})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"tap"})," method returns an lvalue ",(0,s.jsx)(n.strong,{children:"reference"})," to the currently processed collection."]}),(0,s.jsxs)(n.p,{children:["It can be also called on ",(0,s.jsx)(n.code,{children:"ModelsCollection"})," rvalues, it returns an rvalue reference in this case."]}),(0,s.jsx)(n.h4,{id:"method-tobase",children:(0,s.jsx)(n.code,{children:"toBase()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"toBase"})," method returns a copy of the underlying vector represented by the collection:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"QList<User> = users.toBase();\n"})}),(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"#method-tobase",children:(0,s.jsx)(n.code,{children:"toBase"})})," is an alias to the ",(0,s.jsx)(n.code,{children:"all"})," method."]})}),(0,s.jsx)(n.h4,{id:"method-tojson",children:(0,s.jsx)(n.code,{children:"toJson()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"toJson"})," method converts the collection of models with all nested relations into a JSON serialized ",(0,s.jsx)(n.a,{href:"https://doc.qt.io/qt/qbytearray.html",children:(0,s.jsx)(n.code,{children:"QByteArray"})}),"."]}),(0,s.jsxs)(n.p,{children:["It returns an empty array for empty ",(0,s.jsx)(n.code,{children:"many"})," type relations and ",(0,s.jsx)(n.code,{children:"null"})," for empty ",(0,s.jsx)(n.code,{children:"one"})," type relations."]}),(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"toJson"})," method accepts the ",(0,s.jsx)(n.a,{href:"https://doc.qt.io/qt/qjsondocument.html#JsonFormat-enum",children:(0,s.jsx)(n.code,{children:"QJsonDocument::JsonFormat"})}),", possible values are ",(0,s.jsx)(n.code,{children:"QJsonDocument::Indented"})," or ",(0,s.jsx)(n.code,{children:"QJsonDocument::Compact"}),"."]})}),(0,s.jsx)(n.h4,{id:"method-tojsonarray",children:(0,s.jsx)(n.code,{children:"toJsonArray()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"toJsonArray"})," method converts the collection of models with all nested relations into a ",(0,s.jsx)(n.a,{href:"https://doc.qt.io/qt/qjsonarray.html",children:(0,s.jsx)(n.code,{children:"QJsonArray"})}),"."]}),(0,s.jsx)(n.h4,{id:"method-tojsondocument",children:(0,s.jsx)(n.code,{children:"toJsonDocument()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"toJsonDocument"})," method converts the collection of models with all nested relations into a ",(0,s.jsx)(n.a,{href:"https://doc.qt.io/qt/qjsondocument.html",children:(0,s.jsx)(n.code,{children:"QJsonDocument"})}),"."]}),(0,s.jsx)(n.h4,{id:"method-tomap",children:(0,s.jsx)(n.code,{children:"toMap()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"toMap"}),"  method converts the collection of models with all nested relations into an attributes map ",(0,s.jsx)(n.code,{children:"QList<QVariantMap>"}),"."]}),(0,s.jsxs)(n.p,{children:["It returns an empty ",(0,s.jsx)(n.code,{children:"QVariantList"})," for empty ",(0,s.jsx)(n.code,{children:"many"})," type relations and a null ",(0,s.jsx)("abbr",{title:"QVariant::fromValue(nullptr)",children:(0,s.jsx)(n.code,{children:"QVariant"})})," for empty ",(0,s.jsx)(n.code,{children:"one"})," type relations."]}),(0,s.jsx)(n.h4,{id:"method-tomapvariantlist",children:(0,s.jsx)(n.code,{children:"toMapVariantList()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"toMapVariantList"})," method converts the collection of models with all nested relations into an attributes map, but it returns the  ",(0,s.jsx)("abbr",{title:"QList<QVariant>",children:(0,s.jsx)(n.code,{children:"QVariantList"})})," instead of the ",(0,s.jsx)(n.code,{children:"QList<QVariantMap>"}),"."]}),(0,s.jsxs)(n.p,{children:["It returns an empty ",(0,s.jsx)(n.code,{children:"QVariantList"})," for empty ",(0,s.jsx)(n.code,{children:"many"})," type relations and a null ",(0,s.jsx)("abbr",{title:"QVariant::fromValue(nullptr)",children:(0,s.jsx)(n.code,{children:"QVariant"})})," for empty ",(0,s.jsx)(n.code,{children:"one"})," type relations."]}),(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"toMapVariantList"})," method is internally needed by the ",(0,s.jsx)(n.code,{children:"toJson"})," related methods."]})}),(0,s.jsx)(n.h4,{id:"method-toquery",children:(0,s.jsx)(n.code,{children:"toQuery()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"toQuery"})," method returns the ",(0,s.jsx)(n.code,{children:"TinyBuilder"})," instance containing a ",(0,s.jsx)(n.code,{children:"whereIn"})," constraint with the collection of models' primary keys:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'using Models::User;\n\nModelsCollection<User> users = User::whereEq("status", "VIP")->get();\n\nusers.toQuery()->update({\n    {"status", "Administrator"},\n});\n'})}),(0,s.jsx)(n.h4,{id:"method-tolist",children:(0,s.jsx)(n.code,{children:"toList()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"toList"})," method converts the collection of models with all nested relations into an attributes vector ",(0,s.jsx)(n.code,{children:"QList<QList<AttributeItem>>"}),"."]}),(0,s.jsxs)(n.p,{children:["It returns an empty ",(0,s.jsx)(n.code,{children:"QVariantList"})," for empty ",(0,s.jsx)(n.code,{children:"many"})," type relations and a null ",(0,s.jsx)("abbr",{title:"QVariant::fromValue(nullptr)",children:(0,s.jsx)(n.code,{children:"QVariant"})})," for empty ",(0,s.jsx)(n.code,{children:"one"})," type relations."]}),(0,s.jsx)(n.h4,{id:"method-tolistvariantlist",children:(0,s.jsx)(n.code,{children:"toListVariantList()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"toListVariantList"})," method converts the collection of models with all nested relations into an attributes vector, but it returns the ",(0,s.jsx)("abbr",{title:"QList<QVariant>",children:(0,s.jsx)(n.code,{children:"QVariantList"})})," instead of the ",(0,s.jsx)(n.code,{children:"QList<QList<AttributeItem>>"}),"."]}),(0,s.jsxs)(n.p,{children:["It returns an empty ",(0,s.jsx)(n.code,{children:"QVariantList"})," for empty ",(0,s.jsx)(n.code,{children:"many"})," type relations and a null ",(0,s.jsx)("abbr",{title:"QVariant::fromValue(nullptr)",children:(0,s.jsx)(n.code,{children:"QVariant"})})," for empty ",(0,s.jsx)(n.code,{children:"one"})," type relations."]}),(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"toListVariantList"})," method is internally needed by the ",(0,s.jsx)(n.code,{children:"toJson"})," related methods."]})}),(0,s.jsx)(n.h4,{id:"method-unique",children:(0,s.jsx)(n.code,{children:"unique()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"unique"})," method returns all of the unique models in the ",(0,s.jsx)(n.strong,{children:"sorted"})," collection. Any models with the same primary key as another model in the collection are removed:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users {\n    {{"id", 2}, {"name", "Kate"}},\n    {{"id", 1}, {"name", "Jack"}},\n    {{"id", 3}, {"name", "John"}},\n    {{"id", 1}, {"name", "Jack"}},\n};\n\nauto unique = users.unique();\n\n/*\n    {\n        {{"id", 1}, {"name", "Jack"}},\n        {{"id", 2}, {"name", "Kate"}},\n        {{"id", 3}, {"name", "John"}},\n    }\n*/\n'})}),(0,s.jsxs)(n.p,{children:["It sorts the collection internally because the ",(0,s.jsx)(n.a,{href:"https://en.cppreference.com/w/cpp/algorithm/ranges/unique",children:(0,s.jsx)(n.code,{children:"ranges::unique"})})," can correctly operate only on the sorted container. You can disable it by passing ",(0,s.jsx)(n.code,{children:"false"})," using the first ",(0,s.jsx)(n.code,{children:"sort"})," parameter:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'auto unique = users.sort().unique(false);\n\n/*\n    {\n        {{"id", 1}, {"name", "Jack"}},\n        {{"id", 2}, {"name", "Kate"}},\n        {{"id", 3}, {"name", "John"}},\n    }\n*/\n'})}),(0,s.jsx)(n.h4,{id:"method-uniqueby",children:(0,s.jsx)(n.code,{children:"uniqueBy()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"uniqueBy"})," method returns all of the unique models in the ",(0,s.jsx)(n.strong,{children:"sorted"})," collection by the given column. Any models with the same column value as another model in the collection are removed. It needs the template argument, so it can cast the attribute value before comparing:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users {\n    {{"name", "Kate"}},\n    {{"name", "Jack"}},\n    {{"name", "John"}},\n    {{"name", "Jack"}},\n};\n\nauto unique = users.uniqueBy<QString>("name");\n\n/*\n    {\n        {{"name", "Jack"}},\n        {{"name", "John"}},\n        {{"name", "Kate"}},\n    }\n*/\n'})}),(0,s.jsxs)(n.p,{children:["It sorts the collection internally because the ",(0,s.jsx)(n.a,{href:"https://en.cppreference.com/w/cpp/algorithm/ranges/unique",children:(0,s.jsx)(n.code,{children:"ranges::unique"})})," can correctly operate only on the sorted container. You can disable it by passing ",(0,s.jsx)(n.code,{children:"false"})," using the second ",(0,s.jsx)(n.code,{children:"sort"})," parameter:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'auto unique = users.sortBy<QString>("name")\n                   .uniqueBy<QString>("name", false);\n\n/*\n    {\n        {{"name", "Jack"}},\n        {{"name", "John"}},\n        {{"name", "Kate"}},\n    }\n*/\n'})}),(0,s.jsx)(n.h4,{id:"method-uniquerelaxed",children:(0,s.jsx)(n.code,{children:"uniqueRelaxed()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"uniqueRelaxed"})," method returns all of the unique models in the collection, it doesn't need a sorted collection. Any models with the same primary key as another model in the collection are removed:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users {\n    {{"id", 2}, {"name", "Kate"}},\n    {{"id", 1}, {"name", "Jack"}},\n    {{"id", 3}, {"name", "John"}},\n    {{"id", 1}, {"name", "Jack"}},\n};\n\nauto unique = users.uniqueRelaxed();\n\n/*\n    {\n        {{"id", 2}, {"name", "Kate"}},\n        {{"id", 1}, {"name", "Jack"}},\n        {{"id", 3}, {"name", "John"}},\n    }\n*/\n'})}),(0,s.jsx)(n.h4,{id:"method-uniquerelaxedby",children:(0,s.jsx)(n.code,{children:"uniqueRelaxedBy()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"uniqueRelaxedBy"})," method returns all of the unique models in the collection by the given column, it doesn't need a sorted collection, but it needs the template argument, so it can cast the attribute value before comparing:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users {\n    {{"name", "Kate"}},\n    {{"name", "Jack"}},\n    {{"name", "John"}},\n    {{"name", "Jack"}},\n};\n\nauto unique = users.uniqueRelaxedBy<QString>("name");\n\n/*\n    {\n        {{"name", "Kate"}},\n        {{"name", "Jack"}},\n        {{"name", "John"}},\n    }\n*/\n'})}),(0,s.jsx)(n.h4,{id:"method-value",children:(0,s.jsx)(n.code,{children:"value()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"value"})," method retrieves a given value from the first model of the collection:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users {\n    {{"name", "John"}, {"votes", 200}},\n    {{"name", "Jack"}, {"votes", 400}},\n};\n\nQVariant votes = users.value("votes");\n\n// 200\n'})}),(0,s.jsxs)(n.p,{children:["Alternatively, you can cast an obtained ",(0,s.jsx)(n.code,{children:"QVariant"})," value to the given type by the second ",(0,s.jsx)(n.code,{children:"value"})," overload:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'quint64 votes = users.value<quint64>("votes");\n'})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"value"})," method also accepts the second ",(0,s.jsx)(n.code,{children:"defaultValue"})," argument, which will be returned if a collection is empty, the first model is ",(0,s.jsx)(n.code,{children:"nullptr"}),", or a model doesn't contain the given column:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'auto votes = ModelsCollection<User>().value("votes", 0);\n\n// 0\n'})}),(0,s.jsxs)(n.p,{children:["You can also call all ",(0,s.jsx)(n.code,{children:"value"})," overloads provided by the ",(0,s.jsx)(n.a,{href:"https://doc.qt.io/qt/qlist.html#value",children:(0,s.jsx)(n.code,{children:"QList::value"})}),"."]}),(0,s.jsx)(n.h4,{id:"method-where",children:(0,s.jsx)(n.code,{children:"where()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"where"})," method filters the collection by a given column / value pair:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<Product> products {\n    {{"product", "Desk"},     {"price", 200}},\n    {{"product", "Chair"},    {"price", 100}},\n    {{"product", "Bookcase"}, {"price", 150}},\n    {{"product", "Door"},     {"price", 100}},\n};\n\nauto filtered = products.where("price", "=", 100);\n\n/*\n    {\n        {{"product", "Chair"}, {"price", 100}},\n        {{"product", "Door"},  {"price", 100}},\n    }\n*/\n'})}),(0,s.jsxs)(n.p,{children:["For convenience, if you want to verify that a column is ",(0,s.jsx)(n.code,{children:"="})," to a given value, you may call ",(0,s.jsx)(n.code,{children:"whereEq"})," method. Similar ",(0,s.jsx)(n.code,{children:"XxxEq"})," methods are also defined for other commands:"]}),(0,s.jsx)(n.p,{children:'auto filtered = products.whereEq("price", 100);'}),(0,s.jsxs)(n.p,{children:["Optionally, you may pass a comparison operator as the second argument.",(0,s.jsx)("br",{}),"Supported operators are ",(0,s.jsx)(n.code,{children:"="}),", ",(0,s.jsx)(n.code,{children:"!="}),", ",(0,s.jsx)(n.code,{children:"<"}),", ",(0,s.jsx)(n.code,{children:">"}),", ",(0,s.jsx)(n.code,{children:"<="}),", and ",(0,s.jsx)(n.code,{children:">="}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<Product> products {\n    {{"product", "Desk"},     {"price", 200}},\n    {{"product", "Chair"},    {"price", 100}},\n    {{"product", "Bookcase"}, {"price", 150}},\n    {{"product", "Door"},     {"price", 250}},\n};\n\nauto filtered = products.where("price", ">", 150);\n\n/*\n    {\n        {{"product", "Desk"}, {"price", 200}},\n        {{"product", "Door"}, {"price", 250}},\n    }\n*/\n'})}),(0,s.jsx)(n.h4,{id:"method-wherebetween",children:(0,s.jsx)(n.code,{children:"whereBetween()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"whereBetween"})," method filters the collection by determining if a specified models' attribute value is within a given range:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<Product> products {\n    {{"product", "Desk"},     {"price", 200}},\n    {{"product", "Chair"},    {"price",  80}},\n    {{"product", "Bookcase"}, {"price", 150}},\n    {{"product", "Pencil"},   {"price",  30}},\n    {{"product", "Door"},     {"price", 100}},\n};\n\nauto filtered = products.whereBetween<quint64>("price", {100, 200});\n\n/*\n    {\n        {{"product", "Desk"},     {"price", 200}},\n        {{"product", "Bookcase"}, {"price", 150}},\n        {{"product", "Door"},     {"price", 100}},\n    }\n*/\n'})}),(0,s.jsx)(n.h4,{id:"method-wherein",children:(0,s.jsx)(n.code,{children:"whereIn()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"whereIn"})," method filters models from the collection that have a specified attribute value that is contained within the given unordered set:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<Product> products {\n    {{"product", "Desk"},     {"price", 200}},\n    {{"product", "Chair"},    {"price", 100}},\n    {{"product", "Bookcase"}, {"price", 150}},\n    {{"product", "Door"},     {"price", 250}},\n};\n\nauto filtered = products.whereIn<quint64>("price", {100, 200});\n\n/*\n    {\n        {{"product", "Desk"},  {"price", 200}},\n        {{"product", "Chair"}, {"price", 100}},\n    }\n*/\n'})}),(0,s.jsxs)(n.p,{children:["An empty collection is returned if the ",(0,s.jsx)(n.code,{children:"values"})," argument is empty ",(0,s.jsx)(n.code,{children:'whereIn("price", {})'}),"."]}),(0,s.jsx)(n.p,{children:"The order of models in the collection is preserved."}),(0,s.jsx)(n.h4,{id:"method-wherenotbetween",children:(0,s.jsx)(n.code,{children:"whereNotBetween()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"whereNotBetween"})," method filters the collection by determining if a specified models' attribute value is outside of a given range:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<Product> products {\n    {{"product", "Desk"},     {"price", 200}},\n    {{"product", "Chair"},    {"price",  80}},\n    {{"product", "Bookcase"}, {"price", 150}},\n    {{"product", "Pencil"},   {"price",  30}},\n    {{"product", "Door"},     {"price", 100}},\n};\n\nauto filtered = products.whereNotBetween<quint64>("price", {100, 200});\n\n/*\n    {\n        {{"product", "Chair"},  {"price", 80}},\n        {{"product", "Pencil"}, {"price", 30}},\n    }\n*/\n'})}),(0,s.jsx)(n.h4,{id:"method-wherenotin",children:(0,s.jsx)(n.code,{children:"whereNotIn()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"whereNotIn"})," method removes models from the collection that have a specified attribute value that is contained within the given unordered set:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<Product> products {\n    {{"product", "Desk"},     {"price", 200}},\n    {{"product", "Chair"},    {"price", 100}},\n    {{"product", "Bookcase"}, {"price", 150}},\n    {{"product", "Door"},     {"price", 250}},\n};\n\nauto filtered = products.whereNotIn<quint64>("price", {100, 200});\n\n/*\n    {\n        {{"product", "Bookcase"},  {"price", 150}},\n        {{"product", "Door"},      {"price", 250}},\n    }\n*/\n'})}),(0,s.jsxs)(n.p,{children:["All of the models are returned if the ",(0,s.jsx)(n.code,{children:"values"})," argument is empty ",(0,s.jsx)(n.code,{children:'whereNotIn("price", {})'}),"."]}),(0,s.jsx)(n.p,{children:"The order of models in the collection is preserved."}),(0,s.jsx)(n.h4,{id:"method-wherenotnull",children:(0,s.jsx)(n.code,{children:"whereNotNull()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"whereNotNull"})," method returns models from the collection where the given column is not ",(0,s.jsx)(n.code,{children:"null"})," QVariant:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <orm/utils/nullvariant.hpp>\n\nusing NullVariant = Orm::Utils::NullVariant;\n\nModelsCollection<User> users {\n    {{"name", "John"}},\n    {{"name", NullVariant::QString()}},\n    {{"name", "Jack"}},\n};\n\nauto filtered = users.whereNotNull("name");\n\n/*\n    {\n        {{"name", "John"}},\n        {{"name", "Jack"}},\n    }\n*/\n'})}),(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"NullVariant"})," class returns the correct ",(0,s.jsx)(n.code,{children:"null"})," QVariant for both Qt 5 ",(0,s.jsx)(n.code,{children:"QVariant(QVariant::String)"})," and also Qt 6 ",(0,s.jsx)(n.code,{children:"QVariant(QMetaType(QMetaType::QString))"}),". The reason why this class still exists even after Qt v5.15 support was removed is the performance boost."]})}),(0,s.jsx)(n.h4,{id:"method-wherenull",children:(0,s.jsx)(n.code,{children:"whereNull()"})}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"whereNull"})," method returns models from the collection where the given column is ",(0,s.jsx)(n.code,{children:"null"})," QVariant:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <orm/utils/nullvariant.hpp>\n\nusing NullVariant = Orm::Utils::NullVariant;\n\nModelsCollection<User> users {\n    {{"name", "John"}},\n    {{"name", NullVariant::QString()}},\n    {{"name", "Jack"}},\n};\n\nauto filtered = users.whereNotNull("name");\n\n// {{"name", NullVariant::QString()}}\n'})}),(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"NullVariant"})," class returns the correct ",(0,s.jsx)(n.code,{children:"null"})," QVariant for both Qt 5 ",(0,s.jsx)(n.code,{children:"QVariant(QVariant::String)"})," and also Qt 6 ",(0,s.jsx)(n.code,{children:"QVariant(QMetaType(QMetaType::QString))"}),". The reason why this class still exists even after Qt v5.15 support was removed is the performance boost."]})})]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var s=t(6540);const o={},r=s.createContext(o);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);