"use strict";(self.webpackChunktinyorm_org=self.webpackChunktinyorm_org||[]).push([[535],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(n),u=i,h=m["".concat(s,".").concat(u)]||m[u]||p[u]||a;return n?o.createElement(h,r(r({ref:t},c),{},{components:n})):o.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,r[1]=l;for(var d=2;d<a;d++)r[d]=n[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1412:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var o=n(7462),i=(n(7294),n(3905));const a={sidebar_position:4,sidebar_label:"Serialization",description:"TinyORM models serialization allows you to serialize models and collection of models including all nested relations to JSON. It also supports converting to vectors or maps and allows controlling a custom date format during serialization.",keywords:["c++ orm","orm","serialization","json","toJson","serializing models","serializing relations","serializing collections","converting","toVector","toMap"]},r="TinyORM: Serialization",l={unversionedId:"tinyorm/serialization",id:"tinyorm/serialization",title:"TinyORM: Serialization",description:"TinyORM models serialization allows you to serialize models and collection of models including all nested relations to JSON. It also supports converting to vectors or maps and allows controlling a custom date format during serialization.",source:"@site/docs/tinyorm/serialization.mdx",sourceDirName:"tinyorm",slug:"/tinyorm/serialization",permalink:"/tinyorm/serialization",draft:!1,editUrl:"https://github.com/silverqx/TinyORM-github.io/edit/main/docs/tinyorm/serialization.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_label:"Serialization",description:"TinyORM models serialization allows you to serialize models and collection of models including all nested relations to JSON. It also supports converting to vectors or maps and allows controlling a custom date format during serialization.",keywords:["c++ orm","orm","serialization","json","toJson","serializing models","serializing relations","serializing collections","converting","toVector","toMap"]},sidebar:"tinyormSidebar",previous:{title:"Casts",permalink:"/tinyorm/casts"},next:{title:"TinyORM",permalink:"/building/tinyorm"}},s={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Serializing Models &amp; Collections",id:"serializing-models-and-collections",level:2},{value:"Serializing To Vectors &amp; Maps",id:"serializing-to-vectors-and-maps",level:3},{value:"Serializing To JSON",id:"serializing-to-json",level:3},{value:"Relationships",id:"relationships",level:4},{value:"Date Serialization",id:"date-serialization",level:2},{value:"Customizing The Default Date Format",id:"customizing-the-default-date-format",level:4},{value:"Customizing The Date Format Per Attribute",id:"customizing-the-date-format-per-attribute",level:4}],c={toc:d},m="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tinyorm-serialization"},"TinyORM: Serialization"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#serializing-models-and-collections"},"Serializing Models & Collections"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#serializing-to-vectors-and-maps"},"Serializing To Vectors & Maps")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#serializing-to-json"},"Serializing To JSON")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#date-serialization"},"Date Serialization"))),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"When building APIs using TinyORM, you will often need to convert your models and relationships to vectors, maps, or JSON. TinyORM includes convenient methods for making these conversions, as well as controlling which attributes are included in the serialized representation of your models."),(0,i.kt)("h2",{id:"serializing-models-and-collections"},"Serializing Models & Collections"),(0,i.kt)("h3",{id:"serializing-to-vectors-and-maps"},"Serializing To Vectors & Maps"),(0,i.kt)("p",null,"To convert a model and its loaded ",(0,i.kt)("a",{parentName:"p",href:"/tinyorm/relationships"},"relationships")," to a vector, you should use the ",(0,i.kt)("inlineCode",{parentName:"p"},"toVector")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"toMap")," methods. This methods are recursive, so all attributes and all relations (including the relations of relations) will be converted to vectors:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'using Models::User;\n\nauto user = User::with("roles")->first();\n\nreturn user->toVector();\n\nreturn user->toMap();\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"attributesToVector")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"attributesToMap")," methods may be used to convert a model's attributes to a vector or map but not its relationships:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"auto user = User::first();\n\nreturn user->attributesToVector();\n\nreturn user->attributesToMap();\n")),(0,i.kt)("p",null,"You may also convert entire ",(0,i.kt)("a",{parentName:"p",href:"/tinyorm/collections"},"collections")," of models to vectors or maps by calling the ",(0,i.kt)("a",{parentName:"p",href:"/tinyorm/collections#method-tovector"},(0,i.kt)("inlineCode",{parentName:"a"},"toVector"))," or ",(0,i.kt)("a",{parentName:"p",href:"/tinyorm/collections#method-tomap"},(0,i.kt)("inlineCode",{parentName:"a"},"toMap"))," methods on the collection instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'ModelsCollection<User> users = User::with("roles")->all();\n\nreturn users.toVector();\n\nreturn users.toMap();\n')),(0,i.kt)("h3",{id:"serializing-to-json"},"Serializing To JSON"),(0,i.kt)("p",null,"To convert a model to JSON, you should use the ",(0,i.kt)("inlineCode",{parentName:"p"},"toJson")," method. Like ",(0,i.kt)("inlineCode",{parentName:"p"},"toVector")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"toMap"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"toJson")," method is recursive, so all attributes and relations will be converted to JSON. You may also specify any JSON encoding options that are supported by ",(0,i.kt)("a",{parentName:"p",href:"https://doc.qt.io/qt-6/qjsondocument.html#toJson"},"QJsonDocument::toJson"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'using Models::User;\n\nauto user = User::with("roles")->find(1);\n\nreturn user->toJson();\n\nreturn user->toJson(QJsonDocument::Indented);\n')),(0,i.kt)("p",null,"You may also convert entire ",(0,i.kt)("a",{parentName:"p",href:"/tinyorm/collections"},"collections")," of models to JSON by calling the ",(0,i.kt)("a",{parentName:"p",href:"/tinyorm/collections#method-tojson"},(0,i.kt)("inlineCode",{parentName:"a"},"toJson"))," method on the collection instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'ModelsCollection<User> users = User::with("roles")->findMany({1, 2});\n\nreturn users.toJson();\n')),(0,i.kt)("p",null,"You can also convert models to the ",(0,i.kt)("a",{parentName:"p",href:"https://doc.qt.io/qt-6/qjsonobject.html"},(0,i.kt)("inlineCode",{parentName:"a"},"QJsonObject"))," and ",(0,i.kt)("a",{parentName:"p",href:"https://doc.qt.io/qt-6/qjsondocument.html"},(0,i.kt)("inlineCode",{parentName:"a"},"QJsonDocument"))," using the ",(0,i.kt)("inlineCode",{parentName:"p"},"toJsonArray")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"toJsonDocument")," methods and collection of models to ",(0,i.kt)("a",{parentName:"p",href:"https://doc.qt.io/qt-6/qjsonarray.html"},(0,i.kt)("inlineCode",{parentName:"a"},"QJsonArray"))," and ",(0,i.kt)("a",{parentName:"p",href:"https://doc.qt.io/qt-6/qjsondocument.html"},(0,i.kt)("inlineCode",{parentName:"a"},"QJsonDocument"))," using the ",(0,i.kt)("a",{parentName:"p",href:"/tinyorm/collections#method-tojsonarray"},(0,i.kt)("inlineCode",{parentName:"a"},"toJsonArray"))," and ",(0,i.kt)("a",{parentName:"p",href:"/tinyorm/collections#method-tojsondocument"},(0,i.kt)("inlineCode",{parentName:"a"},"toJsonDocument"))," methods."),(0,i.kt)("h4",{id:"relationships"},"Relationships"),(0,i.kt)("p",null,'When a TinyORM model is converted to JSON, its loaded relationships will automatically be included as attributes on the JSON object. Also, though TinyORM relationship methods are defined using "camelCase" method names, a relationship\'s JSON attributes will be "snake_case".'),(0,i.kt)("p",null,"This behavior is affected and can be overridden by the ",(0,i.kt)("inlineCode",{parentName:"p"},"u_snakeAttributes")," static data member:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#include <orm/tiny/model.hpp>\n\nusing Orm::Tiny::Model;\n\nclass Album final : public Model<Album, AlbumImage>\n{\n    friend Model;\n    using Model::Model;\n\n    /*! Indicates whether attributes are snake_cased during serialization. */\n    T_THREAD_LOCAL\n    inline static const bool u_snakeAttributes = false;\n};\n")),(0,i.kt)("h2",{id:"date-serialization"},"Date Serialization"),(0,i.kt)("h4",{id:"customizing-the-default-date-format"},"Customizing The Default Date Format"),(0,i.kt)("p",null,"You may customize the default serialization format by overriding the ",(0,i.kt)("inlineCode",{parentName:"p"},"serializeDate")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"serializeDateTime")," methods. These methods do not affect how your dates are formatted for storage in the database:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'/*! Prepare a date for vector, map, or JSON serialization. */\nQString serializeDate(const QDate date)\n{\n    return date.toString("yyyy-MM-dd");\n}\n\n/*! Prepare a datetime for vector, map, or JSON serialization. */\nQString serializeDateTime(const QDateTime &datetime)\n{\n    return datetime.toUTC().toString("yyyy-MM-ddTHH:mm:ssZ");\n}\n')),(0,i.kt)("h4",{id:"customizing-the-date-format-per-attribute"},"Customizing The Date Format Per Attribute"),(0,i.kt)("p",null,"You may customize the serialization format of individual TinyORM date attributes by specifying the date format in the model's ",(0,i.kt)("a",{parentName:"p",href:"/tinyorm/casts#attribute-casting"},"cast declarations"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'/*! The attributes that should be cast. */\ninline static std::unordered_map<QString, CastItem> u_casts {\n    {"birthday",  {CastType::CustomQDate, "yyyy-MM-dd"}},\n    {"joined_at", {CastType::CustomQDateTime, "yyyy-MM-dd HH:00"}},\n};\n')))}p.isMDXComponent=!0}}]);