"use strict";(self.webpackChunktinyorm_org=self.webpackChunktinyorm_org||[]).push([[995],{4583:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var r=s(4848),t=s(8453),a=s(8774);const i={sidebar_position:1,sidebar_label:"Query Builder",description:"TinyORM's database query builder provides a convenient, fluent interface to creating and running database queries. It can be used to perform most database operations in your application. The query builder uses QSqlQuery parameter binding to protect your application against SQL injection attacks. There is no need to clean or sanitize strings passed to the query builder as query bindings.",keywords:["c++ orm","sql","c++ sql","c++ query builder","database","query builder","tinyorm"]},o="Database: Query Builder",d={id:"database/query-builder",title:"Database: Query Builder",description:"TinyORM's database query builder provides a convenient, fluent interface to creating and running database queries. It can be used to perform most database operations in your application. The query builder uses QSqlQuery parameter binding to protect your application against SQL injection attacks. There is no need to clean or sanitize strings passed to the query builder as query bindings.",source:"@site/docs/database/query-builder.mdx",sourceDirName:"database",slug:"/database/query-builder",permalink:"/database/query-builder",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Query Builder",description:"TinyORM's database query builder provides a convenient, fluent interface to creating and running database queries. It can be used to perform most database operations in your application. The query builder uses QSqlQuery parameter binding to protect your application against SQL injection attacks. There is no need to clean or sanitize strings passed to the query builder as query bindings.",keywords:["c++ orm","sql","c++ sql","c++ query builder","database","query builder","tinyorm"]},sidebar:"tinyormSidebar",previous:{title:"Getting Started",permalink:"/database/getting-started"},next:{title:"Migrations",permalink:"/database/migrations"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Running Database Queries",id:"running-database-queries",level:2},{value:"Retrieving All Rows From A Table",id:"retrieving-all-rows-from-a-table",level:4},{value:"Retrieving A Single Row / Column From A Table",id:"retrieving-a-single-row--column-from-a-table",level:4},{value:"Retrieving A List Of Column Values",id:"retrieving-a-list-of-column-values",level:4},{value:"Concatenate column values",id:"concatenate-column-values",level:4},{value:"Chunking Results",id:"chunking-results",level:3},{value:"Aggregates",id:"aggregates",level:3},{value:"Determining If Records Exist",id:"determining-if-records-exist",level:4},{value:"Select Statements",id:"select-statements",level:2},{value:"Specifying A Select Clause",id:"specifying-a-select-clause",level:4},{value:"Raw Expressions",id:"raw-expressions",level:2},{value:"Raw Methods",id:"raw-methods",level:3},{value:"<code>selectRaw</code>",id:"selectraw",level:4},{value:"<code>fromRaw</code>",id:"fromraw",level:4},{value:"<code>whereRaw / orWhereRaw</code>",id:"whereraw--orwhereraw",level:4},{value:"<code>groupByRaw</code>",id:"groupbyraw",level:3},{value:"<code>havingRaw / orHavingRaw</code>",id:"havingraw--orhavingraw",level:4},{value:"<code>orderByRaw</code>",id:"orderbyraw",level:4},{value:"Joins",id:"joins",level:2},{value:"Inner Join Clause",id:"inner-join-clause",level:4},{value:"Left Join / Right Join Clause",id:"left-join--right-join-clause",level:4},{value:"Cross Join Clause",id:"cross-join-clause",level:4},{value:"Advanced Join Clauses",id:"advanced-join-clauses",level:4},{value:"Subquery Joins",id:"subquery-joins",level:4},{value:"Basic Where Clauses",id:"basic-where-clauses",level:2},{value:"Where Clauses",id:"where-clauses",level:3},{value:"Or Where Clauses",id:"or-where-clauses",level:3},{value:"Condition Operator Overriding",id:"condition-operator-overriding",level:3},{value:"Where Not Clauses",id:"where-not-clauses",level:3},{value:"Additional Where Clauses",id:"additional-where-clauses",level:3},{value:"Logical Grouping",id:"logical-grouping",level:3},{value:"Advanced Where Clauses",id:"advanced-where-clauses",level:2},{value:"Where Exists Clauses",id:"where-exists-clauses",level:3},{value:"Subquery Where Clauses",id:"subquery-where-clauses",level:3},{value:"Ordering, Grouping, Limit &amp; Offset",id:"ordering-grouping-limit-and-offset",level:2},{value:"Ordering",id:"ordering",level:3},{value:"The <code>orderBy</code> Method",id:"the-orderby-method",level:4},{value:"The <code>latest</code> &amp; <code>oldest</code> Methods",id:"the-latest--oldest-methods",level:4},{value:"Random Ordering",id:"random-ordering",level:4},{value:"Removing Existing Orderings",id:"removing-existing-orderings",level:4},{value:"Grouping",id:"grouping",level:3},{value:"The <code>groupBy</code> &amp; <code>having</code> Methods",id:"the-groupby--having-methods",level:4},{value:"Limit &amp; Offset",id:"limit-and-offset",level:3},{value:"The <code>skip</code> &amp; <code>take</code> Methods",id:"the-skip--take-methods",level:4},{value:"Insert Statements",id:"insert-statements",level:2},{value:"Auto-Incrementing IDs",id:"auto-incrementing-ids",level:4},{value:"Upserts",id:"upserts",level:3},{value:"Update Statements",id:"update-statements",level:2},{value:"Update Or Insert",id:"update-or-insert",level:4},{value:"Increment &amp; Decrement",id:"increment-and-decrement",level:3},{value:"Delete Statements",id:"delete-statements",level:2},{value:"Truncate Statement",id:"truncate-statement",level:3},{value:"Table Truncation &amp; PostgreSQL",id:"table-truncation--postgresql",level:4},{value:"Pessimistic Locking",id:"pessimistic-locking",level:2},{value:"Debugging",id:"debugging",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",del:"del",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"database-query-builder",children:"Database: Query Builder"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#running-database-queries",children:"Running Database Queries"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#chunking-results",children:"Chunking Results"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#aggregates",children:"Aggregates"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#select-statements",children:"Select Statements"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#raw-expressions",children:"Raw Expressions"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#joins",children:"Joins"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#basic-where-clauses",children:"Basic Where Clauses"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#where-clauses",children:"Where Clauses"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#or-where-clauses",children:"Or Where Clauses"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#where-not-clauses",children:"Where Not Clauses"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#additional-where-clauses",children:"Additional Where Clauses"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#condition-operator-overriding",children:"Condition Operator Overriding"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#logical-grouping",children:"Logical Grouping"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#advanced-where-clauses",children:"Advanced Where Clauses"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#where-exists-clauses",children:"Where Exists Clauses"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#subquery-where-clauses",children:"Subquery Where Clauses"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#ordering-grouping-limit-and-offset",children:"Ordering, Grouping, Limit & Offset"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#ordering",children:"Ordering"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#grouping",children:"Grouping"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#limit-and-offset",children:"Limit & Offset"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#insert-statements",children:"Insert Statements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#upserts",children:"Upserts"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#update-statements",children:"Update Statements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#increment-and-decrement",children:"Increment & Decrement"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#delete-statements",children:"Delete Statements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#truncate-statement",children:"Truncate Statement"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#pessimistic-locking",children:"Pessimistic Locking"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#debugging",children:"Debugging"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)("div",{className:"api-stability alert alert--success",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(a.A,{to:"/stability#stability-indexes",children:(0,r.jsx)(n.strong,{children:"Stability: 2"})})," - Stable"]})}),"\n",(0,r.jsx)(n.p,{children:"TinyORM's database query builder provides a convenient, fluent interface to creating and running database queries. It can be used to perform most database operations in your application."}),"\n",(0,r.jsxs)(n.p,{children:["The TinyORM query builder uses ",(0,r.jsx)(n.code,{children:"QSqlQuery"})," parameter binding to protect your application against SQL injection attacks. There is no need to clean or sanitize strings passed to the query builder as query bindings."]}),"\n",(0,r.jsx)(n.admonition,{type:"danger",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"QSqlQuery"}),' does not support binding column names. Therefore, you should never allow user input to dictate the column names referenced by your queries, including "order by" columns.']})}),"\n",(0,r.jsx)(n.admonition,{type:"danger",children:(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"QMYSQL"})," Qt driver contains a bug, if your table contains a ",(0,r.jsx)(n.code,{children:"json"})," column type, then you must explicitly name columns other than ",(0,r.jsx)(n.code,{children:"json"})," columns instead of the ",(0,r.jsx)(n.code,{children:"*"})," shorthand, otherwise, you will get an empty result, or all column values will be invalid QVariant-s, or it may even return half of the columns. The ",(0,r.jsx)(n.code,{children:"QPSQL"})," driver returns correct results and doesn't have problem with ",(0,r.jsx)(n.code,{children:"json"})," columns. It was fixed in the Qt ",(0,r.jsx)(n.del,{children:"5.15.12"}),", 6.2.7, 6.5.0 ",(0,r.jsx)(n.a,{href:"https://bugreports.qt.io/browse/QTBUG-101680",children:"QTBUG-101680"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"running-database-queries",children:"Running Database Queries"}),"\n",(0,r.jsx)(n.h4,{id:"retrieving-all-rows-from-a-table",children:"Retrieving All Rows From A Table"}),"\n",(0,r.jsxs)(n.p,{children:["You may use the ",(0,r.jsx)(n.code,{children:"table"})," method provided by the ",(0,r.jsx)(n.code,{children:"DB"})," facade to begin a query. The ",(0,r.jsx)(n.code,{children:"table"})," method returns a fluent query builder instance for the given table, allowing you to chain more constraints onto the query and then finally retrieve the results of the query using the ",(0,r.jsx)(n.code,{children:"get"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\n// Log a list of all of the application\'s users\nauto query = DB::table("users")->get();\n\nwhile (query.next())\n    qDebug() << "id :" << query.value("id").toULongLong() << ";"\n             << "name :" << query.value("name").toString();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"get"})," method returns a ",(0,r.jsx)(n.code,{children:"QSqlQuery"})," containing the results of the query where each result can be accessed by ",(0,r.jsx)(n.code,{children:"QSqlQuery::next"})," method, look into the ",(0,r.jsx)(n.code,{children:"QSqlQuery"}),' documentation how to obtain results from the "query". You may access each column\'s value by ',(0,r.jsx)(n.code,{children:"QSqlQuery::value"})," method. The first ",(0,r.jsx)(n.code,{children:"bool"})," return value is the value returned from ",(0,r.jsx)(n.code,{children:"QSqlQuery::exec"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include <QDebug>\n\n#include <orm/db.hpp>\n\nauto users = DB::table("users")->get();\n\nwhile(users.next())\n    qDebug() << users.value("name").toString();\n'})}),"\n",(0,r.jsx)(n.h4,{id:"retrieving-a-single-row--column-from-a-table",children:"Retrieving A Single Row / Column From A Table"}),"\n",(0,r.jsxs)(n.p,{children:["If you just need to retrieve a single row from a database table, you may use the ",(0,r.jsx)(n.code,{children:"QueryBuilder::first"})," method. This method will return a ",(0,r.jsx)(n.code,{children:"QSqlQuery"})," object, on which was internally called ",(0,r.jsx)(n.code,{children:"QSqlQuery::first"})," method. This method retrieves the first record in the result, if available, and positions the query on the retrieved record:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto user = DB::table("users")->whereEq("name", "John").first();\n\nuser.value("email").toString();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If you don't need an entire row, you may extract a single value from a record using the ",(0,r.jsx)(n.code,{children:"value"})," method. This method will return the value of the column directly as ",(0,r.jsx)(n.code,{children:"QVariant"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto email = DB::table("users")->whereEq("name", "John").value("email").toString();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["To retrieve a single row by its ",(0,r.jsx)(n.code,{children:"id"})," column value, use the ",(0,r.jsx)(n.code,{children:"find"})," method. This method retrieves the first record in the result, if available, and positions the query on the retrieved record:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto user = DB::table("users")->find(3);\n\nuser.value("email").toString();\n'})}),"\n",(0,r.jsx)(n.h4,{id:"retrieving-a-list-of-column-values",children:"Retrieving A List Of Column Values"}),"\n",(0,r.jsxs)(n.p,{children:["If you would like to retrieve the ",(0,r.jsx)(n.code,{children:"QList<QVariant>"})," instance containing the values of a single column, you may use the ",(0,r.jsx)(n.code,{children:"pluck"})," method. In this example, we'll retrieve a collection of user titles:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include <QDebug>\n\n#include <orm/db.hpp>\n\nconst auto titles = DB::table("users")->pluck("title");\n\nfor (const auto &title : titles)\n    qDebug() << title.value<QString>();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You may specify the column that the resulting collection should use as its keys by providing a second argument to the ",(0,r.jsx)(n.code,{children:"pluck"})," method, following example returns the ",(0,r.jsx)(n.code,{children:"std::map<QString, QVariant>"}),' of "titles" keyed by "names":']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nauto titles = DB::table("users")->pluck<QString>("title", "name");\n\nfor (auto &&[name, title] : titles)\n    qDebug() << name << ":" << title.value<QString>();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You may also use ",(0,r.jsx)(n.code,{children:'pluck<quint64>("name", "id")'}),", it returns the ",(0,r.jsx)(n.code,{children:"std::map<quint64, QVariant>"}),' of "names" keyed by its "ids".']}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This second ",(0,r.jsx)(n.code,{children:"pluck"})," overload returns ",(0,r.jsx)(n.code,{children:"std::map<T, QVariant>"})," so you have to provide a template argument for the key type."]})}),"\n",(0,r.jsx)(n.h4,{id:"concatenate-column-values",children:"Concatenate column values"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"implode"})," method can be used to join column values. For example, you may use this method to concatenate prices with the ",(0,r.jsx)(n.code,{children:", "})," character as the glue:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("orders")->where("price", ">", 100).implode("price", ", ");\n'})}),"\n",(0,r.jsx)(n.h3,{id:"chunking-results",children:"Chunking Results"}),"\n",(0,r.jsxs)(n.p,{children:["If you need to work with thousands of database records, consider using the ",(0,r.jsx)(n.code,{children:"chunk"})," method provided by the ",(0,r.jsx)(n.code,{children:"DB"})," facade. This method retrieves a small chunk of results at a time and feeds each chunk into a lambda expression for processing. For example, let's retrieve the entire ",(0,r.jsx)(n.code,{children:"users"})," table in chunks of 100 records at a time:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")->orderBy("id").chunk(100, [](QSqlQuery &users, const int page)\n{\n    while (users.next()) {\n        //\n    }\n\n    return true;\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You may stop further chunks from being processed by returning ",(0,r.jsx)(n.code,{children:"false"})," from the closure:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")->orderBy("id").chunk(100, [](QSqlQuery &users, const int page)\n{\n    // Process the records...\n\n    return false;\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If you are updating database records while chunking results, your chunk results could change in unexpected ways. If you plan to update the retrieved records while chunking, it is always best to use the ",(0,r.jsx)(n.code,{children:"chunkById"})," method instead. This method will automatically paginate the results based on the record's primary key:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")\n    ->whereEq("active", false)\n    .orderBy("id")\n    .chunkById(100, [](QSqlQuery &users, const int /*unused*/)\n    {\n        while (users.next())\n            DB::table("users")\n                ->whereEq("id", users.value("id"))\n                .update({{"active", true}});\n\n        return true;\n    });\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["When updating or deleting records inside the chunk lambda expression, any changes to the primary key or foreign keys could affect the chunk query. This could potentially result in records not being included in the chunked results, it can be avoided using the ",(0,r.jsx)(n.code,{children:"chunkById"})," method."]})}),"\n",(0,r.jsx)(n.h3,{id:"aggregates",children:"Aggregates"}),"\n",(0,r.jsxs)(n.p,{children:["The query builder also provides a variety of methods for retrieving aggregate values like ",(0,r.jsx)(n.code,{children:"count"}),", ",(0,r.jsx)(n.code,{children:"max"}),", ",(0,r.jsx)(n.code,{children:"min"}),", ",(0,r.jsx)(n.code,{children:"avg"}),", and ",(0,r.jsx)(n.code,{children:"sum"}),". You may call any of these methods after constructing your query:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nauto users = DB::table("users")->count();\n\nauto price = DB::table("orders")->max("price");\n'})}),"\n",(0,r.jsx)(n.p,{children:"Of course, you may combine these methods with other clauses to fine-tune how your aggregate value is calculated:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto price = DB::table("orders")\n                 ->whereEq("finalized", 1)\n                 .avg("price");\n'})}),"\n",(0,r.jsx)(n.h4,{id:"determining-if-records-exist",children:"Determining If Records Exist"}),"\n",(0,r.jsxs)(n.p,{children:["Instead of using the ",(0,r.jsx)(n.code,{children:"count"})," method to determine if any records exist that match your query's constraints, you may use the ",(0,r.jsx)(n.code,{children:"exists"})," and ",(0,r.jsx)(n.code,{children:"doesntExist"})," methods:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'if (DB::table("orders")->whereEq("finalized", 1).exists()) {\n    // ...\n}\n\nif (DB::table("orders")->whereEq("finalized", 1).doesntExist()) {\n    // ...\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"select-statements",children:"Select Statements"}),"\n",(0,r.jsx)(n.h4,{id:"specifying-a-select-clause",children:"Specifying A Select Clause"}),"\n",(0,r.jsxs)(n.p,{children:["You may not always want to select all columns from a database table. Using the ",(0,r.jsx)(n.code,{children:"select"}),' method, you can specify a custom "select" clause for the query:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nauto users = DB::table("users")\n                 ->select({"name", "email as user_email"})\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"distinct"})," method allows you to force the query to return distinct results:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")->distinct().get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If you already have a query builder instance and you wish to add a column to its existing select clause, you may use the ",(0,r.jsx)(n.code,{children:"addSelect"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto query = DB::table("users")->select("name");\n\nauto users = query.addSelect("age").get();\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["You can also pass subqueries to the ",(0,r.jsx)(n.code,{children:"select"})," and ",(0,r.jsx)(n.code,{children:"addSelect"})," methods. A subquery can be a lambda expression, raw string, or the ",(0,r.jsx)(n.code,{children:"QueryBuilder"})," instance."]})}),"\n",(0,r.jsx)(n.h2,{id:"raw-expressions",children:"Raw Expressions"}),"\n",(0,r.jsxs)(n.p,{children:["Sometimes you may need to insert an arbitrary string into a query. To create a raw string expression, you may use the ",(0,r.jsx)(n.code,{children:"raw"})," method provided by the ",(0,r.jsx)(n.code,{children:"DB"})," facade:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->select(DB::raw("count(*) as user_count, status"))\n                 .where("status", "<>", 1)\n                 .groupBy("status")\n                 .get();\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"danger",children:(0,r.jsx)(n.p,{children:"Raw statements will be injected into the query as strings, so you should be extremely careful to avoid creating SQL injection vulnerabilities."})}),"\n",(0,r.jsx)(n.h3,{id:"raw-methods",children:"Raw Methods"}),"\n",(0,r.jsxs)(n.p,{children:["Instead of using the ",(0,r.jsx)(n.code,{children:"DB::raw"})," method, you may also use the following methods to insert a raw expression into various parts of your query. ",(0,r.jsx)(n.strong,{children:"Remember, TinyORM can not guarantee that any query using raw expressions is protected against SQL injection vulnerabilities."})]}),"\n",(0,r.jsx)(n.h4,{id:"selectraw",children:(0,r.jsx)(n.code,{children:"selectRaw"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"selectRaw"})," method can be used in place of ",(0,r.jsx)(n.code,{children:"addSelect(DB::raw(...))"}),". This method accepts an optional vector of bindings as its second argument:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto orders = DB::table("orders")\n                  ->selectRaw("price * ? as price_with_tax", {1.0825})\n                  .get();\n'})}),"\n",(0,r.jsx)(n.h4,{id:"fromraw",children:(0,r.jsx)(n.code,{children:"fromRaw"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"fromRaw"}),' method may be used to provide a raw string as the value of the "from" clause:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::connection("postgres").query()\n                 ->fromRaw("(select id, name from users where id < ?) as u", {5})\n                 .where("id", "<", 3)\n                 .get();\n'})}),"\n",(0,r.jsx)(n.h4,{id:"whereraw--orwhereraw",children:(0,r.jsx)(n.code,{children:"whereRaw / orWhereRaw"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereRaw"})," and ",(0,r.jsx)(n.code,{children:"orWhereRaw"}),' methods can be used to inject a raw "where" clause into your query. These methods accept an optional vector of bindings as their second argument:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto orders = DB::table("orders")\n                  ->whereRaw("price > IF(state = \\"TX\\", ?, 100)", {200})\n                  .get();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"groupbyraw",children:(0,r.jsx)(n.code,{children:"groupByRaw"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"groupByRaw"})," method may be used to provide a raw string as the value of the ",(0,r.jsx)(n.code,{children:"group by"})," clause:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto orders = DB::table("orders")\n                  ->select({"city", "state"})\n                  .groupByRaw("city, state")\n                  .get();\n'})}),"\n",(0,r.jsx)(n.h4,{id:"havingraw--orhavingraw",children:(0,r.jsx)(n.code,{children:"havingRaw / orHavingRaw"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"havingRaw"})," and ",(0,r.jsx)(n.code,{children:"orHavingRaw"}),' methods may be used to provide a raw string as the value of the "having" clause. These methods accept an optional vector of bindings as their second argument:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto orders = DB::table("orders")\n                  ->select({"department", DB::raw("SUM(price) as total_sales")})\n                  .groupBy("department")\n                  .havingRaw("SUM(price) > ?", {2500})\n                  .get();\n'})}),"\n",(0,r.jsx)(n.h4,{id:"orderbyraw",children:(0,r.jsx)(n.code,{children:"orderByRaw"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"orderByRaw"}),' method may be used to provide a raw string as the value of the "order by" clause:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto orders = DB::table("orders")\n                  ->orderByRaw("updated_at - created_at DESC")\n                  .get();\n'})}),"\n",(0,r.jsx)(n.h2,{id:"joins",children:"Joins"}),"\n",(0,r.jsx)(n.h4,{id:"inner-join-clause",children:"Inner Join Clause"}),"\n",(0,r.jsxs)(n.p,{children:['The query builder may also be used to add join clauses to your queries. To perform a basic "inner join", you may use the ',(0,r.jsx)(n.code,{children:"join"})," method on a query builder instance. The first argument passed to the ",(0,r.jsx)(n.code,{children:"join"})," method is the name of the table you need to join to, while the remaining arguments specify the column constraints for the join. You may even join multiple tables in a single query:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nauto users = DB::table("users")\n                 ->join("contacts", "users.id", "=", "contacts.user_id")\n                 .join("orders", "users.id", "=", "orders.user_id")\n                 .select({"users.*", "contacts.phone", "orders.price"})\n                 .get();\n'})}),"\n",(0,r.jsx)(n.h4,{id:"left-join--right-join-clause",children:"Left Join / Right Join Clause"}),"\n",(0,r.jsxs)(n.p,{children:['If you would like to perform a "left join" or "right join" instead of an "inner join", use the ',(0,r.jsx)(n.code,{children:"leftJoin"})," or ",(0,r.jsx)(n.code,{children:"rightJoin"})," methods. These methods have the same signature as the ",(0,r.jsx)(n.code,{children:"join"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->leftJoin("posts", "users.id", "=", "posts.user_id")\n                 .get();\n\nauto users = DB::table("users")\n                 ->rightJoin("posts", "users.id", "=", "posts.user_id")\n                 .get();\n'})}),"\n",(0,r.jsx)(n.h4,{id:"cross-join-clause",children:"Cross Join Clause"}),"\n",(0,r.jsxs)(n.p,{children:["You may use the ",(0,r.jsx)(n.code,{children:"crossJoin"}),' method to perform a "cross join". Cross joins generate a cartesian product between the first table and the joined table:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto sizes = DB::table("sizes")\n                 ->crossJoin("colors")\n                 .get();\n'})}),"\n",(0,r.jsx)(n.h4,{id:"advanced-join-clauses",children:"Advanced Join Clauses"}),"\n",(0,r.jsxs)(n.p,{children:["You may also specify more advanced join clauses. To get started, pass a lambda expression as the second argument to the ",(0,r.jsx)(n.code,{children:"join"})," method. The lambda expression will receive a ",(0,r.jsx)(n.code,{children:"Orm::Query::JoinClause"}),' instance which allows you to specify constraints on the "join" clause:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n#include <orm/query/joinclause.hpp>\n\nDB::table("users")\n    ->join("contacts", [](auto &join)\n    {\n        join.on("users.id", "=", "contacts.user_id")\n            .orOn(...);\n    })\n    .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:['If you would like to use a "where" clause on your joins, you may use the ',(0,r.jsx)(n.code,{children:"where"})," and ",(0,r.jsx)(n.code,{children:"orWhere"})," methods provided by the ",(0,r.jsx)(n.code,{children:"Orm::Query::JoinClause"})," instance. Instead of comparing two columns, these methods will compare the column against a value:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")\n    ->join("contacts", [](auto &join)\n    {\n        join.on("users.id", "=", "contacts.user_id")\n            .where("contacts.user_id", ">", 5);\n    })\n    .get();\n'})}),"\n",(0,r.jsx)(n.h4,{id:"subquery-joins",children:"Subquery Joins"}),"\n",(0,r.jsxs)(n.p,{children:["You may use the ",(0,r.jsx)(n.code,{children:"joinSub"}),", ",(0,r.jsx)(n.code,{children:"leftJoinSub"}),", and ",(0,r.jsx)(n.code,{children:"rightJoinSub"})," methods to join a query to a subquery. Each of these methods receives three arguments: the subquery, its table alias, and a lambda expression that defines the related columns. In this example, we will retrieve a collection of users where each user record also contains the ",(0,r.jsx)(n.code,{children:"created_at"})," timestamp of the user's most recently published blog post:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto latestPosts = DB::table("posts")\n                   ->select({"user_id", DB::raw("MAX(created_at) as last_post_created_at")})\n                   .whereEq("is_published", true)\n                   .groupBy("user_id");\n\nauto users = DB::table("users")\n                 ->joinSub(latestPosts, "latest_posts", [](auto &join)\n                 {\n                     join.on("users.id", "=", "latest_posts.user_id");\n                 }).get();\n'})}),"\n",(0,r.jsx)(n.h2,{id:"basic-where-clauses",children:"Basic Where Clauses"}),"\n",(0,r.jsx)(n.h3,{id:"where-clauses",children:"Where Clauses"}),"\n",(0,r.jsxs)(n.p,{children:["You may use the query builder's ",(0,r.jsx)(n.code,{children:"where"}),' method to add "where" clauses to the query. The most basic call to the ',(0,r.jsx)(n.code,{children:"where"})," method requires three arguments. The first argument is the name of the column. The second argument is an operator, which can be any of the database's supported operators. The third argument is the value to compare against the column's value."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, the following query retrieves users where the value of the ",(0,r.jsx)(n.code,{children:"votes"})," column is equal to ",(0,r.jsx)(n.code,{children:"100"})," and the value of the ",(0,r.jsx)(n.code,{children:"age"})," column is greater than ",(0,r.jsx)(n.code,{children:"35"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->where("votes", "=", 100)\n                 .where("age", ">", 35)\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For convenience, if you want to verify that a column is ",(0,r.jsx)(n.code,{children:"="})," to a given value, you may call ",(0,r.jsx)(n.code,{children:"whereEq"})," method. Similar ",(0,r.jsx)(n.code,{children:"XxxEq"})," methods are also defined for other commands:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")->whereEq("votes", 100).get();\n'})}),"\n",(0,r.jsx)(n.p,{children:"As previously mentioned, you may use any operator that is supported by your database system:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->where("votes", ">=", 100)\n                 .get();\n\nauto users = DB::table("users")\n                 ->where("votes", "<>", 100)\n                 .get();\n\nauto users = DB::table("users")\n                 ->where("name", "like", "T%")\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You may also pass a ",(0,r.jsx)(n.code,{children:"QList<Orm::WhereItem>"})," of conditions to the ",(0,r.jsx)(n.code,{children:"where"})," function. Each ",(0,r.jsx)(n.code,{children:"Orm::WhereItem"})," structure should contain the four arguments typically passed to the ",(0,r.jsx)(n.code,{children:"where"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->where({\n                     {"status", 1}, // "=" by default\n                     {"subscribed", 1, "<>"},\n                 }).get();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"or-where-clauses",children:"Or Where Clauses"}),"\n",(0,r.jsxs)(n.p,{children:["When chaining together calls to the query builder's ",(0,r.jsx)(n.code,{children:"where"}),' method, the "where" clauses will be joined together using the ',(0,r.jsx)(n.code,{children:"and"})," operator. However, you may use the ",(0,r.jsx)(n.code,{children:"orWhere"})," or ",(0,r.jsx)(n.code,{children:"orWhereEq"})," method to join a clause to the query using the ",(0,r.jsx)(n.code,{children:"or"})," operator. The ",(0,r.jsx)(n.code,{children:"orWhere"})," method accepts the same arguments as the ",(0,r.jsx)(n.code,{children:"where"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->where("votes", ">", 100)\n                 .orWhere("name", "=", "John")\n                 .orWhereEq("name", "Jack")\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:['If you need to group an "or" condition within parentheses, you may pass a lambda expression as the first argument to the ',(0,r.jsx)(n.code,{children:"orWhere"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->where("votes", ">", 100)\n                 .orWhere([](auto &query)\n                 {\n                     query.whereEq("name", "Abigail")\n                          .where("votes", ">", 50);\n                 })\n                 .get();\n'})}),"\n",(0,r.jsx)(n.p,{children:"The example above will produce the following SQL:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'select * from users where votes > 100 or (name = "Abigail" and votes > 50)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"condition-operator-overriding",children:"Condition Operator Overriding"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"where"})," method overload with a ",(0,r.jsx)(n.code,{children:"QList<Orm::WhereItem>"})," as the first argument joins conditions using the ",(0,r.jsx)(n.code,{children:"and"})," operator by default:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->where({\n                     {"first_name", "John"},\n                     {"votes", 50, ">"},\n                 }).get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Conditions operator can be overridden by the fourth argument in the ",(0,r.jsx)(n.code,{children:"Orm::WhereItem"})," structure:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->where({\n                     {"first_name", "John"},\n                     {"votes", 50, ">", "or"},\n                 }).get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Or by the second ",(0,r.jsx)(n.code,{children:"where"})," argument, in this case all conditions will be joined by this condition, but it is still possible to override them by the fourth argument in the ",(0,r.jsx)(n.code,{children:"Orm::WhereItem"})," structure:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->where({\n                     {"first_name", "John"},\n                     {"last_name", "Smith"},\n                     {"votes", 50, ">", "and"},\n                 }, "or")\n                 .get();\n'})}),"\n",(0,r.jsx)(n.p,{children:"The example above will produce the following SQL:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'select * from users where (first_name = "John" or last_name = "Smith" and votes > 50)\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["Still, it is a better idea to use ",(0,r.jsx)(n.a,{href:"#logical-grouping",children:"Logical Grouping"})," described few lines below, which allows better control of the parentheses."]})}),"\n",(0,r.jsx)(n.h3,{id:"where-not-clauses",children:"Where Not Clauses"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereNot"})," and ",(0,r.jsx)(n.code,{children:"orWhereNot"})," methods may be used to negate a given group of query constraints. For example, the following query excludes products that are on clearance or which have a price that is less than ten:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto products = DB::table("products")\n                    ->whereNot([](auto &query) {\n                        query.whereEq("clearance", true)\n                             .orWhere("price", "<", 10);\n                    })\n                    .get();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"additional-where-clauses",children:"Additional Where Clauses"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"whereBetween / orWhereBetween"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereBetween"})," method verifies that a column's value is between two values:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereBetween("votes", {1, 100})\n                 .get();\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"whereNotBetween / orWhereNotBetween"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereNotBetween"})," method verifies that a column's value lies outside of two values:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereNotBetween("votes", {1, 100})\n                 .get();\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"whereBetweenColumns / orWhereBetweenColumns"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereBetweenColumns"})," method verifies that a column's value is between two values in given columns:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto files = DB::table("files")\n                 ->whereBetweenColumns("quota", {"min_allowed_quota", "max_allowed_quota"})\n                 .get();\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"whereNotBetweenColumns / orWhereNotBetweenColumns"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereNotBetweenColumns"})," method verifies that a column's value lies outside of two values in given columns:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto files = DB::table("files")\n                 ->whereNotBetweenColumns("quota", {"min_allowed_quota", "max_allowed_quota"})\n                 .get();\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"whereIn / whereNotIn / orWhereIn / orWhereNotIn"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereIn"})," method verifies that a given column's value is contained within the given ",(0,r.jsx)(n.code,{children:"QList<QVariant>"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereIn("id", {1, 2, 3})\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereNotIn"})," method verifies that the given column's value is not contained in the given ",(0,r.jsx)(n.code,{children:"QList<QVariant>"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereNotIn("id", {1, 2, 3})\n                 .get();\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"whereNull / whereNotNull / orWhereNull / orWhereNotNull"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereNull"})," method verifies that the value of the given column is ",(0,r.jsx)(n.code,{children:"NULL"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereNull("updated_at")\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereNotNull"})," method verifies that the column's value is not ",(0,r.jsx)(n.code,{children:"NULL"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereNotNull("updated_at")\n                 .get();\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"whereDate / whereTime / whereDay / whereMonth / whereYear"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereDate"})," method may be used to compare a column's value against a date:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereDate("created_at", EQ, QDate(2022, 11, 18))\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereTime"})," method may be used to compare a column's value against a specific time:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereTime("created_at", "=", QTime(11, 14, 23))\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereDay"})," method may be used to compare a column's value against a specific day of the month:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereDay("created_at", "<=", 15)\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereMonth"})," method may be used to compare a column's value against a specific month:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereEqMonth("created_at", 12)\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereYear"})," method may be used to compare a column's value against a specific year:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereEqYear("created_at", 2016)\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereDate"})," and ",(0,r.jsx)(n.code,{children:"whereTime"})," methods also accept a ",(0,r.jsx)(n.code,{children:"QDateTime"})," instance or you can pass values as a ",(0,r.jsx)(n.code,{children:"QString"})," in ",(0,r.jsx)(n.code,{children:"2022-12-31"})," or ",(0,r.jsx)(n.code,{children:"09:15:11"})," formats."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereDay"}),", ",(0,r.jsx)(n.code,{children:"whereMoth"}),", and ",(0,r.jsx)(n.code,{children:"whereYear"})," accept ",(0,r.jsx)(n.code,{children:"QDate"})," or ",(0,r.jsx)(n.code,{children:"QDateTime"})," instances, an integral number or a ",(0,r.jsx)(n.code,{children:"QString"})," that contains an integral number."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["All the above methods offer ",(0,r.jsx)(n.code,{children:"whereEqXyz"})," and ",(0,r.jsx)(n.code,{children:"orWhereXyz"})," shortcut methods."]})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"whereColumn / orWhereColumn"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereColumnEq"})," method may be used to verify that two columns are equal:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereColumnEq("first_name", "last_name")\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You may also pass a comparison operator to the ",(0,r.jsx)(n.code,{children:"whereColumn"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereColumn("updated_at", ">", "created_at")\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You may also pass a ",(0,r.jsx)(n.code,{children:"QList<Orm::WhereColumnItem>"})," of column comparisons to the ",(0,r.jsx)(n.code,{children:"whereColumn"})," method. These conditions will be joined using the ",(0,r.jsx)(n.code,{children:"and"})," operator:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereColumn({\n                     {"first_name", "last_name"},\n                     {"updated_at", "created_at", ">"},\n                 }).get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Conditions operator can also be overridden by the fourth argument in the ",(0,r.jsx)(n.code,{children:"Orm::WhereColumnItem"})," structure:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereColumn({\n                     {"first_name", "last_name"},\n                     {"updated_at", "created_at", ">", "or"},\n                 }).get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Or by the second ",(0,r.jsx)(n.code,{children:"whereColumn"})," argument:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereColumn({\n                     {"first_name", "last_name"},\n                     {"updated_at", "created_at", ">"},\n                 }, "or")\n                 .get();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"logical-grouping",children:"Logical Grouping"}),"\n",(0,r.jsxs)(n.p,{children:['Sometimes you may need to group several "where" clauses within parentheses in order to achieve your query\'s desired logical grouping. In fact, you should generally always group calls to the ',(0,r.jsx)(n.code,{children:"orWhere"})," method in parentheses in order to avoid unexpected query behavior. To accomplish this, you may pass a lambda expression to the ",(0,r.jsx)(n.code,{children:"where"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->where("name", "=", "John")\n                 .where([](auto &query)\n                 {\n                     query.where("votes", ">", 100)\n                          .orWhere("title", "=", "Admin");\n                 })\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["As you can see, passing a lambda expression into the ",(0,r.jsx)(n.code,{children:"where"})," method instructs the query builder to begin a constraint group. The lambda expression will receive a query builder instance which you can use to set the constraints that should be contained within the parenthesis group. The example above will produce the following SQL:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'select * from users where name = "John" and (votes > 100 or title = "Admin")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-where-clauses",children:"Advanced Where Clauses"}),"\n",(0,r.jsx)(n.h3,{id:"where-exists-clauses",children:"Where Exists Clauses"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"whereExists"}),' method allows you to write "where exists" SQL clauses. The ',(0,r.jsx)(n.code,{children:"whereExists"}),' method accepts a lambda expression which will receive a query builder instance, allowing you to define the query that should be placed inside of the "exists" clause:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereExists([](auto &query)\n                 {\n                     query.select(DB::raw(1))\n                          .from("orders")\n                          .whereColumnEq("orders.user_id", "users.id");\n                 })\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Alternatively, you may provide a query object to the ",(0,r.jsx)(n.code,{children:"whereExists"})," method instead of a lambda expression:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'// Ownership of the std::shared_ptr<QueryBuilder>\nauto builder = DB::table("orders");\nauto orders = builder->select(DB::raw(1))\n                      .whereColumnEq("orders.user_id", "users.id");\n\nauto users = DB::table("users")\n                 ->whereExists(orders)\n                 .get();\n'})}),"\n",(0,r.jsx)(n.p,{children:"Or directly:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->whereExists(DB::table("orders")\n                                   ->select(DB::raw(1))\n                                   .whereColumnEq("orders.user_id", "users.id"))\n                 .get();\n'})}),"\n",(0,r.jsx)(n.p,{children:"All of the examples above will produce the following SQL:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"select * from users\nwhere exists (\n    select 1\n    from orders\n    where orders.user_id = users.id\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"subquery-where-clauses",children:"Subquery Where Clauses"}),"\n",(0,r.jsxs)(n.p,{children:['Sometimes you may need to construct a "where" clause that compares the results of a subquery to a given value. You may accomplish this by passing a lambda expression and a value to the ',(0,r.jsx)(n.code,{children:"where"}),' method. For example, the following query will retrieve all users who have a recent "membership" of a given type:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include "models/user.hpp"\n\nauto users = User::whereEq([](auto &query)\n{\n    query.select("type")\n         .from("membership")\n         .whereColumnEq("membership.user_id", "users.id")\n         .orderByDesc("membership.start_date")\n         .limit(1);\n}, "Pro")->get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:['Or, you may need to construct a "where" clause that compares a column to the results of a subquery. You may accomplish this by passing a column, operator, and lambda expression to the ',(0,r.jsx)(n.code,{children:"where"})," method. For example, the following query will retrieve all income records where the amount is less than average;"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include "models/income.hpp"\n\nauto incomes = Income::where("amount", "<", [](auto &query)\n{\n    query.selectRaw("avg(i.amount)").from("incomes as i");\n})->get();\n'})}),"\n",(0,r.jsx)(n.h2,{id:"ordering-grouping-limit-and-offset",children:"Ordering, Grouping, Limit & Offset"}),"\n",(0,r.jsx)(n.h3,{id:"ordering",children:"Ordering"}),"\n",(0,r.jsxs)(n.h4,{id:"the-orderby-method",children:["The ",(0,r.jsx)(n.code,{children:"orderBy"})," Method"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"orderBy"})," method allows you to sort the results of the query by a given column. The first argument accepted by the ",(0,r.jsx)(n.code,{children:"orderBy"})," method should be the column you wish to sort by, while the second argument determines the direction of the sort and may be either ",(0,r.jsx)(n.code,{children:"asc"})," or ",(0,r.jsx)(n.code,{children:"desc"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->orderBy("name", "desc")\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["To sort by multiple columns, you may simply invoke ",(0,r.jsx)(n.code,{children:"orderBy"})," as many times as necessary:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->orderBy("name", "desc")\n                 .orderBy("email", "asc")\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"the-latest--oldest-methods",children:["The ",(0,r.jsx)(n.code,{children:"latest"})," & ",(0,r.jsx)(n.code,{children:"oldest"})," Methods"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"latest"})," and ",(0,r.jsx)(n.code,{children:"oldest"})," methods allow you to easily order results by date. By default, the result will be ordered by the table's ",(0,r.jsx)(n.code,{children:"created_at"})," column. Or, you may pass the column name that you wish to sort by:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto user = DB::table("users")\n                ->latest()\n                .first();\n'})}),"\n",(0,r.jsx)(n.h4,{id:"random-ordering",children:"Random Ordering"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"inRandomOrder"})," method may be used to sort the query results randomly. For example, you may use this method to fetch a random user:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto randomUser = DB::table("users")\n                      ->inRandomOrder()\n                      .first();\n'})}),"\n",(0,r.jsx)(n.h4,{id:"removing-existing-orderings",children:"Removing Existing Orderings"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"reorder"}),' method removes all of the "order by" clauses that have previously been applied to the query:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto &query = DB::table("users")->orderBy("name");\n\nauto unorderedUsers = query.reorder().get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You may pass a column and direction when calling the ",(0,r.jsx)(n.code,{children:"reorder"}),' method in order to remove all existing "order by" clauses and apply an entirely new order to the query:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto &query = DB::table("users")->orderBy("name");\n\nauto usersOrderedByEmail = query.reorder("email", "desc").get();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"grouping",children:"Grouping"}),"\n",(0,r.jsxs)(n.h4,{id:"the-groupby--having-methods",children:["The ",(0,r.jsx)(n.code,{children:"groupBy"})," & ",(0,r.jsx)(n.code,{children:"having"})," Methods"]}),"\n",(0,r.jsxs)(n.p,{children:["As you might expect, the ",(0,r.jsx)(n.code,{children:"groupBy"})," and ",(0,r.jsx)(n.code,{children:"having"})," methods may be used to group the query results. The ",(0,r.jsx)(n.code,{children:"having"})," method's signature is similar to that of the ",(0,r.jsx)(n.code,{children:"where"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->groupBy("account_id")\n                 .having("account_id", ">", 100)\n                 .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You may pass multiple items to the ",(0,r.jsx)(n.code,{children:"groupBy"})," method to group by multiple columns:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->groupBy({"first_name", "status"})\n                 .having("account_id", ">", 100)\n                 .get();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"limit-and-offset",children:"Limit & Offset"}),"\n",(0,r.jsxs)(n.h4,{id:"the-skip--take-methods",children:["The ",(0,r.jsx)(n.code,{children:"skip"})," & ",(0,r.jsx)(n.code,{children:"take"})," Methods"]}),"\n",(0,r.jsxs)(n.p,{children:["You may use the ",(0,r.jsx)(n.code,{children:"skip"})," and ",(0,r.jsx)(n.code,{children:"take"})," methods to limit the number of results returned from the query or to skip a given number of results in the query:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")->skip(10).take(5).get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Alternatively, you may use the ",(0,r.jsx)(n.code,{children:"limit"})," and ",(0,r.jsx)(n.code,{children:"offset"})," methods. These methods are functionally equivalent to the ",(0,r.jsx)(n.code,{children:"take"})," and ",(0,r.jsx)(n.code,{children:"skip"})," methods, respectively:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto users = DB::table("users")\n                 ->offset(10)\n                 .limit(5)\n                 .get();\n'})}),"\n",(0,r.jsx)(n.h2,{id:"insert-statements",children:"Insert Statements"}),"\n",(0,r.jsxs)(n.p,{children:["The query builder also provides an ",(0,r.jsx)(n.code,{children:"insert"})," method that may be used to insert records into the database table. The ",(0,r.jsx)(n.code,{children:"insert"})," method accepts the ",(0,r.jsx)(n.code,{children:"QVariantMap"})," of column names and values:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")->insert({\n    {"email", "kayla@example.com"},\n    {"votes", 0},\n});\n'})}),"\n",(0,r.jsx)(a.A,{id:"multi-insert-overload"}),"\n",(0,r.jsxs)(n.p,{children:["You may insert several records at once by passing a ",(0,r.jsx)(n.code,{children:"QList<QString>"})," for column names as the first argument and ",(0,r.jsx)(n.code,{children:"QList<QList<QVariant>>"})," for values as the second argument. Each ",(0,r.jsx)(n.code,{children:"QList<QVariant>"})," represents a record that should be inserted into the table. This overload is useful for multi-insert and allows to specify column names only once:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")->insert({"email", "votes"},\n{\n    {"picard@example.com",  0},\n    {"janeway@example.com", 0},\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You may also insert several records at once by passing a ",(0,r.jsx)(n.code,{children:"QList<QVariantMap>"}),". Each ",(0,r.jsx)(n.code,{children:"QVariantMap"})," represents a record that should be inserted into the table:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")->insert({\n    {{"email", "picard@example.com"},  {"votes", 0}},\n    {{"email", "janeway@example.com"}, {"votes", 0}},\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"insertOrIgnore"})," method will ignore duplicate record errors while inserting records into the database and also provides the same overloads like the ",(0,r.jsx)(n.code,{children:"insert"})," method. When using this method, you should be aware that duplicate record errors will be ignored and other types of errors may also be ignored depending on the database engine. For example, ",(0,r.jsx)(n.code,{children:"insertOrIgnore"})," will ",(0,r.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/en/sql-mode.html#ignore-effect-on-execution",children:"bypass MySQL's strict mode"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")->insertOrIgnore({"id", "email"},\n{\n    {1, "sisko@example.com"},\n    {2, "archer@example.com"},\n});\n\nDB::table("users")->insertOrIgnore({\n    {{"id", 1}, {"email", "sisko@example.com"}},\n    {{"id", 2}, {"email", "archer@example.com"}},\n});\n'})}),"\n",(0,r.jsx)(n.h4,{id:"auto-incrementing-ids",children:"Auto-Incrementing IDs"}),"\n",(0,r.jsxs)(n.p,{children:["If the table has an auto-incrementing id, use the ",(0,r.jsx)(n.code,{children:"insertGetId"})," method to insert a record and then retrieve the ID:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto id = DB::table("users")->insertGetId({\n    {"email", "john@example.com"},\n    {"votes", 0},\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"upserts",children:"Upserts"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"upsert"})," method will insert records that do not exist and update the records that already exist with new values that you may specify. The method's first argument consists of the values to insert or update, while the second argument lists the column(s) that uniquely identify records within the associated table. The method's third and final argument is a vector of columns that should be updated if a matching record already exists in the database:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("flights")->upsert(\n    {{{"departure", "Oakland"}, {"destination", "San Diego"}, {"price", 99}},\n     {{"departure", "Chicago"}, {"destination", "New York"},  {"price", 150}}},\n    {"departure", "destination"},\n    {"price"}\n);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In the example above, TinyORM will attempt to insert two records. If a record already exists with the same ",(0,r.jsx)(n.code,{children:"departure"})," and ",(0,r.jsx)(n.code,{children:"destination"})," column values, TinyORM will update that record's ",(0,r.jsx)(n.code,{children:"price"})," column."]}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["All databases except SQL Server require the columns in the second argument of the ",(0,r.jsx)(n.code,{children:"upsert"}),' method to have a "primary" or "unique" index. In addition, the MySQL database driver ignores the second argument of the ',(0,r.jsx)(n.code,{children:"upsert"}),' method and always uses the "primary" and "unique" indexes of the table to detect existing records.']})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Row and column aliases will be used with the MySQL server >=8.0.19 instead of the VALUES() function as is described in the MySQL ",(0,r.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/9.0/en/insert-on-duplicate.html",children:"documentation"}),". The MySQL server version is auto-detected and can be overridden in the ",(0,r.jsx)(n.a,{href:"/database/getting-started#configuration",children:"configuration"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"update-statements",children:"Update Statements"}),"\n",(0,r.jsxs)(n.p,{children:["In addition to inserting records into the database, the query builder can also update existing records using the ",(0,r.jsx)(n.code,{children:"update"})," method. The ",(0,r.jsx)(n.code,{children:"update"})," method, accepts a ",(0,r.jsx)(n.code,{children:"QList<Orm::UpdateItem>"})," of column and value pairs, indicating the columns to be updated and returns a ",(0,r.jsx)(n.code,{children:"std::tuple<int, QSqlQuery>"})," . You may constrain the ",(0,r.jsx)(n.code,{children:"update"})," query using ",(0,r.jsx)(n.code,{children:"where"})," clauses:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto [affected, query] = DB::table("users")\n                             ->whereEq("id", 1)\n                             .update({{"votes", 1}});\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["An ",(0,r.jsx)(n.code,{children:"update"})," and ",(0,r.jsx)(n.code,{children:"delete"})," are affecting statements, so they return ",(0,r.jsx)(n.code,{children:"std::tuple<int, QSqlQuery>"}),"."]})}),"\n",(0,r.jsx)(n.h4,{id:"update-or-insert",children:"Update Or Insert"}),"\n",(0,r.jsxs)(n.p,{children:["Sometimes you may want to update an existing record in the database or create it if no matching record exists. In this scenario, the ",(0,r.jsx)(n.code,{children:"updateOrInsert"})," method may be used. The ",(0,r.jsx)(n.code,{children:"updateOrInsert"})," method accepts two arguments: a vector of conditions by which to find the record, and a vector of column and value pairs indicating the columns to be updated."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"updateOrInsert"})," method will attempt to locate a matching database record using the first argument's column and value pairs. If the record exists, it will be updated with the values in the second argument. If the record can not be found, a new record will be inserted with the merged attributes of both arguments:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")\n    ->updateOrInsert(\n        {{"email", "john@example.com"}, {"name", "John"}},\n        {{"votes", 2}}\n    );\n'})}),"\n",(0,r.jsx)(n.h3,{id:"increment-and-decrement",children:"Increment & Decrement"}),"\n",(0,r.jsx)(n.p,{children:"The query builder also provides convenient methods for incrementing or decrementing the value of a given column. Both of these methods accept at least one argument: the column to modify. A second argument may be provided to specify the amount by which the column should be incremented or decremented:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")->increment<int>("votes");\n\nDB::table("users")->increment("votes", 5);\n\nDB::table("users")->decrement<int>("votes");\n\nDB::table("users")->decrement("votes", 5.2); // float or double type\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You may also specify additional columns to update during the operation as a ",(0,r.jsx)(n.code,{children:"QList<Orm::UpdateItem>"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")->increment("votes", 1, {{"name", "John"}});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You should constrain ",(0,r.jsx)(n.code,{children:"increment"}),", ",(0,r.jsx)(n.code,{children:"decrement"})," by ",(0,r.jsx)(n.code,{children:"where"})," to update only specific record in the database, otherwise a column in all records will be modified."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")->whereEq("id", 1).increment("votes", 5);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"delete-statements",children:"Delete Statements"}),"\n",(0,r.jsxs)(n.p,{children:["The query builder's ",(0,r.jsx)(n.code,{children:"remove"}),", or an alias ",(0,r.jsx)(n.code,{children:"deleteRow"})," method may be used to delete records from the table. You may constrain ",(0,r.jsx)(n.code,{children:"delete"}),' statements by adding "where" clauses before calling the ',(0,r.jsx)(n.code,{children:"delete"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")->remove();\n\nDB::table("users")->where("votes", ">", 100).remove();\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"delete"})," can not be used as the method name because it is the reserved word."]})}),"\n",(0,r.jsxs)(n.p,{children:["You may also pass record ",(0,r.jsx)(n.code,{children:"id"})," to the ",(0,r.jsx)(n.code,{children:"remove"})," method as the first argument, it is the shortcut method, which internally calls ",(0,r.jsx)(n.code,{children:"where"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")->remove(2);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"truncate-statement",children:"Truncate Statement"}),"\n",(0,r.jsxs)(n.p,{children:["If you wish to truncate an entire table, which will remove all records from the table and reset the auto-incrementing ID to zero, you may use the ",(0,r.jsx)(n.code,{children:"truncate"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")->truncate();\n'})}),"\n",(0,r.jsx)(n.h4,{id:"table-truncation--postgresql",children:"Table Truncation & PostgreSQL"}),"\n",(0,r.jsxs)(n.p,{children:["When truncating a PostgreSQL database, the ",(0,r.jsx)(n.code,{children:"CASCADE"})," behavior will be applied. This means that all foreign key related records in other tables will be deleted as well."]}),"\n",(0,r.jsx)(n.h2,{id:"pessimistic-locking",children:"Pessimistic Locking"}),"\n",(0,r.jsxs)(n.p,{children:['The query builder also includes a few functions to help you achieve "pessimistic locking" when executing your ',(0,r.jsx)(n.code,{children:"select"}),' statements. To execute a statement with a "shared lock", you may call the ',(0,r.jsx)(n.code,{children:"sharedLock"})," method. A shared lock prevents the selected rows from being modified until your transaction is committed:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")\n        ->where("votes", ">", 100)\n        .sharedLock()\n        .get();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Alternatively, you may use the ",(0,r.jsx)(n.code,{children:"lockForUpdate"}),' method. A "for update" lock prevents the selected records from being modified or from being selected with another shared lock:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")\n        ->where("votes", ">", 100)\n        .lockForUpdate()\n        .get();\n'})}),"\n",(0,r.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,r.jsxs)(n.p,{children:["You may use the ",(0,r.jsx)(n.code,{children:"dd"})," and ",(0,r.jsx)(n.code,{children:"dump"})," methods while building a query to dump the current query bindings and SQL. The ",(0,r.jsx)(n.code,{children:"dd"})," method will display the debug information and then stop executing using the ",(0,r.jsx)(n.code,{children:"exit(1)"}),". The ",(0,r.jsx)(n.code,{children:"dump"})," method will display the debug information and continue executing:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'DB::table("users")->where("votes", ">", 100).dd();\n\nDB::table("users")->where("votes", ">", 100).dump();\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var r=s(6540);const t={},a=r.createContext(t);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);