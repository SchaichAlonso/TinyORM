"use strict";(self.webpackChunktinyorm_org=self.webpackChunktinyorm_org||[]).push([[871],{7626:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=s(4848),t=s(8453);const r={sidebar_position:7,sidebar_label:"\ud83d\udcc4 Features Summary",hide_table_of_contents:!0,description:"List that fastly summarizes all TinyORM features.",keywords:["c++ orm","tinyorm","features","summary","features summary"]},a="Features Summary",l={id:"features-summary",title:"Features Summary",description:"List that fastly summarizes all TinyORM features.",source:"@site/docs/features-summary.mdx",sourceDirName:".",slug:"/features-summary",permalink:"/features-summary",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,sidebar_label:"\ud83d\udcc4 Features Summary",hide_table_of_contents:!0,description:"List that fastly summarizes all TinyORM features.",keywords:["c++ orm","tinyorm","features","summary","features summary"]},sidebar:"tinyormSidebar",previous:{title:"Migrations",permalink:"/building/migrations"},next:{title:"\u2764\ufe0f Sponsors",permalink:"/sponsors"}},o={},d=[{value:"Summary List",id:"summary-list",level:2},{value:"Showcase Images",id:"showcase-images",level:2},{value:"Tom console application",id:"tom-console-application",level:6},{value:"Passed all unit tests \ud83e\udd73",id:"passed-all-unit-tests-",level:6},{value:"TinyOrmPlayground",id:"tinyormplayground",level:4},{value:"TinyOrmPlayground single-threaded",id:"tinyormplayground-single-threaded",level:6},{value:"TinyOrmPlayground multi-threaded",id:"tinyormplayground-multi-threaded",level:6}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",h6:"h6",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"features-summary",children:"Features Summary"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#summary-list",children:"Summary List"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#showcase-images",children:"Showcase Images"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"summary-list",children:"Summary List"}),"\n",(0,i.jsxs)(n.p,{children:["The following list fastly summarizes all the ",(0,i.jsx)(n.code,{children:"TinyORM"})," features."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"simple database connections management"})," \ud83e\uddec","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"database manager that helps with the database connections management"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Orm::DB"})," facade class for nicer and shorter syntax"]}),"\n",(0,i.jsxs)(n.li,{children:["MySQL, MariaDB, SQLite, and PostgreSQL support for ",(0,i.jsx)(n.strong,{children:"all"})," features \ud83d\udc8e"]}),"\n",(0,i.jsx)(n.li,{children:"multi-threading support \ud83d\udc40"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SSL"})," connections support \ud83d\udd12"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"impressive query builder"})," \ud83d\udd27","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"allows passing sub-queries and raw expressions practically everywhere, to column names, values, and to every SQL clause as select, where, joins, group by, having, order by \ud83d\udd25"}),"\n",(0,i.jsx)(n.li,{children:"a logical grouping that offers to wrap logical groups in parenthesis"}),"\n",(0,i.jsx)(n.li,{children:"chunked results for lower memory footprint \u2728"}),"\n",(0,i.jsx)(n.li,{children:"raw methods for all SQL clauses"}),"\n",(0,i.jsx)(n.li,{children:"all join types (left, right, cross, inner) and also join where clause support \ud83e\udee4"}),"\n",(0,i.jsx)(n.li,{children:"aggregate methods min, max, sum, increment, decrement, ..."}),"\n",(0,i.jsx)(n.li,{children:"whereExists and exists methods for an existence queries"}),"\n",(0,i.jsx)(n.li,{children:"transactions and pessimistic locking \ud83d\udd12"}),"\n",(0,i.jsx)(n.li,{children:"of course, insert, update, and delete SQL clauses support"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"correct QDateTime time zone"})," using the ",(0,i.jsx)(n.code,{children:"qt_timezone"})," connection configuration option \ud83d\udcc5 (returned QDateTime instances will have the correct time zone, and also works for an ORM)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"this feature allows you to set up the database server time zone to the UTC and all returned QDateTime instances will have the correct UTC time zone"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"clever ORM with all relation types support"})," \ud83c\udf89","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"one-to-one, one-to-many, and many-to-many relation types (also inverse relationships) \ud83e\udde8"}),"\n",(0,i.jsx)(n.li,{children:"eager and lazy loading with custom select and constraints \ud83d\ude80"}),"\n",(0,i.jsxs)(n.li,{children:["fluent ",(0,i.jsx)(n.code,{children:"ModelsCollection"})," that expose a variety of map / reduce operations that may be chained using an intuitive interface \u2728"]}),"\n",(0,i.jsx)(n.li,{children:"all query builder methods are proxied from the model instances and also from the relation instances back to the query builder \ud83e\udd2f (everything that can be called on the query builder can also be called on the model and relation instances)"}),"\n",(0,i.jsx)(n.li,{children:"clean active record pattern"}),"\n",(0,i.jsxs)(n.li,{children:["advanced features like timestamps, touching parent timestamps, ",(0,i.jsx)(n.strong,{children:"soft deleting"}),", default models, default model attributes, and attribute casting \ud83e\udd13"]}),"\n",(0,i.jsxs)(n.li,{children:["querying relationships existence/absence using the has, whereHas, and hasNested methods (using dot notation for selecting nested relationships ",(0,i.jsx)(n.em,{children:"users.posts.comments"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"serializing"})," models and collection of models including all nested relations to ",(0,i.jsx)(n.strong,{children:"JSON"})," and converting to vectors and maps \ud83e\udea1","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"supports controlling a custom date format during serialization"}),"\n",(0,i.jsx)(n.li,{children:"supports hiding and appending attributes"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"compiled database migrations and seeders"})," \ud83d\udd7a","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"create, update, drop, and rename database tables"}),"\n",(0,i.jsx)(n.li,{children:"create, drop, and rename table columns"}),"\n",(0,i.jsx)(n.li,{children:"extensive schema builder that allows creating of all possible column types"}),"\n",(0,i.jsx)(n.li,{children:"terser syntax for creating foreign keys and foreign key constraints"}),"\n",(0,i.jsx)(n.li,{children:"supports creating, and dropping column indexes (primary, unique, fulltext, spatial)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["the ",(0,i.jsx)(n.code,{children:"tom"})," console application with tab completion for all shells (pwsh, bash, zsh)"]})," \ud83e\udd73","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"scaffolding of models, migrations, and seeders"}),"\n",(0,i.jsxs)(n.li,{children:["impressive models scaffolding, every feature that is supported by models can be generated using the ",(0,i.jsx)(n.code,{children:"tom make:model"})," cli command"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["a huge amount of code is unit tested, currently ",(0,i.jsx)(n.strong,{children:"3366 unit tests"})," \ud83e\udd2f"]}),"\n",(0,i.jsxs)(n.li,{children:["C++20 only, with all the latest features used like concepts/constraints, ranges, smart pointers (no ",(0,i.jsx)(n.code,{children:"new"})," keyword in the whole code \ud83d\ude0e), folding expressions"]}),"\n",(0,i.jsxs)(n.li,{children:["qmake and CMake build systems support","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"CMake FetchContent module support \ud83e\udd19"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"vcpkg support (also the vcpkg port, currently not committed to the vcpkg repository \u2639\ufe0f)"}),"\n",(0,i.jsx)(n.li,{children:"it's really fast, you can run 1000 complex queries in 500ms (heavily DB dependant, the PostgreSQL is by far the fastest) \u231a"}),"\n",(0,i.jsx)(n.li,{children:"extensive documentation \ud83d\udcc3"}),"\n",(0,i.jsx)(n.li,{children:"..."}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.code,{children:"TinyDrivers"})," ",(0,i.jsx)(n.a,{href:"tinydrivers/getting-started#features-summary",children:"Features summary"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"showcase-images",children:"Showcase Images"}),"\n",(0,i.jsx)(n.h6,{id:"tom-console-application",children:"Tom console application"}),"\n",(0,i.jsx)("img",{src:s(5848).A,alt:"TinyORM - Tom console application - Showcase",title:"Tom console application"}),"\n",(0,i.jsx)(n.h6,{id:"passed-all-unit-tests-",children:"Passed all unit tests \ud83e\udd73"}),"\n",(0,i.jsx)("img",{src:s(8994).A,alt:"TinyORM - Passed all unit tests - Showcase",title:"Passed all unit tests",width:"700",className:"no-blurry"}),"\n",(0,i.jsx)(n.h4,{id:"tinyormplayground",children:"TinyOrmPlayground"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://github.com/silverqx/TinyOrmPlayground",children:"TinyOrmPlayground"})," project is my personal project where I have tested all the TinyORM database queries in the early development phases, currently, it executes ~1600 database queries across the whole TinyORM framework. Every query has a nice title header, is logged to the console, and is counted and measured (elapsed time). Every query also runs on all ",(0,i.jsx)(n.a,{href:"/database/getting-started#introduction",children:"supported databases"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The TinyOrmPlayground project can be compiled in a single-threaded or multi-threaded mode. In the multi-threaded mode, every database connection runs in its own thread. At the end of every database connection is logged a connection summary and before an exit is logged the application summary. Whole TinyOrmPlayground application is configurable through the ",(0,i.jsx)(n.a,{href:"https://github.com/silverqx/TinyOrmPlayground/blob/main/src/configuration.hpp",children:"src/configuration.hpp"})," class."]}),"\n",(0,i.jsx)(n.h6,{id:"tinyormplayground-single-threaded",children:"TinyOrmPlayground single-threaded"}),"\n",(0,i.jsx)("img",{src:s(3672).A,alt:"TinyORM - Invoked TinyOrmPlayground single-threaded - Showcase",title:"Invoked TinyOrmPlayground single-threaded"}),"\n",(0,i.jsx)(n.h6,{id:"tinyormplayground-multi-threaded",children:"TinyOrmPlayground multi-threaded"}),"\n",(0,i.jsx)("img",{src:s(2599).A,alt:"TinyORM - Invoked TinyOrmPlayground multi-threaded - Showcase",title:"Invoked TinyOrmPlayground multi-threaded"})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8994:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/tinyorm-passed_all_unit_tests-d730d995b6b490fb42c3671738e3b81e.png"},2599:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/tinyormplayground-multi-threaded-edb67030c75e2845e1fa7013e510174c.png"},3672:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/tinyormplayground-single-threaded-4e7a5769ad5a768a4d04c6dc856c4391.png"},5848:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/tom_cli-402f7dd4dfe7dbd0b20dfe5fb61838a2.png"},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var i=s(6540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);