"use strict";(self.webpackChunktinyorm_org=self.webpackChunktinyorm_org||[]).push([[168],{5162:function(e,l,n){n.d(l,{Z:function(){return r}});var t=n(7294),a=n(6010),o="tabItem_Ymn6";function r(e){var l=e.children,n=e.hidden,r=e.className;return t.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,r),hidden:n},l)}},5488:function(e,l,n){n.d(l,{Z:function(){return c}});var t=n(7462),a=n(7294),o=n(6010),r=n(2389),i=n(7392),d=n(7094),u=n(2466),p="tabList__CuJ",s="tabItem_LNqP";function m(e){var l,n,r=e.lazy,m=e.block,c=e.defaultValue,k=e.values,h=e.groupId,b=e.className,g=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),N=null!=k?k:g.map((function(e){var l=e.props;return{value:l.value,label:l.label,attributes:l.attributes}})),f=(0,i.l)(N,(function(e,l){return e.value===l.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var C=null===c?c:null!=(l=null!=c?c:null==(n=g.find((function(e){return e.props.default})))?void 0:n.props.value)?l:g[0].props.value;if(null!==C&&!N.some((function(e){return e.value===C})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+C+'" but none of its children has the corresponding value. Available values are: '+N.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var T=(0,d.U)(),y=T.tabGroupChoices,v=T.setTabGroupChoices,w=(0,a.useState)(C),I=w[0],E=w[1],_=[],H=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var x=y[h];null!=x&&x!==I&&N.some((function(e){return e.value===x}))&&E(x)}var q=function(e){var l=e.currentTarget,n=_.indexOf(l),t=N[n].value;t!==I&&(H(l),E(t),null!=h&&v(h,String(t)))},A=function(e){var l,n=null;switch(e.key){case"ArrowRight":var t,a=_.indexOf(e.currentTarget)+1;n=null!=(t=_[a])?t:_[0];break;case"ArrowLeft":var o,r=_.indexOf(e.currentTarget)-1;n=null!=(o=_[r])?o:_[_.length-1]}null==(l=n)||l.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",p)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":m},b)},N.map((function(e){var l=e.value,n=e.label,r=e.attributes;return a.createElement("li",(0,t.Z)({role:"tab",tabIndex:I===l?0:-1,"aria-selected":I===l,key:l,ref:function(e){return _.push(e)},onKeyDown:A,onFocus:q,onClick:q},r,{className:(0,o.Z)("tabs__item",s,null==r?void 0:r.className,{"tabs__item--active":I===l})}),null!=n?n:l)}))),r?(0,a.cloneElement)(g.filter((function(e){return e.props.value===I}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},g.map((function(e,l){return(0,a.cloneElement)(e,{key:l,hidden:e.props.value!==I})}))))}function c(e){var l=(0,r.Z)();return a.createElement(m,(0,t.Z)({key:String(l)},e))}},2044:function(e,l,n){n.d(l,{Ae:function(){return s},C:function(){return u},Fo:function(){return r},IM:function(){return p},IZ:function(){return t},RS:function(){return k},al:function(){return c},jk:function(){return d},js:function(){return i},q5:function(){return o},qb:function(){return m},wU:function(){return a}});var t="shell",a="application",o="bash",r="pwsh",i="zsh",d="application",u="bash",p="pwsh",s="zsh",m="TestApp",c="$HOME/Code/c/",k="$env:USERPROFILE\\Code\\c\\"},4355:function(e,l,n){n.d(l,{Z:function(){return o}});var t=n(7294),a=n(9482);function o(){var e=(0,t.useContext)(a.Z);if(null!=e)return e;throw new Error("useRootFolderContext is used outside of Layout component.")}},6005:function(e,l,n){n.d(l,{AE:function(){return i},EA:function(){return r},em:function(){return u},go:function(){return d},mT:function(){return p},we:function(){return s}});var t=n(4355),a=n(2389),o=n(2044),r=function(e,l){var n;return void 0===l&&(l=!0),m(null!=(n=(0,t.Z)().rootFolder[e])?n:u(e),e,l)},i=function(){var e;return null!=(e=(0,t.Z)().rootFolder[o.wU])?e:u(o.wU)},d=function(e,l){if(void 0===l&&(l=!0),null==e)throw new Error("The groupId in the applicationFolderPath() can not be empty.");var n=l||e!==o.Fo?"/":"\\";return m(r(e)+n+i(),e,l)};function u(e){if(null==e)throw new Error("The groupId in the folderDefaultValue() can not be empty.");if(!(0,a.Z)())return"";switch(e){case o.Fo:return o.RS;case o.q5:return o.al;case o.wU:return o.qb;default:throw new Error("No default value for '"+e+"' groupId in the folderDefaultValue().")}}function p(e){return e===o.wU}function s(e,l){if(null==l||""===l)return l;var n="$ENV{$1}$2";switch(e){case o.Fo:return k(l).replace(/\$env:(.+?)(\/.*)/,n);case o.q5:return l.replace(/\$(.+?)(\/.*)/,n);default:throw new Error("Unsupported shell type '"+e+"' in the convertToCmakeEnvVariable().")}}function m(e,l,n){if(void 0===n&&(n=!0),null==e||""===e)return e;if(l!==o.Fo)return c(e);var t=c(e);return n?k(t):function(e){return null==e||""===e?e:e.replaceAll(/\/+/g,"\\")}(t)}function c(e){return null==e||""===e?e:e.replace(/[/\\]+$/,"")}function k(e){return null==e||""===e?e:e.replaceAll(/\\+(?! )/g,"/")}},4588:function(e,l,n){n.r(l),n.d(l,{assets:function(){return h},contentTitle:function(){return c},default:function(){return N},frontMatter:function(){return m},metadata:function(){return k},toc:function(){return b}});var t=n(7462),a=n(3366),o=(n(7294),n(3905)),r=n(452),i=n(5162),d=n(5488),u=n(2044),p=n(6005),s=["components"],m={sidebar_position:2,sidebar_label:"Hello world",description:"Hello world example created in the terminal and QtCreator IDE.",keywords:["c++ orm","building","hello world","tinyorm"]},c="Building: Hello world",k={unversionedId:"building/hello-world",id:"building/hello-world",title:"Building: Hello world",description:"Hello world example created in the terminal and QtCreator IDE.",source:"@site/docs/building/hello-world.mdx",sourceDirName:"building",slug:"/building/hello-world",permalink:"/building/hello-world",draft:!1,editUrl:"https://github.com/silverqx/TinyORM-github.io/edit/main/docs/building/hello-world.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Hello world",description:"Hello world example created in the terminal and QtCreator IDE.",keywords:["c++ orm","building","hello world","tinyorm"]},sidebar:"tinyormSidebar",previous:{title:"TinyORM",permalink:"/building/tinyorm"},next:{title:"Migrations",permalink:"/building/migrations"}},h={},b=[{value:"Introduction",id:"introduction",level:2},{value:"Prepare SQLite 3 database",id:"prepare-sqlite-3-database",level:2},{value:"Install dependencies",id:"install-dependencies",level:2},{value:"Using vcpkg.json <small>(manifest mode)</small>",id:"using-vcpkg-json",level:4},{value:"Using vcpkg install <small>(manually)</small>",id:"using-vcpkg-install",level:4},{value:"Source code",id:"source-code",level:2},{value:"Hello world with CMake",id:"hello-world-with-cmake",level:2},{value:"CMake project",id:"cmake-project",level:3},{value:"Build Hello world",id:"build-hello-world-cmake",level:3},{value:"Execute Hello world",id:"execute-hello-world-cmake",level:3},{value:"Hello world with qmake",id:"hello-world-with-qmake",level:2},{value:"qmake project",id:"qmake-project",level:3},{value:"Configure using .qmake.conf",id:"configure-using-qmakeconf",level:4},{value:"Build Hello world",id:"build-hello-world-qmake",level:3},{value:"Execute Hello world",id:"execute-hello-world-qmake",level:3}],g={toc:b};function N(e){var l=e.components,m=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,t.Z)({},g,m,{components:l,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"building-hello-world"},"Building: Hello world"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#prepare-sqlite-3-database"},"Prepare SQLite 3 database")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#install-dependencies"},"Install dependencies"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#using-vcpkg-json"},"Using vcpkg.json")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#using-vcpkg-install"},"Using vcpkg install")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#source-code"},"Source code")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#hello-world-with-cmake"},"Hello world with CMake"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#cmake-project"},"CMake project")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#build-hello-world-cmake"},"Build Hello world")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#execute-hello-world-cmake"},"Execute Hello world")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#hello-world-with-qmake"},"Hello world with qmake"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#qmake-project"},"qmake project")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#build-hello-world-qmake"},"Build Hello world")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#execute-hello-world-qmake"},"Execute Hello world"))))),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"We will try to create the simplest working application in the terminal with the ",(0,o.kt)("inlineCode",{parentName:"p"},"CMake")," and in the ",(0,o.kt)("inlineCode",{parentName:"p"},"QtCreator")," IDE with the ",(0,o.kt)("inlineCode",{parentName:"p"},"qmake"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," example also expects the following ",(0,o.kt)("a",{parentName:"p",href:"/building/tinyorm#folders-structure"},"folders structure"),", let's create them."),(0,o.kt)(d.Z,{groupId:u.IZ,mdxType:"Tabs"},(0,o.kt)(i.Z,{value:u.Fo,label:u.IM,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},"cd "+(0,p.go)(u.Fo)+"\nmkdir HelloWorld/HelloWorld\ncd HelloWorld")),(0,o.kt)(i.Z,{value:u.q5,label:u.C,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},"cd "+(0,p.go)(u.q5)+"\nmkdir -p HelloWorld/HelloWorld\ncd HelloWorld"))),(0,o.kt)("h2",{id:"prepare-sqlite-3-database"},"Prepare SQLite 3 database"),(0,o.kt)("p",null,"Simplest will be to demonstrate the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," example with the ",(0,o.kt)("inlineCode",{parentName:"p"},"SQLite 3")," database."),(0,o.kt)("p",null,"To create and insert two rows into the ",(0,o.kt)("inlineCode",{parentName:"p"},"SQLite 3")," database, execute the following command in the terminal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sqlite3 HelloWorld.sqlite3 \"\ncreate table posts(id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, name VARCHAR NOT NULL);\ninsert into posts values(1, 'First Post');\ninsert into posts values(2, 'Second Post');\nselect * from posts;\"\n")),(0,o.kt)("h2",{id:"install-dependencies"},"Install dependencies"),(0,o.kt)("p",null,"First, install the ",(0,o.kt)("inlineCode",{parentName:"p"},"vcpkg")," package manager as is described ",(0,o.kt)("a",{parentName:"p",href:"/building/tinyorm#vcpkg"},"here"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"range-v3")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"tabulate")," libraries are required dependencies because ",(0,o.kt)("inlineCode",{parentName:"p"},"TinyORM")," uses them in header files, you have to install them before you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"TinyORM"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"tabulate")," library is only needed in the ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," migrations it's used by the ",(0,o.kt)("inlineCode",{parentName:"p"},"migrate:status")," command."),(0,o.kt)("p",null,"There are two ways how to install the ",(0,o.kt)("inlineCode",{parentName:"p"},"range-v3")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"tabulate")," libraries using ",(0,o.kt)("inlineCode",{parentName:"p"},"vcpkg"),"."),(0,o.kt)("h4",{id:"using-vcpkg-json"},"Using vcpkg.json ",(0,o.kt)("small",null,"(manifest mode)")),(0,o.kt)("p",null,"Create a ",(0,o.kt)("inlineCode",{parentName:"p"},"vcpkg.json")," file with the following content. ",(0,o.kt)("inlineCode",{parentName:"p"},"CMake")," example below uses this method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd HelloWorld\nvim vcpkg.json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "https://raw.githubusercontent.com/microsoft/vcpkg/master/scripts/vcpkg.schema.json",\n  "name": "tinyorm-hello-world",\n  "version-semver": "0.1.0",\n  "description": "HelloWorld example with TinyORM library.",\n  "maintainers": "Silver Zachara <silver.zachara@gmail.com>",\n  "supports": "!(uwp | arm | android | emscripten)",\n  "dependencies": [\n    "range-v3",\n    "tabulate"\n  ]\n}\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Only ",(0,o.kt)("inlineCode",{parentName:"p"},"CMake")," via the ",(0,o.kt)("inlineCode",{parentName:"p"},"toolchain file")," supports this method.")),(0,o.kt)("h4",{id:"using-vcpkg-install"},"Using vcpkg install ",(0,o.kt)("small",null,"(manually)")),(0,o.kt)("p",null,"This method can be used with both ",(0,o.kt)("inlineCode",{parentName:"p"},"CMake")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"qmake"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ../../vcpkg\n\nvcpkg search range-v3\nvcpkg search tabulate\nvcpkg install range-v3 tabulate\nvcpkg list\n")),(0,o.kt)("h2",{id:"source-code"},"Source code"),(0,o.kt)("p",null,"Let's start in the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," project folder."),(0,o.kt)(d.Z,{groupId:u.IZ,mdxType:"Tabs"},(0,o.kt)(i.Z,{value:u.Fo,label:u.IM,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},"cd "+(0,p.go)(u.Fo)+"/HelloWorld/HelloWorld")),(0,o.kt)(i.Z,{value:u.q5,label:u.C,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},"cd "+(0,p.go)(u.q5)+"/HelloWorld/HelloWorld"))),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},"main.cpp")," source file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"vim main.cpp\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"To paste a source code correctly in ",(0,o.kt)("inlineCode",{parentName:"p"},"vim"),", press ",(0,o.kt)("kbd",null,"Shift")," + ",(0,o.kt)("kbd",null,"p"),".")),(0,o.kt)("p",null,"And paste the following code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'#include <QDebug>\n\n#ifdef _WIN32\n#  include <qt_windows.h>\n#endif\n\n#include <orm/db.hpp>\n\nusing Orm::DB;\n\nint main(int /*unused*/, char */*unused*/[])\n{\n#ifdef _WIN32\n    SetConsoleOutputCP(CP_UTF8);\n//    SetConsoleOutputCP(1250);\n#endif\n\n    // Ownership of a shared_ptr()\n    auto manager = DB::create({\n        {"driver",   "QSQLITE"},\n        {"database", qEnvironmentVariable("DB_DATABASE", "HelloWorld.sqlite3")},\n        {"check_database_exists", true},\n    });\n\n    auto posts = DB::select("select * from posts");\n\n    while(posts.next())\n        qDebug() << posts.value("id").toULongLong() << posts.value("name").toString();\n}\n')),(0,o.kt)("h2",{id:"hello-world-with-cmake"},"Hello world with CMake"),(0,o.kt)("p",null,"Create a folder for the ",(0,o.kt)("inlineCode",{parentName:"p"},"CMake")," build."),(0,o.kt)(d.Z,{groupId:u.IZ,mdxType:"Tabs"},(0,o.kt)(i.Z,{value:u.Fo,label:u.IM,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},"cd ..\nmkdir HelloWorld-builds-cmake/build-debug\n\ncd HelloWorld-builds-cmake/build-debug")),(0,o.kt)(i.Z,{value:u.q5,label:u.C,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},"cd ..\nmkdir -p HelloWorld-builds-cmake/build-debug\n\ncd HelloWorld-builds-cmake/build-debug"))),(0,o.kt)("h3",{id:"cmake-project"},"CMake project"),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},"CMakeLists.txt")," file with the following content."),(0,o.kt)(d.Z,{groupId:u.IZ,mdxType:"Tabs"},(0,o.kt)(i.Z,{value:u.Fo,label:u.IM,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-cmake",mdxType:"CodeBlock"},'cmake_minimum_required(VERSION VERSION 3.20...3.23 FATAL_ERROR)\n\nproject(HelloWorld LANGUAGES CXX)\n\n# build tree\nlist(APPEND CMAKE_PREFIX_PATH "'+(0,p.we)(u.Fo,(0,p.go)(u.Fo))+'/TinyORM/TinyORM-builds-cmake/build-debug")\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nadd_executable(HelloWorld\n  main.cpp\n)\n\nfind_package(QT NAMES Qt6 Qt5 COMPONENTS Core REQUIRED)\nfind_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)\nfind_package(TinyOrm 0.1.0 CONFIG REQUIRED)\n\ntarget_link_libraries(HelloWorld\n    PRIVATE\n        Qt${QT_VERSION_MAJOR}::Core\n        TinyOrm::TinyOrm\n)')),(0,o.kt)(i.Z,{value:u.q5,label:u.C,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-cmake",mdxType:"CodeBlock"},'cmake_minimum_required(VERSION VERSION 3.20...3.23 FATAL_ERROR)\n\nproject(HelloWorld LANGUAGES CXX)\n\n# build tree\nlist(APPEND CMAKE_PREFIX_PATH "'+(0,p.we)(u.q5,(0,p.go)(u.q5))+'/TinyORM/TinyORM-builds-cmake/build-debug")\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nadd_executable(HelloWorld\n  main.cpp\n)\n\nfind_package(QT NAMES Qt6 Qt5 COMPONENTS Core REQUIRED)\nfind_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)\nfind_package(TinyOrm 0.1.0 CONFIG REQUIRED)\n\ntarget_link_libraries(HelloWorld\n    PRIVATE\n        Qt${QT_VERSION_MAJOR}::Core\n        TinyOrm::TinyOrm\n)'))),(0,o.kt)("h3",{id:"build-hello-world-cmake"},"Build Hello world"),(0,o.kt)("p",null,"Now you are ready to configure ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," ",(0,o.kt)("inlineCode",{parentName:"p"},"CMake")," application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ../HelloWorld-builds-cmake/build-debug\n")),(0,o.kt)(d.Z,{groupId:u.IZ,mdxType:"Tabs"},(0,o.kt)(i.Z,{value:u.Fo,label:u.IM,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},'cmake.exe `\n-S "'+(0,p.go)(u.Fo)+'/HelloWorld/HelloWorld" `\n-B "'+(0,p.go)(u.Fo)+"/HelloWorld/HelloWorld-builds-cmake/build-debug\" `\n-G 'Ninja' `\n-D CMAKE_BUILD_TYPE:STRING='Debug' `\n-D CMAKE_TOOLCHAIN_FILE:FILEPATH=\""+(0,p.EA)(u.Fo)+'/vcpkg/scripts/buildsystems/vcpkg.cmake" `\n-D CMAKE_INSTALL_PREFIX:PATH="'+(0,p.EA)(u.Fo)+'/tmp/HelloWorld"')),(0,o.kt)(i.Z,{value:u.q5,label:u.C,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'cmake \\\n-S "'+(0,p.go)(u.q5)+'/HelloWorld/HelloWorld" \\\n-B "'+(0,p.go)(u.q5)+"/HelloWorld/HelloWorld-builds-cmake/build-debug\" \\\n-G 'Ninja' \\\n-D CMAKE_BUILD_TYPE:STRING='Debug' \\\n-D CMAKE_TOOLCHAIN_FILE:FILEPATH=\""+(0,p.EA)(u.q5)+'/vcpkg/scripts/buildsystems/vcpkg.cmake" \\\n-D CMAKE_INSTALL_PREFIX:PATH="'+(0,p.EA)(u.q5)+'/tmp/TinyORM"'))),(0,o.kt)("p",null,"And build."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cmake --build . --target all\n")),(0,o.kt)("h3",{id:"execute-hello-world-cmake"},"Execute Hello world"),(0,o.kt)("p",null,"Do not forget to add ",(0,o.kt)("inlineCode",{parentName:"p"},"TinyOrm0d.dll")," on the path on Windows and on the ",(0,o.kt)("inlineCode",{parentName:"p"},"LD_LIBRARY_PATH")," on Linux, so ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," application can find it during execution, as is described ",(0,o.kt)("a",{parentName:"p",href:"/building/tinyorm#tinyorm-on-path-cmake"},"here"),"."),(0,o.kt)(d.Z,{groupId:u.IZ,name:"tinyorm-on-path",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:u.Fo,label:u.IM,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},'$env:Path = "'+(0,p.go)(u.Fo,!1)+'\\TinyORM\\TinyORM-builds-cmake\\build-debug;" + $env:Path')),(0,o.kt)(i.Z,{value:u.q5,label:u.C,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},"export LD_LIBRARY_PATH="+(0,p.go)(u.q5)+"/TinyORM/TinyORM-builds-cmake/build-debug${PATH:+:}$PATH"))),(0,o.kt)("p",null,"Create a symbolic link to the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld.sqlite3")," database inside the build folder. If you do not have enabled symbolic links without ",(0,o.kt)("inlineCode",{parentName:"p"},"Administrator")," rights on your ",(0,o.kt)("inlineCode",{parentName:"p"},"Windows"),", you can just simply copy the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld.sqlite3")," database or ",(0,o.kt)("a",{parentName:"p",href:"/building/tinyorm#allow-symbolic-links-unprivileged"},(0,o.kt)("inlineCode",{parentName:"a"},"Allow symbolic links unprivileged")),"."),(0,o.kt)(d.Z,{groupId:u.IZ,name:"tinyorm-on-path",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:u.Fo,label:u.IM,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-powershell"},"New-Item -ItemType SymbolicLink -Target ../../HelloWorld.sqlite3 -Name HelloWorld.sqlite3\n# Or simply copy\nCopy-Item ../../HelloWorld.sqlite3 .\n"))),(0,o.kt)(i.Z,{value:u.q5,label:u.C,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ln -s ../../HelloWorld.sqlite3 .\n")))),(0,o.kt)("p",null,"Execute ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," example."),(0,o.kt)(d.Z,{groupId:u.IZ,mdxType:"Tabs"},(0,o.kt)(i.Z,{value:u.Fo,label:u.IM,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-powershell"},".\\HelloWorld.exe\n"))),(0,o.kt)(i.Z,{value:u.q5,label:u.C,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./HelloWorld\n")))),(0,o.kt)("p",null,"The output will look like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-less"},'Executed prepared query (6ms, -1 results, 0 affected, tinyorm_default) : select * from posts\n1 "First Post"\n2 "Second Post"\n')),(0,o.kt)("h2",{id:"hello-world-with-qmake"},"Hello world with qmake"),(0,o.kt)("p",null,"Create a folder for the ",(0,o.kt)("inlineCode",{parentName:"p"},"qmake")," build."),(0,o.kt)(d.Z,{groupId:u.IZ,mdxType:"Tabs"},(0,o.kt)(i.Z,{value:u.Fo,label:u.IM,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},"cd "+(0,p.go)(u.Fo)+"/HelloWorld\n\nmkdir HelloWorld-builds-qmake")),(0,o.kt)(i.Z,{value:u.q5,label:u.C,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},"cd "+(0,p.go)(u.q5)+"/HelloWorld\n\nmkdir HelloWorld-builds-qmake"))),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"#source-code"},(0,o.kt)("inlineCode",{parentName:"a"},"source code"))," is the same as for the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld CMake")," example."),(0,o.kt)("h3",{id:"qmake-project"},"qmake project"),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld.pro")," qmake file with the following content."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd HelloWorld\nvim HelloWorld.pro\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"To paste a source code correctly in ",(0,o.kt)("inlineCode",{parentName:"p"},"vim"),", press ",(0,o.kt)("kbd",null,"Shift")," + ",(0,o.kt)("kbd",null,"p"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-qmake"},"QT *= core sql\nQT -= gui\n\nTEMPLATE = app\n\nSOURCES += $$PWD/main.cpp\n\n# Configure TinyORM library\ninclude($$TINY_MAIN_DIR/TinyORM/qmake/TinyOrm.pri)\n\n# vcpkg - range-v3\nwin32-msvc: \\\n    INCLUDEPATH += $$quote($$TINY_VCPKG_INSTALLED/x64-windows/include/)\nmingw: \\\n    QMAKE_CXXFLAGS += -isystem $$shell_quote($$TINY_VCPKG_INSTALLED/x64-mingw-dynamic/include/)\nunix:!macx: \\\n    QMAKE_CXXFLAGS += -isystem $$shell_quote($$TINY_VCPKG_INSTALLED/x64-linux/include/)\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The exact ",(0,o.kt)("a",{parentName:"p",href:"/building/tinyorm#folders-structure"},"folders structure")," is crucial in this example because the paths to the ",(0,o.kt)("inlineCode",{parentName:"p"},"TinyORM")," source and build folders are relative.")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"On Linux ",(0,o.kt)("inlineCode",{parentName:"p"},"-isystem")," marks the directory as a system directory, it prevents warnings."),(0,o.kt)("p",{parentName:"admonition"},"On Windows you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"QMAKE_CXXFLAGS_WARN_ON = -external:anglebrackets -external:W0"),", it applies a warning level 0 to the angel bracket includes; ",(0,o.kt)("inlineCode",{parentName:"p"},"#include <file>"),".")),(0,o.kt)("h4",{id:"configure-using-qmakeconf"},"Configure using .qmake.conf"),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},".qmake.conf")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," project root folder with the following content."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-qmake"},"TINY_MAIN_DIR = $$clean_path($$PWD/../../TinyORM)\n# Name of this qmake variable is crucial\nTINYORM_BUILD_TREE = $$quote($$TINY_MAIN_DIR/TinyOrm-builds-qmake/build-TinyOrm-Desktop_Qt_6_3_1_MSVC2019_64bit-Debug)\n# vcpkg - range-v3\nTINY_VCPKG_INSTALLED = $$clean_path($$PWD/../../../vcpkg/installed)\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Configuring with the ",(0,o.kt)("inlineCode",{parentName:"p"},".qmake.conf")," file has one big advantage that is that you do not have to modify the project files.")),(0,o.kt)("h3",{id:"build-hello-world-qmake"},"Build Hello world"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"I recommend creating a new ",(0,o.kt)("inlineCode",{parentName:"p"},"Session")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"QtCreator IDE")," as is described ",(0,o.kt)("a",{parentName:"p",href:"/building/tinyorm#open-qtcreator-ide"},"here"),".")),(0,o.kt)("p",null,"Now you can open the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld.pro")," project in the ",(0,o.kt)("inlineCode",{parentName:"p"},"QtCreator IDE"),"."),(0,o.kt)("p",null,"This will open the ",(0,o.kt)("inlineCode",{parentName:"p"},"Configure Project")," tab, select some kit and update build folder paths to meet our ",(0,o.kt)("a",{parentName:"p",href:"/building/tinyorm#folders-structure"},"folders structure")," or like you want."),(0,o.kt)("img",{src:n(1465).Z,alt:"HelloWorld - QtCreator - Configure Project",width:"760"}),(0,o.kt)("p",null,"You are ready to configure build options, hit ",(0,o.kt)("kbd",null,"Ctrl"),"+",(0,o.kt)("kbd",null,"5")," to open ",(0,o.kt)("inlineCode",{parentName:"p"},"Project Settings")," tab and select ",(0,o.kt)("inlineCode",{parentName:"p"},"Build")," in the left sidebar to open the ",(0,o.kt)("inlineCode",{parentName:"p"},"Build Settings"),", it should look similar to the following picture."),(0,o.kt)("img",{src:n(6511).Z,className:"no-blurry",alt:"HelloWorld - QtCreator - Build Settings",width:"760"}),(0,o.kt)("p",null,"Disable ",(0,o.kt)("inlineCode",{parentName:"p"},"QML debugging and profiling")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Qt Quick Compiler"),", they are not used."),(0,o.kt)("p",null,"In the left sidebar open ",(0,o.kt)("inlineCode",{parentName:"p"},"Dependencies")," and check ",(0,o.kt)("inlineCode",{parentName:"p"},"TinyOrm")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Synchronize configuration"),", this setting ensures that the current project will be rebuilt correctly when the ",(0,o.kt)("inlineCode",{parentName:"p"},"TinyORM")," library source code changes."),(0,o.kt)("p",null,"Everything is ready to build, you can press ",(0,o.kt)("kbd",null,"Ctrl"),"+",(0,o.kt)("kbd",null,"b")," to build the project."),(0,o.kt)("h3",{id:"execute-hello-world-qmake"},"Execute Hello world"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"QtCreator")," takes care about all the necessary configuration, sets up the build environment correctly and also prepends dependency libraries on the path on Windows and on the ",(0,o.kt)("inlineCode",{parentName:"p"},"LD_LIBRARY_PATH")," on Linux."),(0,o.kt)("p",null,"Only one thing you might want to change is to run the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," example in the new terminal window. To do so, hit ",(0,o.kt)("kbd",null,"Ctrl"),"+",(0,o.kt)("kbd",null,"5")," to open the ",(0,o.kt)("inlineCode",{parentName:"p"},"Project Settings")," tab and select ",(0,o.kt)("inlineCode",{parentName:"p"},"Run")," in the left sidebar to open the ",(0,o.kt)("inlineCode",{parentName:"p"},"Run Settings"),", then in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Run")," section select the ",(0,o.kt)("inlineCode",{parentName:"p"},"Run in terminal")," checkbox."),(0,o.kt)("p",null,"Create a symbolic link to the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld.sqlite3")," database inside the build folder. If you do not have enabled symbolic links without ",(0,o.kt)("inlineCode",{parentName:"p"},"Administrator")," rights on your ",(0,o.kt)("inlineCode",{parentName:"p"},"Windows"),", you can just simply copy the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld.sqlite3")," database or ",(0,o.kt)("a",{parentName:"p",href:"/building/tinyorm#allow-symbolic-links-unprivileged"},(0,o.kt)("inlineCode",{parentName:"a"},"Allow symbolic links unprivileged")),"."),(0,o.kt)(d.Z,{groupId:u.IZ,name:"tinyorm-on-path",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:u.Fo,label:u.IM,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-powershell"},"cd ../HelloWorld-builds-qmake/build-HelloWorld-Desktop_Qt_5_15_2_MSVC2019_64bit-Debug\n\nNew-Item -ItemType SymbolicLink -Target ../../HelloWorld.sqlite3 -Name HelloWorld.sqlite3\n# Or simply copy\nCopy-Item ../../HelloWorld.sqlite3 .\n"))),(0,o.kt)(i.Z,{value:u.q5,label:u.C,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ../HelloWorld-builds-qmake/build-HelloWorld-Desktop_Qt_5_15_2_GCC_64bit-Debug\n\nln -s ../../HelloWorld.sqlite3 .\n")))),(0,o.kt)("p",null,"To execute the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," example press ",(0,o.kt)("kbd",null,"Ctrl")," + ",(0,o.kt)("kbd",null,"r"),"."),(0,o.kt)("p",null,"The output will look like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-less"},'Executed prepared query (6ms, -1 results, 0 affected, tinyorm_default) : select * from posts\n1 "First Post"\n2 "Second Post"\n')))}N.isMDXComponent=!0},6511:function(e,l,n){l.Z=n.p+"assets/images/qmake-build_settings-e88e3fd0ef7457887c24004628a7c253.png"},1465:function(e,l,n){l.Z=n.p+"assets/images/qmake-configure_project-7aea3b08d102839d858f5a1b4a22d55b.png"}}]);