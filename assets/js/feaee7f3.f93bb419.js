"use strict";(self.webpackChunktinyorm_org=self.webpackChunktinyorm_org||[]).push([[168],{5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),l=n(6010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(o.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>f});var a=n(7462),l=n(7294),o=n(6010),i=n(2466),r=n(6550),d=n(1980),p=n(7392),s=n(12);function u(e){return function(e){return l.Children.map(e,(e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:l}}=e;return{value:t,label:n,attributes:a,default:l}}))}function c(e){const{values:t,children:n}=e;return(0,l.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function k(e){let{queryString:t=!1,groupId:n}=e;const a=(0,r.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,d._X)(o),(0,l.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=c(e),[i,r]=(0,l.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[d,p]=k({queryString:n,groupId:a}),[u,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,s.Nk)(n);return[a,(0,l.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),g=(()=>{const e=d??u;return m({value:e,tabValues:o})?e:null})();(0,l.useLayoutEffect)((()=>{g&&r(g)}),[g]);return{selectedValue:i,selectValue:(0,l.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);r(e),p(e),h(e)}),[p,h,o]),tabValues:o}}var g=n(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function N(e){let{className:t,block:n,selectedValue:r,selectValue:d,tabValues:p}=e;const s=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),c=e=>{const t=e.currentTarget,n=s.indexOf(t),a=p[n].value;a!==r&&(u(t),d(a))},m=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=s.indexOf(e.currentTarget)+1;t=s[n]??s[0];break}case"ArrowLeft":{const n=s.indexOf(e.currentTarget)-1;t=s[n]??s[s.length-1];break}}t?.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:i}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,key:t,ref:e=>s.push(e),onKeyDown:m,onClick:c},i,{className:(0,o.Z)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":r===t})}),n??t)})))}function T(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function C(e){const t=h(e);return l.createElement("div",{className:(0,o.Z)("tabs-container",b.tabList)},l.createElement(N,(0,a.Z)({},e,t)),l.createElement(T,(0,a.Z)({},e,t)))}function f(e){const t=(0,g.Z)();return l.createElement(C,(0,a.Z)({key:String(t)},e))}},2044:(e,t,n)=>{n.d(t,{$t:()=>u,Ae:()=>g,C:()=>k,DK:()=>b,Fo:()=>r,Fs:()=>l,IM:()=>h,IZ:()=>a,RS:()=>_,VE:()=>N,Wg:()=>C,_A:()=>p,al:()=>y,jk:()=>m,js:()=>d,of:()=>s,q5:()=>i,qb:()=>f,vk:()=>c,wU:()=>o,zg:()=>T});const a="shell",l="database",o="application",i="bash",r="pwsh",d="zsh",p="maria",s="mysql",u="postgres",c="sqlite",m="application",k="bash",h="pwsh",g="zsh",b="MariaDB",N="MySQL",T="PostgreSQL",C="SQLite",f="tinyorm.org",y="$HOME/Code/c/",_="$env:USERPROFILE\\Code\\c\\"},4355:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),l=n(9482);function o(){const e=(0,a.useContext)(l.Z);if(null!=e)return e;throw new Error("useRootFolderContext is used outside of Layout component.")}},6005:(e,t,n)=>{n.d(t,{AE:()=>r,EA:()=>i,em:()=>p,go:()=>d,mT:()=>s,we:()=>u});var a=n(4355),l=n(2389),o=n(2044);const i=function(e,t){return void 0===t&&(t=!0),c((0,a.Z)().rootFolder[e]??p(e),e,t)},r=()=>(0,a.Z)().rootFolder[o.wU]??p(o.wU),d=function(e,t){if(void 0===t&&(t=!0),null==e)throw new Error("The groupId in the applicationFolderPath() can not be empty.");const n=t||e!==o.Fo?"/":"\\";return c(i(e)+n+r(),e,t)};function p(e){if(null==e)throw new Error("The groupId in the folderDefaultValue() can not be empty.");if(!(0,l.Z)())return"";switch(e){case o.Fo:return o.RS;case o.q5:return o.al;case o.wU:return o.qb;default:throw new Error(`No default value for '${e}' groupId in the folderDefaultValue().`)}}function s(e){return e===o.wU}function u(e,t){if(null==t||""===t)return t;const n="$ENV{$1}$2";switch(e){case o.Fo:return k(t).replace(/\$env:(.+?)(\/.*)/,n);case o.q5:return t.replace(/\$(.+?)(\/.*)/,n);default:throw new Error(`Unsupported shell type '${e}' in the convertToCmakeEnvVariable().`)}}function c(e,t,n){if(void 0===n&&(n=!0),null==e||""===e)return e;if(t!==o.Fo)return m(e);const a=m(e);return n?k(a):function(e){return null==e||""===e?e:e.replaceAll(/\/+/g,"\\")}(a)}function m(e){return null==e||""===e?e:e.replace(/[/\\]+$/,"")}function k(e){return null==e||""===e?e:e.replaceAll(/\\+(?! )/g,"/")}},4588:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>u,default:()=>b,frontMatter:()=>s,metadata:()=>c,toc:()=>k});var a=n(7462),l=(n(7294),n(3905)),o=n(7693),i=n(5162),r=n(4866),d=n(2044),p=n(6005);const s={sidebar_position:2,sidebar_label:"Hello world",description:"Hello world example created in the terminal and QtCreator IDE.",keywords:["c++ orm","building","hello world","tinyorm"]},u="Building: Hello world",c={unversionedId:"building/hello-world",id:"building/hello-world",title:"Building: Hello world",description:"Hello world example created in the terminal and QtCreator IDE.",source:"@site/docs/building/hello-world.mdx",sourceDirName:"building",slug:"/building/hello-world",permalink:"/building/hello-world",draft:!1,editUrl:"https://github.com/silverqx/TinyORM-github.io/edit/main/docs/building/hello-world.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Hello world",description:"Hello world example created in the terminal and QtCreator IDE.",keywords:["c++ orm","building","hello world","tinyorm"]},sidebar:"tinyormSidebar",previous:{title:"TinyORM",permalink:"/building/tinyorm"},next:{title:"Migrations",permalink:"/building/migrations"}},m={},k=[{value:"Introduction",id:"introduction",level:2},{value:"Prepare SQLite 3 database",id:"prepare-sqlite-3-database",level:2},{value:"Install dependencies",id:"install-dependencies",level:2},{value:"Using vcpkg.json <small>(manifest mode)</small>",id:"using-vcpkg-json-manifest-mode",level:4},{value:"Using vcpkg install <small>(manually)</small>",id:"using-vcpkg-install-manually",level:4},{value:"Source code",id:"source-code",level:2},{value:"Hello world with CMake",id:"hello-world-with-cmake",level:2},{value:"CMake project",id:"cmake-project",level:3},{value:"FetchContent",id:"fetchcontent",level:3},{value:"How FetchContent module works",id:"how-fetchcontent-module-works",level:4},{value:"Build Hello world",id:"build-hello-world-cmake",level:3},{value:"Execute Hello world",id:"execute-hello-world-cmake",level:3},{value:"Hello world with qmake",id:"hello-world-with-qmake",level:2},{value:"qmake project",id:"qmake-project",level:3},{value:"<code>Auto-configure</code> using <code>.qmake.conf</code> and <code>.env</code>",id:"auto-configure-using-qmake_conf-and-env",level:4},{value:"Build Hello world",id:"build-hello-world-qmake",level:3},{value:"Execute Hello world",id:"execute-hello-world-qmake",level:3}],h={toc:k},g="wrapper";function b(e){let{components:t,...s}=e;return(0,l.kt)(g,(0,a.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"building-hello-world"},"Building: Hello world"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#prepare-sqlite-3-database"},"Prepare SQLite 3 database")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#install-dependencies"},"Install dependencies"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#using-vcpkg-json-manifest-mode"},"Using vcpkg.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#using-vcpkg-install-manually"},"Using vcpkg install")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#source-code"},"Source code")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#hello-world-with-cmake"},"Hello world with CMake"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#cmake-project"},"CMake project")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#fetchcontent"},"FetchContent")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#build-hello-world-cmake"},"Build Hello world")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#execute-hello-world-cmake"},"Execute Hello world")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#hello-world-with-qmake"},"Hello world with qmake"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#qmake-project"},"qmake project")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#build-hello-world-qmake"},"Build Hello world")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#execute-hello-world-qmake"},"Execute Hello world"))))),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"We will try to create the simplest working console application, in the terminal with the ",(0,l.kt)("inlineCode",{parentName:"p"},"CMake")," and in the ",(0,l.kt)("inlineCode",{parentName:"p"},"QtCreator IDE")," with the ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," build systems."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"HelloWorld")," example also expects the following ",(0,l.kt)("a",{parentName:"p",href:"/building/tinyorm#folders-structure"},"folders structure"),", let's create them."),(0,l.kt)(r.Z,{groupId:d.IZ,mdxType:"Tabs"},(0,l.kt)(i.Z,{value:d.Fo,label:d.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},`cd ${(0,p.go)(d.Fo)}\nmkdir HelloWorld/HelloWorld\ncd HelloWorld`)),(0,l.kt)(i.Z,{value:d.q5,label:d.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},`cd ${(0,p.go)(d.q5)}\nmkdir -p HelloWorld/HelloWorld\ncd HelloWorld`))),(0,l.kt)("h2",{id:"prepare-sqlite-3-database"},"Prepare SQLite 3 database"),(0,l.kt)("p",null,"The easiest way to demonstrate the ",(0,l.kt)("inlineCode",{parentName:"p"},"HelloWorld")," example will be with a ",(0,l.kt)("inlineCode",{parentName:"p"},"SQLite 3")," database."),(0,l.kt)("p",null,"Execute the following command in the terminal to create and insert two rows into the ",(0,l.kt)("inlineCode",{parentName:"p"},"SQLite 3")," database."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sqlite3 HelloWorld.sqlite3 \"\ncreate table posts(id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, name VARCHAR NOT NULL);\ninsert into posts values(1, 'First Post');\ninsert into posts values(2, 'Second Post');\nselect * from posts;\"\n")),(0,l.kt)("h2",{id:"install-dependencies"},"Install dependencies"),(0,l.kt)("p",null,"First, install the ",(0,l.kt)("inlineCode",{parentName:"p"},"vcpkg")," package manager as is described ",(0,l.kt)("a",{parentName:"p",href:"/building/tinyorm#vcpkg"},"here"),"."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"range-v3")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"tabulate")," libraries are required dependencies because ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," uses them in header files, you have to install them before you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM"),". The ",(0,l.kt)("inlineCode",{parentName:"p"},"tabulate")," library is only needed in the ",(0,l.kt)("inlineCode",{parentName:"p"},"tom")," migrations it's used by the ",(0,l.kt)("inlineCode",{parentName:"p"},"migrate:status")," command."),(0,l.kt)("p",null,"There are two ways how to install the ",(0,l.kt)("inlineCode",{parentName:"p"},"range-v3")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"tabulate")," libraries using ",(0,l.kt)("inlineCode",{parentName:"p"},"vcpkg"),"."),(0,l.kt)("h4",{id:"using-vcpkg-json-manifest-mode"},"Using vcpkg.json ",(0,l.kt)("small",null,"(manifest mode)")),(0,l.kt)("p",null,"Create a ",(0,l.kt)("inlineCode",{parentName:"p"},"vcpkg.json")," file with the following content. ",(0,l.kt)("inlineCode",{parentName:"p"},"CMake")," example below uses this method."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd HelloWorld\nvim vcpkg.json\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:"title='vcpkg.json'",title:"'vcpkg.json'"},'{\n  "$schema": "https://raw.githubusercontent.com/microsoft/vcpkg-tool/main/docs/vcpkg.schema.json",\n  "name": "tinyorm-helloworld",\n  "version-semver": "0.1.0",\n  "description": "Hello world console application for TinyORM C++ library",\n  "homepage": "https://github.com/silverqx/TinyORM",\n  "documentation": "https://www.tinyorm.org/building/hello-world",\n  "maintainers": "Silver Zachara <silver.zachara@gmail.com>",\n  "supports": "!(uwp | arm | android | emscripten | osx | ios | xbox | freebsd | openbsd | wasm32)",\n  "dependencies": [\n    "range-v3",\n    "tabulate"\n  ]\n}\n')),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Only ",(0,l.kt)("inlineCode",{parentName:"p"},"CMake")," via the ",(0,l.kt)("inlineCode",{parentName:"p"},"toolchain file")," supports this method.")),(0,l.kt)("h4",{id:"using-vcpkg-install-manually"},"Using vcpkg install ",(0,l.kt)("small",null,"(manually)")),(0,l.kt)("p",null,"This method can be used with both ",(0,l.kt)("inlineCode",{parentName:"p"},"CMake")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd ../../vcpkg\n\nvcpkg search range-v3\nvcpkg search tabulate\nvcpkg install range-v3 tabulate\nvcpkg list\n")),(0,l.kt)("h2",{id:"source-code"},"Source code"),(0,l.kt)("p",null,"Let's start in the ",(0,l.kt)("inlineCode",{parentName:"p"},"HelloWorld")," project folder."),(0,l.kt)(r.Z,{groupId:d.IZ,mdxType:"Tabs"},(0,l.kt)(i.Z,{value:d.Fo,label:d.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},`cd ${(0,p.go)(d.Fo)}/HelloWorld/HelloWorld`)),(0,l.kt)(i.Z,{value:d.q5,label:d.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},`cd ${(0,p.go)(d.q5)}/HelloWorld/HelloWorld`))),(0,l.kt)("p",null,"Create ",(0,l.kt)("inlineCode",{parentName:"p"},"main.cpp")," source file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"vim main.cpp\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"To paste a source code correctly in ",(0,l.kt)("inlineCode",{parentName:"p"},"vim"),", press ",(0,l.kt)("kbd",null,"Shift")," + ",(0,l.kt)("kbd",null,"p"),".")),(0,l.kt)("p",null,"And paste the following code."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='main.cpp'",title:"'main.cpp'"},'#include <QCoreApplication>\n#include <QDebug>\n\n#ifdef _WIN32\n#  include <qt_windows.h>\n#endif\n\n#include <orm/db.hpp>\n\nusing Orm::DB;\n\nint main(int argc, char *argv[])\n{\n#ifdef _WIN32\n    SetConsoleOutputCP(CP_UTF8);\n//    SetConsoleOutputCP(1250);\n#endif\n\n    /* Needed from Qt v6.5.3 to avoid:\n       qt.core.qobject.connect: QObject::connect(QObject, Unknown): invalid nullptr parameter */\n    QCoreApplication app(argc, argv);\n\n    // Ownership of a shared_ptr()\n    auto manager = DB::create({\n        {"driver",   "QSQLITE"},\n        {"database", qEnvironmentVariable("TINYORM_HELLOWORLD_DB_SQLITE_DATABASE",\n                                          "../../HelloWorld.sqlite3")},\n        {"check_database_exists", true},\n    });\n\n    auto posts = DB::select("select * from posts");\n\n    while(posts.next())\n        qDebug() << posts.value("id").toULongLong()\n                 << posts.value("name").toString();\n}\n')),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"QSqlDatabase")," depends on ",(0,l.kt)("inlineCode",{parentName:"p"},"QCoreApplication")," from ",(0,l.kt)("inlineCode",{parentName:"p"},"Qt v6.5.3")," so you must create the ",(0,l.kt)("inlineCode",{parentName:"p"},"QCoreApplication")," instance before you will call anything from the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library. \ud83e\udee4 The change was made ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/qt/qtbase/commit/8d2bdc9cd5482eace12ba7e45304857bd24db0e6#diff-1d355c25c0b0eddec2be48253407780c4dc510d986739aec61e1ec892ccaf86e"},"here"),".")),(0,l.kt)("h2",{id:"hello-world-with-cmake"},"Hello world with CMake"),(0,l.kt)("p",null,"Create a folder for the ",(0,l.kt)("inlineCode",{parentName:"p"},"CMake")," build."),(0,l.kt)(r.Z,{groupId:d.IZ,mdxType:"Tabs"},(0,l.kt)(i.Z,{value:d.Fo,label:d.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},"cd ..\nmkdir HelloWorld-builds-cmake/build-debug\n\ncd HelloWorld")),(0,l.kt)(i.Z,{value:d.q5,label:d.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},"cd ..\nmkdir -p HelloWorld-builds-cmake/build-debug\n\ncd HelloWorld"))),(0,l.kt)("h3",{id:"cmake-project"},"CMake project"),(0,l.kt)("p",null,"Create ",(0,l.kt)("inlineCode",{parentName:"p"},"CMakeLists.txt")," file with the following content."),(0,l.kt)(r.Z,{groupId:d.IZ,mdxType:"Tabs"},(0,l.kt)(i.Z,{value:d.Fo,label:d.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-cmake",mdxType:"CodeBlock"},`cmake_minimum_required(VERSION VERSION 3.22...3.28 FATAL_ERROR)\n\nproject(HelloWorld LANGUAGES CXX)\n\n# build tree\nlist(APPEND CMAKE_PREFIX_PATH "${(0,p.we)(d.Fo,(0,p.go)(d.Fo))}/TinyORM/TinyORM-builds-cmake/build-debug")\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nadd_executable(HelloWorld\n  main.cpp\n)\n\nfind_package(QT NAMES Qt6 Qt5 COMPONENTS Core REQUIRED)\nfind_package(Qt\${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)\nfind_package(TinyOrm 0.36.5 CONFIG REQUIRED)\n\ntarget_link_libraries(HelloWorld\n    PRIVATE\n        Qt\${QT_VERSION_MAJOR}::Core\n        TinyOrm::TinyOrm\n)`)),(0,l.kt)(i.Z,{value:d.q5,label:d.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-cmake",mdxType:"CodeBlock"},`cmake_minimum_required(VERSION VERSION 3.22...3.28 FATAL_ERROR)\n\nproject(HelloWorld LANGUAGES CXX)\n\n# build tree\nlist(APPEND CMAKE_PREFIX_PATH "${(0,p.we)(d.q5,(0,p.go)(d.q5))}/TinyORM/TinyORM-builds-cmake/build-debug")\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nadd_executable(HelloWorld\n  main.cpp\n)\n\nfind_package(QT NAMES Qt6 Qt5 COMPONENTS Core REQUIRED)\nfind_package(Qt\${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)\nfind_package(TinyOrm 0.36.5 CONFIG REQUIRED)\n\ntarget_link_libraries(HelloWorld\n    PRIVATE\n        Qt\${QT_VERSION_MAJOR}::Core\n        TinyOrm::TinyOrm\n)`))),(0,l.kt)("h3",{id:"fetchcontent"},"FetchContent"),(0,l.kt)("p",null,"If you don't have cloned and built the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library, or you want to quickly try TinyORM without wasting time with cloning and building the TinyORM library, then you can use CMake's ",(0,l.kt)("a",{parentName:"p",href:"https://cmake.org/cmake/help/latest/module/FetchContent.html"},(0,l.kt)("inlineCode",{parentName:"a"},"FetchContent"))," module that will do all of this for you."),(0,l.kt)("p",null,"Instead of providing a path by the ",(0,l.kt)("inlineCode",{parentName:"p"},"CMAKE_PREFIX_PATH")," (or using the ",(0,l.kt)("inlineCode",{parentName:"p"},"User Package Registry"),") like in the example below:"),(0,l.kt)(r.Z,{groupId:d.IZ,mdxType:"Tabs"},(0,l.kt)(i.Z,{value:d.Fo,label:d.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-cmake",mdxType:"CodeBlock"},`# build tree\nlist(APPEND CMAKE_PREFIX_PATH "${(0,p.we)(d.Fo,(0,p.go)(d.Fo))}/TinyORM/TinyORM-builds-cmake/build-debug")`)),(0,l.kt)(i.Z,{value:d.q5,label:d.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-cmake",mdxType:"CodeBlock"},`# build tree\nlist(APPEND CMAKE_PREFIX_PATH "${(0,p.we)(d.q5,(0,p.go)(d.q5))}/TinyORM/TinyORM-builds-cmake/build-debug")`))),(0,l.kt)("p",null,"You can use the ",(0,l.kt)("a",{parentName:"p",href:"https://cmake.org/cmake/help/latest/module/FetchContent.html"},(0,l.kt)("inlineCode",{parentName:"a"},"FetchContent"))," module like in the following example."),(0,l.kt)(r.Z,{groupId:d.IZ,mdxType:"Tabs"},(0,l.kt)(i.Z,{value:d.Fo,label:d.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-cmake",mdxType:"CodeBlock"},"cmake_minimum_required(VERSION VERSION 3.22...3.28 FATAL_ERROR)\n\nproject(HelloWorld LANGUAGES CXX)\n\n# FetchContent method\ninclude(FetchContent)\nFetchContent_Declare(TinyOrm\n    GIT_REPOSITORY https://github.com/silverqx/TinyORM.git\n    GIT_TAG        origin/main\n    OVERRIDE_FIND_PACKAGE\n)\n# Here you can configure TinyORM CMake options\nset(MYSQL_PING OFF)\nset(TOM_EXAMPLE ON)\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nadd_executable(HelloWorld\n  main.cpp\n)\n\nfind_package(QT NAMES Qt6 Qt5 COMPONENTS Core REQUIRED)\nfind_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)\nfind_package(TinyOrm 0.36.5 CONFIG REQUIRED)\n\ntarget_link_libraries(HelloWorld\n    PRIVATE\n        Qt${QT_VERSION_MAJOR}::Core\n        TinyOrm::TinyOrm\n)")),(0,l.kt)(i.Z,{value:d.q5,label:d.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-cmake",mdxType:"CodeBlock"},'cmake_minimum_required(VERSION VERSION 3.22...3.28 FATAL_ERROR)\n\nproject(HelloWorld LANGUAGES CXX)\n\n# FetchContent method\ninclude(FetchContent)\nFetchContent_Declare(TinyORM\n    GIT_REPOSITORY https://github.com/silverqx/TinyORM.git\n    GIT_TAG        origin/main\n    OVERRIDE_FIND_PACKAGE\n)\n# Here you can configure TinyORM CMake options\nset(MYSQL_PING OFF)\nset(TOM_EXAMPLE ON)\n\nTinyORM-builds-cmake/build-debug")\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nadd_executable(HelloWorld\n  main.cpp\n)\n\nfind_package(QT NAMES Qt6 Qt5 COMPONENTS Core REQUIRED)\nfind_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)\nfind_package(TinyOrm 0.36.5 CONFIG REQUIRED)\n\ntarget_link_libraries(HelloWorld\n    PRIVATE\n        Qt${QT_VERSION_MAJOR}::Core\n        TinyOrm::TinyOrm\n)'))),(0,l.kt)("h4",{id:"how-fetchcontent-module-works"},"How FetchContent module works"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"FetchContent_Declare")," command is like calling the git clone inside the build folder and then adding a cloned folder in a similar way as the ",(0,l.kt)("inlineCode",{parentName:"p"},"add_subdirectory(<cloned_folder>)")," command does."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"FetchContent_MakeAvailable(<package>)")," internally calls the ",(0,l.kt)("inlineCode",{parentName:"p"},"find_package(<package>)")," command or if you pass the ",(0,l.kt)("inlineCode",{parentName:"p"},"OVERRIDE_FIND_PACKAGE")," argument, then you don't have to call the the ",(0,l.kt)("inlineCode",{parentName:"p"},"FetchContent_MakeAvailable"),", but you must call the ",(0,l.kt)("inlineCode",{parentName:"p"},"find_package(<package> x.y.z CONFIG REQUIRED)")," command manually."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"An advantage of the ",(0,l.kt)("inlineCode",{parentName:"p"},"OVERRIDE_FIND_PACKAGE")," argument is that you can call the ",(0,l.kt)("inlineCode",{parentName:"p"},"find_package")," command much later, and you can insert additional configurations between.")),(0,l.kt)("h3",{id:"build-hello-world-cmake"},"Build Hello world"),(0,l.kt)("p",null,"Now you are ready to configure ",(0,l.kt)("inlineCode",{parentName:"p"},"HelloWorld")," ",(0,l.kt)("inlineCode",{parentName:"p"},"CMake")," application."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd ../HelloWorld-builds-cmake/build-debug\n")),(0,l.kt)(r.Z,{groupId:d.IZ,mdxType:"Tabs"},(0,l.kt)(i.Z,{value:d.Fo,label:d.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},`cmake.exe \`\n-S "${(0,p.go)(d.Fo)}/HelloWorld/HelloWorld" \`\n-B "${(0,p.go)(d.Fo)}/HelloWorld/HelloWorld-builds-cmake/build-debug" \`\n-G 'Ninja' \`\n-D CMAKE_BUILD_TYPE:STRING='Debug' \`\n-D CMAKE_TOOLCHAIN_FILE:FILEPATH="${(0,p.EA)(d.Fo)}/vcpkg/scripts/buildsystems/vcpkg.cmake" \`\n-D CMAKE_INSTALL_PREFIX:PATH="${(0,p.EA)(d.Fo)}/tmp/HelloWorld"`)),(0,l.kt)(i.Z,{value:d.q5,label:d.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},`cmake \\\n-S "${(0,p.go)(d.q5)}/HelloWorld/HelloWorld" \\\n-B "${(0,p.go)(d.q5)}/HelloWorld/HelloWorld-builds-cmake/build-debug" \\\n-G 'Ninja' \\\n-D CMAKE_BUILD_TYPE:STRING='Debug' \\\n-D CMAKE_TOOLCHAIN_FILE:FILEPATH="${(0,p.EA)(d.q5)}/vcpkg/scripts/buildsystems/vcpkg.cmake" \\\n-D CMAKE_INSTALL_PREFIX:PATH="${(0,p.EA)(d.q5)}/tmp/TinyORM"`))),(0,l.kt)("p",null,"And build."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cmake --build . --target all\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Enable the ",(0,l.kt)("a",{parentName:"p",href:"/building/tinyorm#cmake-strict_mode-option"},(0,l.kt)("inlineCode",{parentName:"a"},"TINYORM_STRICT_MODE"))," environment variable to produce better code and to follow good code practices.")),(0,l.kt)("h3",{id:"execute-hello-world-cmake"},"Execute Hello world"),(0,l.kt)("p",null,"Do not forget to add ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyOrm0d.dll")," on the path on Windows and on the ",(0,l.kt)("inlineCode",{parentName:"p"},"LD_LIBRARY_PATH")," on Linux, so ",(0,l.kt)("inlineCode",{parentName:"p"},"HelloWorld")," application can find it during execution, as is described ",(0,l.kt)("a",{parentName:"p",href:"/building/tinyorm#tinyorm-on-path-cmake"},"here"),"."),(0,l.kt)(r.Z,{groupId:d.IZ,name:"tinyorm-on-path",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:d.Fo,label:d.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},`$env:Path = "${(0,p.go)(d.Fo,!1)}\\TinyORM\\TinyORM-builds-cmake\\build-debug;" + $env:Path`)),(0,l.kt)(i.Z,{value:d.q5,label:d.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},`export LD_LIBRARY_PATH=${(0,p.go)(d.q5)}/TinyORM/TinyORM-builds-cmake/build-debug\${PATH:+:}$PATH`))),(0,l.kt)("p",null,"Execute ",(0,l.kt)("inlineCode",{parentName:"p"},"HelloWorld")," example."),(0,l.kt)(r.Z,{groupId:d.IZ,mdxType:"Tabs"},(0,l.kt)(i.Z,{value:d.Fo,label:d.IM,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-powershell"},".\\HelloWorld.exe\n"))),(0,l.kt)(i.Z,{value:d.q5,label:d.C,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./HelloWorld\n")))),(0,l.kt)("p",null,"The output will look like this."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-less"},'Executed prepared query (6ms, -1 results, 0 affected, tinyorm_default) : select * from posts\n1 "First Post"\n2 "Second Post"\n')),(0,l.kt)("h2",{id:"hello-world-with-qmake"},"Hello world with qmake"),(0,l.kt)("p",null,"Create a folder for the ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," build."),(0,l.kt)(r.Z,{groupId:d.IZ,mdxType:"Tabs"},(0,l.kt)(i.Z,{value:d.Fo,label:d.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},`cd ${(0,p.go)(d.Fo)}/HelloWorld\n\nmkdir HelloWorld-builds-qmake`)),(0,l.kt)(i.Z,{value:d.q5,label:d.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},`cd ${(0,p.go)(d.q5)}/HelloWorld\n\nmkdir HelloWorld-builds-qmake`))),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"#source-code"},(0,l.kt)("inlineCode",{parentName:"a"},"source code"))," is the same as for the ",(0,l.kt)("inlineCode",{parentName:"p"},"HelloWorld CMake")," example."),(0,l.kt)("h3",{id:"qmake-project"},"qmake project"),(0,l.kt)("p",null,"Create ",(0,l.kt)("inlineCode",{parentName:"p"},"HelloWorld.pro")," qmake file with the following content."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd HelloWorld\nvim HelloWorld.pro\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"To paste a source code correctly in ",(0,l.kt)("inlineCode",{parentName:"p"},"vim"),", press ",(0,l.kt)("kbd",null,"Shift")," + ",(0,l.kt)("kbd",null,"p"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qmake",metastring:"title='HelloWorld.pro'",title:"'HelloWorld.pro'"},"QT -= gui\n\nTEMPLATE = app\n\nCONFIG *= cmdline\n\nDEFINES += PROJECT_TINYORM_HELLOWORLD\n\nSOURCES += $$PWD/main.cpp\n\n# Auto-configure TinyORM library \ud83d\udd25\ninclude($$TINY_MAIN_DIR/TinyORM/qmake/TinyOrm.pri)\n")),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"The exact ",(0,l.kt)("a",{parentName:"p",href:"/building/tinyorm#folders-structure"},"folders structure")," is crucial in this example because the paths to the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," source and build folders are relative.")),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"Please pay special attention to letter casing in paths, especially TinyOrm vs TinyORM!")),(0,l.kt)("h4",{id:"auto-configure-using-qmake_conf-and-env"},(0,l.kt)("inlineCode",{parentName:"h4"},"Auto-configure")," using ",(0,l.kt)("inlineCode",{parentName:"h4"},".qmake.conf")," and ",(0,l.kt)("inlineCode",{parentName:"h4"},".env")),(0,l.kt)("p",null,"If you want to have properly configured ",(0,l.kt)("inlineCode",{parentName:"p"},"DEFINES")," (C preprocessor macros) or have Qt headers marked as system headers, then you need to specify a path to the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," qmake features (",(0,l.kt)("inlineCode",{parentName:"p"},".prf")," files) which handle this correctly; this path is provided by the ",(0,l.kt)("inlineCode",{parentName:"p"},"QMAKEFEATURES")," variable and can only be set in the ",(0,l.kt)("inlineCode",{parentName:"p"},".qmake.conf")," file."),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Read the ",(0,l.kt)("a",{parentName:"p",href:"/building/tinyorm#consume-tinyorm-library-qmake"},"Consume TinyOrm library (qmake)")," section, as everything that is described in that section applies here as well.")),(0,l.kt)("p",null,"Create the ",(0,l.kt)("inlineCode",{parentName:"p"},".qmake.conf")," file in the ",(0,l.kt)("inlineCode",{parentName:"p"},"HelloWorld")," project root folder with the following content."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qmake",metastring:"title='.qmake.conf'",title:"'.qmake.conf'"},"# Path to the PARENT folder of the TinyORM source folder\nTINY_MAIN_DIR    = $$clean_path($$PWD/../../TinyORM/)\n# To find .env and .env.$$QMAKE_PLATFORM files\nTINY_DOTENV_ROOT = $$PWD\n# Path to the current build tree (used to guess the TinyORM build tree)\n#TINY_BUILD_TREE  = $$shadowed($$PWD)\n\n# To find .prf files, needed by eg. CONFIG += tiny_system_headers inline/extern_constants\nQMAKEFEATURES *= $$quote($$TINY_MAIN_DIR/TinyORM/qmake/features)\n")),(0,l.kt)("p",null,"Then, create a ",(0,l.kt)("code",null,".env.(win32","|","unix","|","mingw)")," file in the ",(0,l.kt)("inlineCode",{parentName:"p"},"HelloWorld")," project root folder with the following content."),(0,l.kt)(r.Z,{groupId:d.IZ,mdxType:"Tabs"},(0,l.kt)(i.Z,{value:d.Fo,label:".env.win32",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qmake"},"# Names and values of these qmake variables are crucial, they are used in HelloWorld.pro\n# Please pay special attention to letter casing in paths, especially TinyOrm vs TinyORM!\n\n# Path to the TinyORM build folder\nTINYORM_BUILD_TREE = $$quote($$TINY_MAIN_DIR/TinyORM-builds-qmake/build-TinyORM-Desktop_Qt_6_5_3_MSVC2022_64bit-Debug/)\n\n# Path to the vcpkg - range-v3\n# Will use the TINY_VCPKG_ROOT or VCPKG_ROOT environment variable if is empty\nTINY_VCPKG_ROOT = $$clean_path($$PWD/../../../vcpkg/)\nTINY_VCPKG_TRIPLET = x64-windows\n\n# Enable ccache wrapper\n#CONFIG *= tiny_ccache_win32\n"))),(0,l.kt)(i.Z,{value:d.q5,label:".env.unix",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qmake"},"# Names and values of these qmake variables are crucial, they are used in HelloWorld.pro\n# Please pay special attention to letter casing in paths, especially TinyOrm vs TinyORM!\n\n# Path to the TinyORM build folder\nTINYORM_BUILD_TREE = $$quote($$TINY_MAIN_DIR/TinyORM-builds-qmake/build-TinyORM-Desktop_Qt_6_5_3_clang16_64bit_ccache-Debug/)\n\n# Path to the vcpkg - range-v3\n# Will use the TINY_VCPKG_ROOT or VCPKG_ROOT environment variable if is empty\nTINY_VCPKG_ROOT = $$clean_path($$PWD/../../../vcpkg/)\nTINY_VCPKG_TRIPLET = x64-linux\n\n# Use faster linker\nclang: CONFIG *= use_lld_linker\nelse: CONFIG *= use_gold_linker\n\n# Or use the mold linker\n#QMAKE_LFLAGS *= -fuse-ld=mold\n"))),(0,l.kt)(i.Z,{value:"mingw",label:".env.mingw",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qmake"},"# Names and values of these qmake variables are crucial, they are used in HelloWorld.pro\n# Please pay special attention to letter casing in paths, especially TinyOrm vs TinyORM!\n\n# Path to the TinyORM build folder\nTINYORM_BUILD_TREE = $$quote($$TINY_MAIN_DIR/TinyORM-builds-qmake/build-TinyORM-Desktop_Qt_6_5_3_MSYS2_UCRT64_clang_64bit-Debug/)\n\n# Path to the vcpkg - range-v3\n# Will use the TINY_VCPKG_ROOT or VCPKG_ROOT environment variable if is empty\nTINY_VCPKG_ROOT = $$clean_path($$PWD/../../../vcpkg/)\nTINY_VCPKG_TRIPLET = x64-mingw-dynamic\n\n# Enable ccache wrapper\n#CONFIG *= tiny_ccache_win32\n\n# Use faster linker (for both GCC and Clang)\n# CONFIG *= use_lld_linker does not work on MinGW\nQMAKE_LFLAGS *= -fuse-ld=lld\n")))),(0,l.kt)("p",null,"Don't forget to update the ",(0,l.kt)("inlineCode",{parentName:"p"},"TINYORM_BUILD_TREE")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"TINY_VCPKG_ROOT")," folder paths to your needs if you are not using the recommended ",(0,l.kt)("a",{parentName:"p",href:"/building/tinyorm#folders-structure"},(0,l.kt)("inlineCode",{parentName:"a"},"Folders structure")),"."),(0,l.kt)("p",null,"You can use the ",(0,l.kt)("a",{parentName:"p",href:"/building/tinyorm#partial-guessing-of-the-tinyorm_build_tree"},"Partial guessing of the ",(0,l.kt)("inlineCode",{parentName:"a"},"TINYORM_BUILD_TREE"))," if you don't like to specify it manually. Just comment out the ",(0,l.kt)("inlineCode",{parentName:"p"},"TINYORM_BUILD_TREE")," and uncomment the ",(0,l.kt)("inlineCode",{parentName:"p"},"TINY_BUILD_TREE = $$shadowed($$PWD)")," in the ",(0,l.kt)("inlineCode",{parentName:"p"},".qmake.conf")," file."),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"You can entirely avoid the ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," files, just move the ",(0,l.kt)("inlineCode",{parentName:"p"},"TINYORM_BUILD_TREE")," to the ",(0,l.kt)("inlineCode",{parentName:"p"},".qmake.conf")," or remove it by help of ",(0,l.kt)("a",{parentName:"p",href:"/building/tinyorm#partial-guessing-of-the-tinyorm_build_tree"},"Partial guessing of the ",(0,l.kt)("inlineCode",{parentName:"a"},"TINYORM_BUILD_TREE"))," and set the ",(0,l.kt)("inlineCode",{parentName:"p"},"VCPKG_ROOT")," environment variable at system level as is described in ",(0,l.kt)("a",{parentName:"p",href:"/building/tinyorm#set-up-vcpkg-environment"},(0,l.kt)("inlineCode",{parentName:"a"},"Set up vcpkg environment")),".")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Configuring by the ",(0,l.kt)("inlineCode",{parentName:"p"},".qmake.conf")," and ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," files has one big advantage, which is that you don't have to modify the project files.")),(0,l.kt)("h3",{id:"build-hello-world-qmake"},"Build Hello world"),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"I recommend creating a new ",(0,l.kt)("inlineCode",{parentName:"p"},"Session")," in the ",(0,l.kt)("inlineCode",{parentName:"p"},"QtCreator IDE")," as is described ",(0,l.kt)("a",{parentName:"p",href:"/building/tinyorm#open-qtcreator-ide"},"here"),".")),(0,l.kt)("p",null,"Now you can open the ",(0,l.kt)("inlineCode",{parentName:"p"},"HelloWorld.pro")," project in the ",(0,l.kt)("inlineCode",{parentName:"p"},"QtCreator IDE"),"."),(0,l.kt)("p",null,"This will open the ",(0,l.kt)("inlineCode",{parentName:"p"},"Configure Project")," tab, select some kit and update build folder paths to meet our ",(0,l.kt)("a",{parentName:"p",href:"/building/tinyorm#folders-structure"},"folders structure")," or like you want."),(0,l.kt)("img",{src:n(1465).Z,alt:"HelloWorld - QtCreator - Configure Project",width:"760"}),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"You can force the ",(0,l.kt)("inlineCode",{parentName:"p"},"QtCreator")," to generate a build folders structure as is described ",(0,l.kt)("a",{parentName:"p",href:"/building/tinyorm#qtcreator-default-build-directory"},"here"),".")),(0,l.kt)("p",null,"You are ready to configure build options, hit ",(0,l.kt)("kbd",null,"Ctrl"),"+",(0,l.kt)("kbd",null,"5")," to open ",(0,l.kt)("inlineCode",{parentName:"p"},"Project Settings")," tab and select ",(0,l.kt)("inlineCode",{parentName:"p"},"Build")," in the left sidebar to open the ",(0,l.kt)("inlineCode",{parentName:"p"},"Build Settings"),", it should look similar to the following picture."),(0,l.kt)("img",{src:n(6511).Z,className:"no-blurry",alt:"HelloWorld - QtCreator - Build Settings",width:"760"}),(0,l.kt)("p",null,"Disable ",(0,l.kt)("inlineCode",{parentName:"p"},"QML debugging and profiling")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Qt Quick Compiler"),", they are not used."),(0,l.kt)("p",null,"In the left sidebar open ",(0,l.kt)("inlineCode",{parentName:"p"},"Dependencies")," and check ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," project and ",(0,l.kt)("inlineCode",{parentName:"p"},"Synchronize configuration"),", this setting ensures that the current project will be rebuilt correctly when the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library source code changes."),(0,l.kt)("p",null,"Everything is ready to build, you can press ",(0,l.kt)("kbd",null,"Ctrl"),"+",(0,l.kt)("kbd",null,"b")," to build the project."),(0,l.kt)("h3",{id:"execute-hello-world-qmake"},"Execute Hello world"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"QtCreator")," takes care of all the necessary configurations, sets up the build environment correctly, and also prepends dependency libraries on the system path on Windows and on the ",(0,l.kt)("inlineCode",{parentName:"p"},"LD_LIBRARY_PATH")," on Linux."),(0,l.kt)("p",null,"The only thing you might want to change is to run the ",(0,l.kt)("inlineCode",{parentName:"p"},"HelloWorld")," example in the new terminal window. To do so, hit ",(0,l.kt)("kbd",null,"Ctrl"),"+",(0,l.kt)("kbd",null,"5")," to open the ",(0,l.kt)("inlineCode",{parentName:"p"},"Project Settings")," tab and select ",(0,l.kt)("inlineCode",{parentName:"p"},"Run")," in the left sidebar to open the ",(0,l.kt)("inlineCode",{parentName:"p"},"Run Settings"),", then in the ",(0,l.kt)("inlineCode",{parentName:"p"},"Run")," section select the ",(0,l.kt)("inlineCode",{parentName:"p"},"Run in terminal")," checkbox."),(0,l.kt)("p",null,"To execute the ",(0,l.kt)("inlineCode",{parentName:"p"},"HelloWorld")," example press ",(0,l.kt)("kbd",null,"Ctrl")," + ",(0,l.kt)("kbd",null,"r"),"."),(0,l.kt)("p",null,"The output will look like this."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-less"},'Executed prepared query (6ms, -1 results, 0 affected, tinyorm_default) : select * from posts\n1 "First Post"\n2 "Second Post"\n')))}b.isMDXComponent=!0},6511:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/qmake-build_settings-ebdc6c0c056d11462096ff10cba682a1.png"},1465:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/qmake-configure_project-8caf87e6af4452f0c28bd15c85c392fc.png"}}]);