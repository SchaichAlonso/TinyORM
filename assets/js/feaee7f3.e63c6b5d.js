"use strict";(self.webpackChunktinyorm_org=self.webpackChunktinyorm_org||[]).push([[983],{8781:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>m,contentTitle:()=>u,default:()=>g,frontMatter:()=>h,metadata:()=>p,toc:()=>x});var i=l(4848),r=l(8453),t=l(8774),o=l(2364),a=l(9365),s=l(1470),d=l(7324),c=l(6694);const h={sidebar_position:2,sidebar_label:"Hello world",description:"Hello world example created in the terminal and QtCreator IDE.",keywords:["c++ orm","building","hello world","tinyorm"]},u="Building: Hello world",p={id:"building/hello-world",title:"Building: Hello world",description:"Hello world example created in the terminal and QtCreator IDE.",source:"@site/docs/building/hello-world.mdx",sourceDirName:"building",slug:"/building/hello-world",permalink:"/building/hello-world",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Hello world",description:"Hello world example created in the terminal and QtCreator IDE.",keywords:["c++ orm","building","hello world","tinyorm"]},sidebar:"tinyormSidebar",previous:{title:"TinyORM",permalink:"/building/tinyorm"},next:{title:"Migrations",permalink:"/building/migrations"}},m={},x=[{value:"Introduction",id:"introduction",level:2},{value:"Prepare SQLite 3 database",id:"prepare-sqlite-3-database",level:2},{value:"Install dependencies",id:"install-dependencies",level:2},{value:"Using vcpkg.json <small>(manifest mode)</small>",id:"using-vcpkg-json-manifest-mode",level:4},{value:"Using vcpkg install <small>(manually)</small>",id:"using-vcpkg-install-manually",level:4},{value:"Source code",id:"source-code",level:2},{value:"Hello world with CMake",id:"hello-world-with-cmake",level:2},{value:"CMake project",id:"cmake-project",level:3},{value:"FetchContent",id:"fetchcontent",level:3},{value:"How FetchContent module works",id:"how-fetchcontent-module-works",level:4},{value:"Build Hello world",id:"build-hello-world-cmake",level:3},{value:"Execute Hello world",id:"execute-hello-world-cmake",level:3},{value:"Hello world with qmake",id:"hello-world-with-qmake",level:2},{value:"qmake project",id:"qmake-project",level:3},{value:"<code>Auto-configure</code> using <code>.qmake.conf</code> and <code>.env</code>",id:"auto-configure-using-qmake_conf-and-env",level:4},{value:"Build Hello world",id:"build-hello-world-qmake",level:3},{value:"Execute Hello world",id:"execute-hello-world-qmake",level:3}];function j(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"building-hello-world",children:"Building: Hello world"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#prepare-sqlite-3-database",children:"Prepare SQLite 3 database"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#install-dependencies",children:"Install dependencies"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#using-vcpkg-json-manifest-mode",children:"Using vcpkg.json"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#using-vcpkg-install-manually",children:"Using vcpkg install"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#source-code",children:"Source code"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#hello-world-with-cmake",children:"Hello world with CMake"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#cmake-project",children:"CMake project"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#fetchcontent",children:"FetchContent"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#build-hello-world-cmake",children:"Build Hello world"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#execute-hello-world-cmake",children:"Execute Hello world"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#hello-world-with-qmake",children:"Hello world with qmake"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#qmake-project",children:"qmake project"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#build-hello-world-qmake",children:"Build Hello world"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#execute-hello-world-qmake",children:"Execute Hello world"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)("div",{class:"api-stability alert alert--success",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(t.A,{to:"/stability#stability-indexes",children:(0,i.jsx)(n.strong,{children:"Stability: 2"})})," - Stable"]})}),"\n",(0,i.jsxs)(n.p,{children:["We will try to create the simplest working console application, in the terminal with the ",(0,i.jsx)(n.code,{children:"CMake"})," and in the ",(0,i.jsx)(n.code,{children:"QtCreator IDE"})," with the ",(0,i.jsx)(n.code,{children:"qmake"})," build systems."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"HelloWorld"})," example also expects the following ",(0,i.jsx)(n.a,{href:"/building/tinyorm#folders-structure",children:"folders structure"}),", let's create them."]}),"\n",(0,i.jsxs)(s.A,{groupId:d.vf,children:[(0,i.jsx)(a.A,{value:d.b,label:d.ux,children:(0,i.jsx)(o.A,{className:"language-powershell",children:`cd ${(0,c.OZ)(d.b)}\nmkdir HelloWorld/HelloWorld\ncd HelloWorld`})}),(0,i.jsx)(a.A,{value:d.xj,label:d.gg,children:(0,i.jsx)(o.A,{className:"language-bash",children:`cd ${(0,c.OZ)(d.xj)}\nmkdir -p HelloWorld/HelloWorld\ncd HelloWorld`})})]}),"\n",(0,i.jsx)(n.h2,{id:"prepare-sqlite-3-database",children:"Prepare SQLite 3 database"}),"\n",(0,i.jsxs)(n.p,{children:["The easiest way to demonstrate the ",(0,i.jsx)(n.code,{children:"HelloWorld"})," example will be with a ",(0,i.jsx)(n.code,{children:"SQLite 3"})," database."]}),"\n",(0,i.jsxs)(n.p,{children:["Execute the following command in the terminal to create and insert two rows into the ",(0,i.jsx)(n.code,{children:"SQLite 3"})," database."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sqlite3 HelloWorld.sqlite3 \"\ncreate table posts(id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, name VARCHAR NOT NULL);\ninsert into posts values(1, 'First Post');\ninsert into posts values(2, 'Second Post');\nselect * from posts;\"\n"})}),"\n",(0,i.jsx)(n.h2,{id:"install-dependencies",children:"Install dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["First, install the ",(0,i.jsx)(n.code,{children:"vcpkg"})," package manager as is described ",(0,i.jsx)(n.a,{href:"/building/tinyorm#vcpkg",children:"here"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"range-v3"})," and ",(0,i.jsx)(n.code,{children:"tabulate"})," libraries are required dependencies because ",(0,i.jsx)(n.code,{children:"TinyORM"})," uses them in header files, you have to install them before you can use ",(0,i.jsx)(n.code,{children:"TinyORM"}),". The ",(0,i.jsx)(n.code,{children:"tabulate"})," library is only needed in the ",(0,i.jsx)(n.code,{children:"tom"})," migrations it's used by the ",(0,i.jsx)(n.code,{children:"migrate:status"})," command."]}),"\n",(0,i.jsxs)(n.p,{children:["There are two ways how to install the ",(0,i.jsx)(n.code,{children:"range-v3"})," and ",(0,i.jsx)(n.code,{children:"tabulate"})," libraries using ",(0,i.jsx)(n.code,{children:"vcpkg"}),"."]}),"\n",(0,i.jsxs)(n.h4,{id:"using-vcpkg-json-manifest-mode",children:["Using vcpkg.json ",(0,i.jsx)("small",{children:"(manifest mode)"})]}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:"vcpkg.json"})," file with the following content. ",(0,i.jsx)(n.code,{children:"CMake"})," example below uses this method."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd HelloWorld\nvim vcpkg.json\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"title='vcpkg.json'",children:'{\n  "$schema": "https://raw.githubusercontent.com/microsoft/vcpkg-tool/main/docs/vcpkg.schema.json",\n  "name": "tinyorm-helloworld",\n  "version-semver": "0.1.0",\n  "maintainers": "Silver Zachara <silver.zachara@gmail.com>",\n  "description": "Hello world console application for TinyORM C++ library",\n  "homepage": "https://github.com/silverqx/TinyORM",\n  "documentation": "https://www.tinyorm.org/building/hello-world",\n  "supports": "!(uwp | arm | android | emscripten | osx | ios | xbox | freebsd | openbsd | wasm32)",\n  "dependencies": [\n    "range-v3",\n    "tabulate"\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Only ",(0,i.jsx)(n.code,{children:"CMake"})," via the ",(0,i.jsx)(n.code,{children:"toolchain file"})," supports this method."]})}),"\n",(0,i.jsxs)(n.h4,{id:"using-vcpkg-install-manually",children:["Using vcpkg install ",(0,i.jsx)("small",{children:"(manually)"})]}),"\n",(0,i.jsxs)(n.p,{children:["This method can be used with both ",(0,i.jsx)(n.code,{children:"CMake"})," and ",(0,i.jsx)(n.code,{children:"qmake"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd ../../vcpkg\n\nvcpkg search range-v3\nvcpkg search tabulate\nvcpkg install range-v3 tabulate\nvcpkg list\n"})}),"\n",(0,i.jsx)(n.h2,{id:"source-code",children:"Source code"}),"\n",(0,i.jsxs)(n.p,{children:["Let's start in the ",(0,i.jsx)(n.code,{children:"HelloWorld"})," project folder."]}),"\n",(0,i.jsxs)(s.A,{groupId:d.vf,children:[(0,i.jsx)(a.A,{value:d.b,label:d.ux,children:(0,i.jsx)(o.A,{className:"language-powershell",children:`cd ${(0,c.OZ)(d.b)}/HelloWorld/HelloWorld`})}),(0,i.jsx)(a.A,{value:d.xj,label:d.gg,children:(0,i.jsx)(o.A,{className:"language-bash",children:`cd ${(0,c.OZ)(d.xj)}/HelloWorld/HelloWorld`})})]}),"\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.code,{children:"main.cpp"})," source file."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"vim main.cpp\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["To paste a source code correctly in ",(0,i.jsx)(n.code,{children:"vim"}),", press ",(0,i.jsx)("kbd",{children:"Shift"})," + ",(0,i.jsx)("kbd",{children:"p"}),"."]})}),"\n",(0,i.jsx)(n.p,{children:"And paste the following code."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:"title='main.cpp'",children:'#include <QCoreApplication>\n#include <QDebug>\n\n#ifdef _WIN32\n#  include <qt_windows.h>\n#endif\n\n#include <orm/db.hpp>\n\nusing Orm::DB;\n\nint main(int argc, char *argv[])\n{\n#ifdef _WIN32\n    SetConsoleOutputCP(CP_UTF8);\n//    SetConsoleOutputCP(1250);\n#endif\n\n    /* Needed from Qt v6.5.3 to avoid:\n       qt.core.qobject.connect: QObject::connect(QObject, Unknown): invalid nullptr parameter */\n    QCoreApplication app(argc, argv);\n\n    // Ownership of a shared_ptr()\n    auto manager = DB::create({\n        {"driver",   "QSQLITE"},\n        {"database", qEnvironmentVariable("TINYORM_HELLOWORLD_DB_SQLITE_DATABASE",\n                                          "../../HelloWorld.sqlite3")},\n        {"check_database_exists", true},\n    });\n\n    auto posts = DB::select("select * from posts");\n\n    while(posts.next())\n        qDebug() << posts.value("id").toULongLong()\n                 << posts.value("name").toString();\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"QSqlDatabase"})," depends on ",(0,i.jsx)(n.code,{children:"QCoreApplication"})," from ",(0,i.jsx)(n.code,{children:"Qt v6.5.3"})," so you must create the ",(0,i.jsx)(n.code,{children:"QCoreApplication"})," instance before you will call anything from the ",(0,i.jsx)(n.code,{children:"TinyORM"})," library. \ud83e\udee4 The change was made ",(0,i.jsx)(n.a,{href:"https://github.com/qt/qtbase/commit/8d2bdc9cd5482eace12ba7e45304857bd24db0e6#diff-1d355c25c0b0eddec2be48253407780c4dc510d986739aec61e1ec892ccaf86e",children:"here"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"hello-world-with-cmake",children:"Hello world with CMake"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["If something is not clear, you can still look at GitHub Action ",(0,i.jsx)(n.a,{href:"https://github.com/silverqx/TinyORM/tree/main/.github/workflows",children:(0,i.jsx)(n.code,{children:"workflows"})})," how the build is done."]})}),"\n",(0,i.jsxs)(n.p,{children:["Create a folder for the ",(0,i.jsx)(n.code,{children:"CMake"})," build."]}),"\n",(0,i.jsxs)(s.A,{groupId:d.vf,children:[(0,i.jsx)(a.A,{value:d.b,label:d.ux,children:(0,i.jsx)(o.A,{className:"language-powershell",children:"cd ..\nmkdir HelloWorld-builds-cmake/build-debug\n\ncd HelloWorld"})}),(0,i.jsx)(a.A,{value:d.xj,label:d.gg,children:(0,i.jsx)(o.A,{className:"language-bash",children:"cd ..\nmkdir -p HelloWorld-builds-cmake/build-debug\n\ncd HelloWorld"})})]}),"\n",(0,i.jsx)(n.h3,{id:"cmake-project",children:"CMake project"}),"\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.code,{children:"CMakeLists.txt"})," file with the following content."]}),"\n",(0,i.jsxs)(s.A,{groupId:d.vf,children:[(0,i.jsx)(a.A,{value:d.b,label:d.ux,children:(0,i.jsx)(o.A,{className:"language-cmake",children:`cmake_minimum_required(VERSION VERSION 3.22...3.30 FATAL_ERROR)\n\nproject(HelloWorld LANGUAGES CXX)\n\n# build tree\nlist(APPEND CMAKE_PREFIX_PATH "${(0,c.nC)(d.b,(0,c.OZ)(d.b))}/TinyORM/TinyORM-builds-cmake/build-debug")\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nadd_executable(HelloWorld\n  main.cpp\n)\n\nfind_package(QT NAMES Qt6 COMPONENTS Core REQUIRED)\nfind_package(Qt\${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)\nfind_package(TinyOrm 0.38.0 CONFIG REQUIRED)\n\ntarget_link_libraries(HelloWorld\n    PRIVATE\n        Qt\${QT_VERSION_MAJOR}::Core\n        TinyOrm::TinyOrm\n)`})}),(0,i.jsx)(a.A,{value:d.xj,label:d.gg,children:(0,i.jsx)(o.A,{className:"language-cmake",children:`cmake_minimum_required(VERSION VERSION 3.22...3.30 FATAL_ERROR)\n\nproject(HelloWorld LANGUAGES CXX)\n\n# build tree\nlist(APPEND CMAKE_PREFIX_PATH "${(0,c.nC)(d.xj,(0,c.OZ)(d.xj))}/TinyORM/TinyORM-builds-cmake/build-debug")\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nadd_executable(HelloWorld\n  main.cpp\n)\n\nfind_package(QT NAMES Qt6 COMPONENTS Core REQUIRED)\nfind_package(Qt\${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)\nfind_package(TinyOrm 0.38.0 CONFIG REQUIRED)\n\ntarget_link_libraries(HelloWorld\n    PRIVATE\n        Qt\${QT_VERSION_MAJOR}::Core\n        TinyOrm::TinyOrm\n)`})})]}),"\n",(0,i.jsx)(n.h3,{id:"fetchcontent",children:"FetchContent"}),"\n",(0,i.jsxs)(n.p,{children:["If you don't have cloned and built the ",(0,i.jsx)(n.code,{children:"TinyORM"})," library, or you want to quickly try TinyORM without wasting time with cloning and building the TinyORM library, then you can use CMake's ",(0,i.jsx)(n.a,{href:"https://cmake.org/cmake/help/latest/module/FetchContent.html",children:(0,i.jsx)(n.code,{children:"FetchContent"})})," module that will do all of this for you."]}),"\n",(0,i.jsxs)(n.p,{children:["Instead of providing a path by the ",(0,i.jsx)(n.code,{children:"CMAKE_PREFIX_PATH"})," (or using the ",(0,i.jsx)(n.code,{children:"User Package Registry"}),") like in the example below:"]}),"\n",(0,i.jsxs)(s.A,{groupId:d.vf,children:[(0,i.jsx)(a.A,{value:d.b,label:d.ux,children:(0,i.jsx)(o.A,{className:"language-cmake",children:`# build tree\nlist(APPEND CMAKE_PREFIX_PATH "${(0,c.nC)(d.b,(0,c.OZ)(d.b))}/TinyORM/TinyORM-builds-cmake/build-debug")`})}),(0,i.jsx)(a.A,{value:d.xj,label:d.gg,children:(0,i.jsx)(o.A,{className:"language-cmake",children:`# build tree\nlist(APPEND CMAKE_PREFIX_PATH "${(0,c.nC)(d.xj,(0,c.OZ)(d.xj))}/TinyORM/TinyORM-builds-cmake/build-debug")`})})]}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)(n.a,{href:"https://cmake.org/cmake/help/latest/module/FetchContent.html",children:(0,i.jsx)(n.code,{children:"FetchContent"})})," module like in the following example."]}),"\n",(0,i.jsxs)(s.A,{groupId:d.vf,children:[(0,i.jsx)(a.A,{value:d.b,label:d.ux,children:(0,i.jsx)(o.A,{className:"language-cmake",children:"cmake_minimum_required(VERSION VERSION 3.22...3.30 FATAL_ERROR)\n\nproject(HelloWorld LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\n# FetchContent method\ninclude(FetchContent)\nFetchContent_Declare(TinyOrm\n    GIT_REPOSITORY https://github.com/silverqx/TinyORM.git\n    GIT_TAG        origin/main\n    OVERRIDE_FIND_PACKAGE\n)\n# Here you can configure TinyORM CMake options\nset(MYSQL_PING OFF)\nset(TOM_EXAMPLE ON)\n\nadd_executable(HelloWorld\n  main.cpp\n)\n\nfind_package(QT NAMES Qt6 COMPONENTS Core REQUIRED)\nfind_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)\nfind_package(TinyOrm 0.38.0 CONFIG REQUIRED)\n\ntarget_link_libraries(HelloWorld\n    PRIVATE\n        Qt${QT_VERSION_MAJOR}::Core\n        TinyOrm::TinyOrm\n)"})}),(0,i.jsx)(a.A,{value:d.xj,label:d.gg,children:(0,i.jsx)(o.A,{className:"language-cmake",children:"cmake_minimum_required(VERSION VERSION 3.22...3.30 FATAL_ERROR)\n\nproject(HelloWorld LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\n# FetchContent method\ninclude(FetchContent)\nFetchContent_Declare(TinyOrm\n    GIT_REPOSITORY https://github.com/silverqx/TinyORM.git\n    GIT_TAG        origin/main\n    OVERRIDE_FIND_PACKAGE\n)\n# Here you can configure TinyORM CMake options\nset(MYSQL_PING OFF)\nset(TOM_EXAMPLE ON)\n\nadd_executable(HelloWorld\n  main.cpp\n)\n\nfind_package(QT NAMES Qt6 COMPONENTS Core REQUIRED)\nfind_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)\nfind_package(TinyOrm 0.38.0 CONFIG REQUIRED)\n\ntarget_link_libraries(HelloWorld\n    PRIVATE\n        Qt${QT_VERSION_MAJOR}::Core\n        TinyOrm::TinyOrm\n)"})})]}),"\n",(0,i.jsx)(n.h4,{id:"how-fetchcontent-module-works",children:"How FetchContent module works"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"FetchContent_Declare"})," command is like calling the git clone inside the build folder and then adding a cloned folder in a similar way as the ",(0,i.jsx)(n.code,{children:"add_subdirectory(<cloned_folder>)"})," command does."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"FetchContent_MakeAvailable(<package>)"})," internally calls the ",(0,i.jsx)(n.code,{children:"find_package(<package>)"})," command or if you pass the ",(0,i.jsx)(n.code,{children:"OVERRIDE_FIND_PACKAGE"})," argument, then you don't have to call the the ",(0,i.jsx)(n.code,{children:"FetchContent_MakeAvailable"}),", but you must call the ",(0,i.jsx)(n.code,{children:"find_package(<package> x.y.z CONFIG REQUIRED)"})," command manually."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["An advantage of the ",(0,i.jsx)(n.code,{children:"OVERRIDE_FIND_PACKAGE"})," argument is that you can call the ",(0,i.jsx)(n.code,{children:"find_package"})," command much later, and you can insert additional configurations between."]})}),"\n",(0,i.jsx)(n.h3,{id:"build-hello-world-cmake",children:"Build Hello world"}),"\n",(0,i.jsxs)(n.p,{children:["Now you are ready to configure ",(0,i.jsx)(n.code,{children:"HelloWorld"})," ",(0,i.jsx)(n.code,{children:"CMake"})," application."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd ../HelloWorld-builds-cmake/build-debug\n"})}),"\n",(0,i.jsxs)(s.A,{groupId:d.vf,children:[(0,i.jsx)(a.A,{value:d.b,label:d.ux,children:(0,i.jsx)(o.A,{className:"language-powershell",children:`cmake.exe \`\n-S "${(0,c.OZ)(d.b)}/HelloWorld/HelloWorld" \`\n-B "${(0,c.OZ)(d.b)}/HelloWorld/HelloWorld-builds-cmake/build-debug" \`\n-G 'Ninja' \`\n-D CMAKE_BUILD_TYPE:STRING='Debug' \`\n-D CMAKE_TOOLCHAIN_FILE:FILEPATH="${(0,c.Sn)(d.b)}/vcpkg/scripts/buildsystems/vcpkg.cmake" \`\n-D CMAKE_CXX_SCAN_FOR_MODULES:BOOL=OFF \`\n-D CMAKE_INSTALL_PREFIX:PATH="${(0,c.Sn)(d.b)}/tmp/HelloWorld"`})}),(0,i.jsx)(a.A,{value:d.xj,label:d.gg,children:(0,i.jsx)(o.A,{className:"language-bash",children:`cmake \\\n-S "${(0,c.OZ)(d.xj)}/HelloWorld/HelloWorld" \\\n-B "${(0,c.OZ)(d.xj)}/HelloWorld/HelloWorld-builds-cmake/build-debug" \\\n-G 'Ninja' \\\n-D CMAKE_BUILD_TYPE:STRING='Debug' \\\n-D CMAKE_TOOLCHAIN_FILE:FILEPATH="${(0,c.Sn)(d.xj)}/vcpkg/scripts/buildsystems/vcpkg.cmake" \\\n-D CMAKE_CXX_SCAN_FOR_MODULES:BOOL=OFF \\\n-D CMAKE_INSTALL_PREFIX:PATH="${(0,c.Sn)(d.xj)}/tmp/TinyORM"`})})]}),"\n",(0,i.jsx)(n.p,{children:"And build."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cmake --build . --target all\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Enable the ",(0,i.jsx)(n.a,{href:"/building/tinyorm#cmake-strict_mode-option",children:(0,i.jsx)(n.code,{children:"TINYORM_STRICT_MODE"})})," environment variable to produce better code and to follow good code practices."]})}),"\n",(0,i.jsx)(n.h3,{id:"execute-hello-world-cmake",children:"Execute Hello world"}),"\n",(0,i.jsxs)(n.p,{children:["Do not forget to add ",(0,i.jsx)(n.code,{children:"TinyOrm0d.dll"})," on the path on Windows and on the ",(0,i.jsx)(n.code,{children:"LD_LIBRARY_PATH"})," on Linux, so ",(0,i.jsx)(n.code,{children:"HelloWorld"})," application can find it during execution, as is described ",(0,i.jsx)(n.a,{href:"/building/tinyorm#tinyorm-on-path-cmake",children:"here"}),"."]}),"\n",(0,i.jsxs)(s.A,{groupId:d.vf,name:"tinyorm-on-path",children:[(0,i.jsx)(a.A,{value:d.b,label:d.ux,children:(0,i.jsx)(o.A,{className:"language-powershell",children:`$env:Path = "${(0,c.OZ)(d.b,!1)}\\TinyORM\\TinyORM-builds-cmake\\build-debug;" + $env:Path`})}),(0,i.jsx)(a.A,{value:d.xj,label:d.gg,children:(0,i.jsx)(o.A,{className:"language-bash",children:`export LD_LIBRARY_PATH=${(0,c.OZ)(d.xj)}/TinyORM/TinyORM-builds-cmake/build-debug\${PATH:+:}$PATH`})})]}),"\n",(0,i.jsxs)(n.p,{children:["Execute ",(0,i.jsx)(n.code,{children:"HelloWorld"})," example."]}),"\n",(0,i.jsxs)(s.A,{groupId:d.vf,children:[(0,i.jsx)(a.A,{value:d.b,label:d.ux,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:".\\HelloWorld.exe\n"})})}),(0,i.jsx)(a.A,{value:d.xj,label:d.gg,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"./HelloWorld\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"The output will look like this."}),"\n",(0,i.jsx)(o.A,{className:"language-less",children:'Executed prepared query (6ms, -1 results, 0 affected, tinyorm_default) : select * from posts\n1 "First Post"\n2 "Second Post"'}),"\n",(0,i.jsx)(n.h2,{id:"hello-world-with-qmake",children:"Hello world with qmake"}),"\n",(0,i.jsxs)(n.p,{children:["Create a folder for the ",(0,i.jsx)(n.code,{children:"qmake"})," build."]}),"\n",(0,i.jsxs)(s.A,{groupId:d.vf,children:[(0,i.jsx)(a.A,{value:d.b,label:d.ux,children:(0,i.jsx)(o.A,{className:"language-powershell",children:`cd ${(0,c.OZ)(d.b)}/HelloWorld\n\nmkdir HelloWorld-builds-qmake`})}),(0,i.jsx)(a.A,{value:d.xj,label:d.gg,children:(0,i.jsx)(o.A,{className:"language-bash",children:`cd ${(0,c.OZ)(d.xj)}/HelloWorld\n\nmkdir HelloWorld-builds-qmake`})})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"#source-code",children:(0,i.jsx)(n.code,{children:"source code"})})," is the same as for the ",(0,i.jsx)(n.code,{children:"HelloWorld CMake"})," example."]}),"\n",(0,i.jsx)(n.h3,{id:"qmake-project",children:"qmake project"}),"\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.code,{children:"HelloWorld.pro"})," qmake file with the following content."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd HelloWorld\nvim HelloWorld.pro\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["To paste a source code correctly in ",(0,i.jsx)(n.code,{children:"vim"}),", press ",(0,i.jsx)("kbd",{children:"Shift"})," + ",(0,i.jsx)("kbd",{children:"p"}),"."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-qmake",metastring:"title='HelloWorld.pro'",children:"QT -= gui\n\nTEMPLATE = app\n\nCONFIG *= cmdline\n\nDEFINES *= PROJECT_TINYORM_HELLOWORLD\n\nSOURCES += $$PWD/main.cpp\n\n# Auto-configure TinyORM library \ud83d\udd25\ninclude($$TINY_MAIN_DIR/TinyORM/qmake/TinyOrm.pri)\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["The exact ",(0,i.jsx)(n.a,{href:"/building/tinyorm#folders-structure",children:"folders structure"})," is crucial in this example because the paths to the ",(0,i.jsx)(n.code,{children:"TinyORM"})," source and build folders are relative."]})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"Please pay special attention to letter casing in paths, especially TinyOrm vs TinyORM!"})}),"\n",(0,i.jsxs)(n.h4,{id:"auto-configure-using-qmake_conf-and-env",children:[(0,i.jsx)(n.code,{children:"Auto-configure"})," using ",(0,i.jsx)(n.code,{children:".qmake.conf"})," and ",(0,i.jsx)(n.code,{children:".env"})]}),"\n",(0,i.jsxs)(n.p,{children:["If you want to have properly configured ",(0,i.jsx)(n.code,{children:"DEFINES"})," (C preprocessor macros) or have Qt headers marked as system headers, then you need to specify a path to the ",(0,i.jsx)(n.code,{children:"TinyORM"})," qmake features (",(0,i.jsx)(n.code,{children:".prf"})," files) which handle this correctly; this path is provided by the ",(0,i.jsx)(n.code,{children:"QMAKEFEATURES"})," variable and can only be set in the ",(0,i.jsx)(n.code,{children:".qmake.conf"})," file."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Read the ",(0,i.jsx)(n.a,{href:"/building/tinyorm#consume-tinyorm-library-qmake",children:"Consume TinyOrm library (qmake)"})," section, as everything that is described in that section applies here as well."]})}),"\n",(0,i.jsxs)(n.p,{children:["Create the ",(0,i.jsx)(n.code,{children:".qmake.conf"})," file in the ",(0,i.jsx)(n.code,{children:"HelloWorld"})," project root folder with the following content."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-qmake",metastring:"title='.qmake.conf'",children:"# Path to the PARENT folder of the TinyORM source folder\nTINY_MAIN_DIR    = $$clean_path($$PWD/../../TinyORM/)\n# To find .env and .env.$$QMAKE_PLATFORM files\nTINY_DOTENV_ROOT = $$PWD\n# Path to the current build tree (used to guess the TinyORM build tree)\n#TINY_BUILD_TREE  = $$shadowed($$PWD)\n\n# To find .prf files, needed by eg. CONFIG += tiny_system_headers inline/extern_constants\nQMAKEFEATURES *= $$quote($$TINY_MAIN_DIR/TinyORM/qmake/features)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then, create a ",(0,i.jsx)("code",{children:".env.(win32|unix|mingw)"})," file in the ",(0,i.jsx)(n.code,{children:"HelloWorld"})," project root folder with the following content."]}),"\n",(0,i.jsxs)(s.A,{groupId:d.vf,children:[(0,i.jsx)(a.A,{value:d.b,label:".env.win32",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-qmake",children:"# Names and values of these qmake variables are crucial, they are used in HelloWorld.pro\n# Please pay special attention to letter casing in paths, especially TinyOrm vs TinyORM!\n\n# Path to the TinyORM build folder\nTINYORM_BUILD_TREE = $$quote($$TINY_MAIN_DIR/TinyORM-builds-qmake/build-TinyORM-Desktop_Qt_6_7_2_MSVC2022_64bit-Debug/)\n\n# Path to the vcpkg - range-v3\n# Will use the TINY_VCPKG_ROOT or VCPKG_ROOT environment variable if is empty\nTINY_VCPKG_ROOT = $$clean_path($$PWD/../../../vcpkg/)\nTINY_VCPKG_TRIPLET = x64-windows\n\n# Enable ccache wrapper\n#CONFIG *= ccache\n"})})}),(0,i.jsx)(a.A,{value:d.xj,label:".env.unix",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-qmake",children:"# Names and values of these qmake variables are crucial, they are used in HelloWorld.pro\n# Please pay special attention to letter casing in paths, especially TinyOrm vs TinyORM!\n\n# Path to the TinyORM build folder\nTINYORM_BUILD_TREE = $$quote($$TINY_MAIN_DIR/TinyORM-builds-qmake/build-TinyORM-Desktop_Qt_6_7_2_clang18_64bit_ccache-Debug/)\n\n# Path to the vcpkg - range-v3\n# Will use the TINY_VCPKG_ROOT or VCPKG_ROOT environment variable if is empty\nTINY_VCPKG_ROOT = $$clean_path($$PWD/../../../vcpkg/)\nTINY_VCPKG_TRIPLET = x64-linux\n\n# Use faster linker\nclang: CONFIG *= use_lld_linker\nelse: CONFIG *= use_gold_linker\n\n# Or use the mold linker\n#QMAKE_LFLAGS *= -fuse-ld=mold\n"})})}),(0,i.jsx)(a.A,{value:"mingw",label:".env.mingw",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-qmake",children:"# Names and values of these qmake variables are crucial, they are used in HelloWorld.pro\n# Please pay special attention to letter casing in paths, especially TinyOrm vs TinyORM!\n\n# Path to the TinyORM build folder\nTINYORM_BUILD_TREE = $$quote($$TINY_MAIN_DIR/TinyORM-builds-qmake/build-TinyORM-Desktop_Qt_6_7_2_MSYS2_UCRT64_clang_64bit-Debug/)\n\n# Path to the vcpkg - range-v3\n# Will use the TINY_VCPKG_ROOT or VCPKG_ROOT environment variable if is empty\nTINY_VCPKG_ROOT = $$clean_path($$PWD/../../../vcpkg/)\nTINY_VCPKG_TRIPLET = x64-mingw-dynamic\n\n# Enable ccache wrapper\n#CONFIG *= ccache\n\n# Use faster linker (for both GCC and Clang)\n# CONFIG *= use_lld_linker does not work on MinGW\nQMAKE_LFLAGS *= -fuse-ld=lld\n"})})})]}),"\n",(0,i.jsxs)(n.p,{children:["Don't forget to update the ",(0,i.jsx)(n.code,{children:"TINYORM_BUILD_TREE"})," and ",(0,i.jsx)(n.code,{children:"TINY_VCPKG_ROOT"})," folder paths to your needs if you are not using the recommended ",(0,i.jsx)(n.a,{href:"/building/tinyorm#folders-structure",children:(0,i.jsx)(n.code,{children:"Folders structure"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsxs)(n.a,{href:"/building/tinyorm#partial-guessing-of-the-tinyorm_build_tree",children:["Partial guessing of the ",(0,i.jsx)(n.code,{children:"TINYORM_BUILD_TREE"})]})," if you don't like to specify it manually. Just comment out the ",(0,i.jsx)(n.code,{children:"TINYORM_BUILD_TREE"})," and uncomment the ",(0,i.jsx)(n.code,{children:"TINY_BUILD_TREE = $$shadowed($$PWD)"})," in the ",(0,i.jsx)(n.code,{children:".qmake.conf"})," file."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["You can entirely avoid the ",(0,i.jsx)(n.code,{children:".env"})," files, just move the ",(0,i.jsx)(n.code,{children:"TINYORM_BUILD_TREE"})," to the ",(0,i.jsx)(n.code,{children:".qmake.conf"})," or remove it by help of ",(0,i.jsxs)(n.a,{href:"/building/tinyorm#partial-guessing-of-the-tinyorm_build_tree",children:["Partial guessing of the ",(0,i.jsx)(n.code,{children:"TINYORM_BUILD_TREE"})]})," and set the ",(0,i.jsx)(n.code,{children:"VCPKG_ROOT"})," environment variable at system level as is described in ",(0,i.jsx)(n.a,{href:"/building/tinyorm#set-up-vcpkg-environment",children:(0,i.jsx)(n.code,{children:"Set up vcpkg environment"})}),"."]})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Configuring by the ",(0,i.jsx)(n.code,{children:".qmake.conf"})," and ",(0,i.jsx)(n.code,{children:".env"})," files has one big advantage, which is that you don't have to modify the project files."]})}),"\n",(0,i.jsx)(n.h3,{id:"build-hello-world-qmake",children:"Build Hello world"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["I recommend creating a new ",(0,i.jsx)(n.code,{children:"Session"})," in the ",(0,i.jsx)(n.code,{children:"QtCreator IDE"})," as is described ",(0,i.jsx)(n.a,{href:"/building/tinyorm#open-qtcreator-ide",children:"here"}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["Now you can open the ",(0,i.jsx)(n.code,{children:"HelloWorld.pro"})," project in the ",(0,i.jsx)(n.code,{children:"QtCreator IDE"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["This will open the ",(0,i.jsx)(n.code,{children:"Configure Project"})," tab, select some kit and update build folder paths to meet our ",(0,i.jsx)(n.a,{href:"/building/tinyorm#folders-structure",children:"folders structure"})," or like you want."]}),"\n",(0,i.jsx)("img",{src:l(3180).A,alt:"HelloWorld - QtCreator - Configure Project",width:"760"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["You can force the ",(0,i.jsx)(n.code,{children:"QtCreator"})," to generate a build folders structure as is described ",(0,i.jsx)(n.a,{href:"/building/tinyorm#qtcreator-default-build-directory",children:"here"}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["You are ready to configure build options, hit ",(0,i.jsx)("kbd",{children:"Ctrl"}),"+",(0,i.jsx)("kbd",{children:"5"})," to open ",(0,i.jsx)(n.code,{children:"Project Settings"})," tab and select ",(0,i.jsx)(n.code,{children:"Build"})," in the left sidebar to open the ",(0,i.jsx)(n.code,{children:"Build Settings"}),", it should look similar to the following picture."]}),"\n",(0,i.jsx)("img",{src:l(7028).A,className:"no-blurry",alt:"HelloWorld - QtCreator - Build Settings",width:"760"}),"\n",(0,i.jsxs)(n.p,{children:["Disable ",(0,i.jsx)(n.code,{children:"QML debugging and profiling"})," and ",(0,i.jsx)(n.code,{children:"Qt Quick Compiler"}),", they are not used."]}),"\n",(0,i.jsxs)(n.p,{children:["In the left sidebar open ",(0,i.jsx)(n.code,{children:"Dependencies"})," and check ",(0,i.jsx)(n.code,{children:"TinyORM"})," project and ",(0,i.jsx)(n.code,{children:"Synchronize configuration"}),", this setting ensures that the current project will be rebuilt correctly when the ",(0,i.jsx)(n.code,{children:"TinyORM"})," library source code changes."]}),"\n",(0,i.jsxs)(n.p,{children:["Everything is ready to build, you can press ",(0,i.jsx)("kbd",{children:"Ctrl"}),"+",(0,i.jsx)("kbd",{children:"b"})," to build the project."]}),"\n",(0,i.jsx)(n.h3,{id:"execute-hello-world-qmake",children:"Execute Hello world"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"QtCreator"})," takes care of all the necessary configurations, sets up the build environment correctly, and also prepends dependency libraries on the system path on Windows and on the ",(0,i.jsx)(n.code,{children:"LD_LIBRARY_PATH"})," on Linux."]}),"\n",(0,i.jsxs)(n.p,{children:["The only thing you might want to change is to run the ",(0,i.jsx)(n.code,{children:"HelloWorld"})," example in the new terminal window. To do so, hit ",(0,i.jsx)("kbd",{children:"Ctrl"}),"+",(0,i.jsx)("kbd",{children:"5"})," to open the ",(0,i.jsx)(n.code,{children:"Project Settings"})," tab and select ",(0,i.jsx)(n.code,{children:"Run"})," in the left sidebar to open the ",(0,i.jsx)(n.code,{children:"Run Settings"}),", then in the ",(0,i.jsx)(n.code,{children:"Run"})," section select the ",(0,i.jsx)(n.code,{children:"Run in terminal"})," checkbox."]}),"\n",(0,i.jsxs)(n.p,{children:["To execute the ",(0,i.jsx)(n.code,{children:"HelloWorld"})," example press ",(0,i.jsx)("kbd",{children:"Ctrl"})," + ",(0,i.jsx)("kbd",{children:"r"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The output will look like this."}),"\n",(0,i.jsx)(o.A,{className:"language-less",children:'Executed prepared query (6ms, -1 results, 0 affected, tinyorm_default) : select * from posts\n1 "First Post"\n2 "Second Post"'})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(j,{...e})}):j(e)}},9365:(e,n,l)=>{l.d(n,{A:()=>o});l(6540);var i=l(4164);const r={tabItem:"tabItem_Ymn6"};var t=l(4848);function o(e){let{children:n,hidden:l,className:o}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,o),hidden:l,children:n})}},1470:(e,n,l)=>{l.d(n,{A:()=>y});var i=l(6540),r=l(4164),t=l(3104),o=l(6347),a=l(205),s=l(7485),d=l(1682),c=l(679);function h(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:l}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:l,attributes:i,default:r}}=e;return{value:n,label:l,attributes:i,default:r}}))}(l);return function(e){const n=(0,d.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,l])}function p(e){let{value:n,tabValues:l}=e;return l.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:l}=e;const r=(0,o.W6)(),t=function(e){let{queryString:n=!1,groupId:l}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!l)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return l??null}({queryString:n,groupId:l});return[(0,s.aZ)(t),(0,i.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(r.location.search);n.set(t,e),r.replace({...r.location,search:n.toString()})}),[t,r])]}function x(e){const{defaultValue:n,queryString:l=!1,groupId:r}=e,t=u(e),[o,s]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:l}=e;if(0===l.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:l}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${l.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=l.find((e=>e.default))??l[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:t}))),[d,h]=m({queryString:l,groupId:r}),[x,j]=function(e){let{groupId:n}=e;const l=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,t]=(0,c.Dv)(l);return[r,(0,i.useCallback)((e=>{l&&t.set(e)}),[l,t])]}({groupId:r}),g=(()=>{const e=d??x;return p({value:e,tabValues:t})?e:null})();(0,a.A)((()=>{g&&s(g)}),[g]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);s(e),h(e),j(e)}),[h,j,t]),tabValues:t}}var j=l(2303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=l(4848);function f(e){let{className:n,block:l,selectedValue:i,selectValue:o,tabValues:a}=e;const s=[],{blockElementScrollPositionUntilNextRender:d}=(0,t.a_)(),c=e=>{const n=e.currentTarget,l=s.indexOf(n),r=a[l].value;r!==i&&(d(n),o(r))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const l=s.indexOf(e.currentTarget)+1;n=s[l]??s[0];break}case"ArrowLeft":{const l=s.indexOf(e.currentTarget)-1;n=s[l]??s[s.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":l},n),children:a.map((e=>{let{value:n,label:l,attributes:t}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>s.push(e),onKeyDown:h,onClick:c,...t,className:(0,r.A)("tabs__item",g.tabItem,t?.className,{"tabs__item--active":i===n}),children:l??n},n)}))})}function _(e){let{lazy:n,children:l,selectedValue:r}=e;const t=(Array.isArray(l)?l:[l]).filter(Boolean);if(n){const e=t.find((e=>e.props.value===r));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function T(e){const n=x(e);return(0,b.jsxs)("div",{className:(0,r.A)("tabs-container",g.tabList),children:[(0,b.jsx)(f,{...n,...e}),(0,b.jsx)(_,{...n,...e})]})}function y(e){const n=(0,j.A)();return(0,b.jsx)(T,{...e,children:h(e.children)},String(n))}},7324:(e,n,l)=>{l.d(n,{$E:()=>j,A3:()=>b,CW:()=>g,Dx:()=>c,F4:()=>u,Fi:()=>d,J_:()=>y,LQ:()=>f,Lf:()=>k,OO:()=>r,Q7:()=>_,b:()=>a,cy:()=>s,gg:()=>m,kl:()=>p,os:()=>h,pW:()=>t,ux:()=>x,vf:()=>i,xj:()=>o,xt:()=>T});const i="shell",r="database",t="application",o="bash",a="pwsh",s="zsh",d="maria",c="mysql",h="postgres",u="sqlite",p="application",m="bash",x="pwsh",j="zsh",g="MariaDB",b="MySQL",f="PostgreSQL",_="SQLite",T="tinyorm.org",y="$HOME/Code/c/",k="$env:USERPROFILE\\Code\\c\\"},6362:(e,n,l)=>{l.d(n,{A:()=>t});var i=l(6540),r=l(1838);function t(){const e=(0,i.useContext)(r.A);if(null!=e)return e;throw new Error("useRootFolderContext is used outside of Layout component.")}},6694:(e,n,l)=>{l.d(n,{OZ:()=>s,Sn:()=>o,T3:()=>c,bw:()=>d,nC:()=>h,np:()=>a});var i=l(6362),r=l(2303),t=l(7324);const o=function(e,n){return void 0===n&&(n=!0),u((0,i.A)().rootFolder[e]??d(e),e,n)},a=()=>(0,i.A)().rootFolder[t.pW]??d(t.pW),s=function(e,n){if(void 0===n&&(n=!0),null==e)throw new Error("The groupId in the applicationFolderPath() can not be empty.");const l=n||e!==t.b?"/":"\\";return u(o(e)+l+a(),e,n)};function d(e){if(null==e)throw new Error("The groupId in the folderDefaultValue() can not be empty.");if(!(0,r.A)())return"";switch(e){case t.b:return t.Lf;case t.xj:return t.J_;case t.pW:return t.xt;default:throw new Error(`No default value for '${e}' groupId in the folderDefaultValue().`)}}function c(e){return e===t.pW}function h(e,n){if(null==n||""===n)return n;const l="$ENV{$1}$2";switch(e){case t.b:return m(n).replace(/\$env:(.+?)(\/.*)/,l);case t.xj:return n.replace(/\$(.+?)(\/.*)/,l);default:throw new Error(`Unsupported shell type '${e}' in the convertToCmakeEnvVariable().`)}}function u(e,n,l){if(void 0===l&&(l=!0),null==e||""===e)return e;if(n!==t.b)return p(e);const i=p(e);return l?m(i):function(e){return null==e||""===e?e:e.replaceAll(/\/+/g,"\\")}(i)}function p(e){return null==e||""===e?e:e.replace(/[/\\]+$/,"")}function m(e){return null==e||""===e?e:e.replaceAll(/\\+(?! )/g,"/")}},7028:(e,n,l)=>{l.d(n,{A:()=>i});const i=l.p+"assets/images/qmake-build_settings-ebdc6c0c056d11462096ff10cba682a1.png"},3180:(e,n,l)=>{l.d(n,{A:()=>i});const i=l.p+"assets/images/qmake-configure_project-8caf87e6af4452f0c28bd15c85c392fc.png"}}]);