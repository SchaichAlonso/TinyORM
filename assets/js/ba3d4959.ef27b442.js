"use strict";(self.webpackChunktinyorm_org=self.webpackChunktinyorm_org||[]).push([[170],{2512:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>Q,contentTitle:()=>_,default:()=>q,frontMatter:()=>v,metadata:()=>T,toc:()=>D});var i=t(4848),r=t(8453),a=t(8774),s=t(9365),o=t(1470),l=t(6540);let c=null,d=null;function h(){const[e,n]=(0,l.useState)(!1),[t,r]=(0,l.useState)(!1);return(0,l.useEffect)((()=>(u(),()=>{u()})),[]),(0,i.jsxs)("form",{children:[(0,i.jsxs)("div",{className:"tinyorm-configuration-row",children:[(0,i.jsx)("label",{htmlFor:"tinyorm-toggle-full",children:"Full configuration"}),(0,i.jsx)("input",{id:"tinyorm-toggle-full",type:"checkbox",checked:e,onChange:()=>n(p),title:"Show full configuration example"})]}),(0,i.jsxs)("div",{className:"tinyorm-configuration-row",children:[(0,i.jsx)("label",{htmlFor:"tinyorm-toggle-prefix",children:"Prefix environment"}),(0,i.jsx)("input",{id:"tinyorm-toggle-prefix",type:"checkbox",checked:t,onChange:()=>r(S),title:"Prefix all environment variables by the database type"})]})]})}function u(){c=null,d=null}function p(e){const n=c||(c=document.getElementById("tinyorm-configuration")?.querySelectorAll(".tabs-container")),t=!e;if(!n)return e;if(2!==n.length)throw new Error(`Wrong number of .tabs-container (!== 2) found in the toggle configuration feature, found ${n.length}.`);return t?(n[0].style.display="none",n[1].style.display="block"):(n[0].style.display="block",n[1].style.display="none"),!e}const m='"DB_',g="MARIA",x="MYSQL",f="PGSQL",b="SQLITE",j=[x,f,b,g,x,f,b,g];function S(e){const n=function(){if(d)return d;const e=document.getElementById("tinyorm-configuration")?.querySelectorAll(".prism-code > code");if(!e)return e;if(8!==e.length)throw new Error(`Wrong number of .prism-code > code (!== 8) found in the prefix env. feature, found ${e.length}.`);return d=new Array(e.length),e.forEach(((e,n)=>{d[n]=Array.from(e.querySelectorAll(".token.string")).filter((e=>e?.textContent.startsWith(m)))})),d}(),t=!e;return n?(n.forEach(((e,n)=>{e.forEach((e=>{const i=e.textContent,r=`${m}${j[n]}_`;if(t)e.textContent=`${r}${i.substring(4)}`;else{if(!i.startsWith(r))throw new Error(`Token doesn't start with the '${r}' prefix.`);e.textContent=`${m}${i.substring(r.length)}`}}))})),!e):e}var y=t(7324);const v={sidebar_position:0,sidebar_label:"Getting Started",description:"TinyORM makes interacting with a database extremely simple using raw SQL, a fluent query builder, and the TinyORM. It provides first-party support for four databases MySQL/MariaDB, PostgreSQL, and SQLite.",keywords:["c++ orm","database","getting started","tinyorm"]},_="Database: Getting Started",T={id:"database/getting-started",title:"Database: Getting Started",description:"TinyORM makes interacting with a database extremely simple using raw SQL, a fluent query builder, and the TinyORM. It provides first-party support for four databases MySQL/MariaDB, PostgreSQL, and SQLite.",source:"@site/docs/database/getting-started.mdx",sourceDirName:"database",slug:"/database/getting-started",permalink:"/database/getting-started",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0,sidebar_label:"Getting Started",description:"TinyORM makes interacting with a database extremely simple using raw SQL, a fluent query builder, and the TinyORM. It provides first-party support for four databases MySQL/MariaDB, PostgreSQL, and SQLite.",keywords:["c++ orm","database","getting started","tinyorm"]},sidebar:"tinyormSidebar",previous:{title:"\ud83d\ude80 Supported Compilers",permalink:"/supported-compilers"},next:{title:"Query Builder",permalink:"/database/query-builder"}},Q={},D=[{value:"Introduction",id:"introduction",level:2},{value:"Configuration",id:"configuration",level:3},{value:"SQLite Configuration",id:"sqlite-configuration",level:4},{value:"SSL Connections",id:"ssl-connections",level:3},{value:"MySQL",id:"mysql",level:5},{value:"PostgreSQL",id:"postgresql",level:5},{value:"Running SQL Queries",id:"running-sql-queries",level:2},{value:"Running A Select Query",id:"running-a-select-query",level:4},{value:"Selecting Scalar Values",id:"selecting-scalar-values",level:4},{value:"Running An Insert Statement",id:"running-an-insert-statement",level:4},{value:"Running An Update Statement",id:"running-an-update-statement",level:4},{value:"Running A Delete Statement",id:"running-a-delete-statement",level:4},{value:"Running A General Statement",id:"running-a-general-statement",level:4},{value:"Running An Unprepared Statement",id:"running-an-unprepared-statement",level:4},{value:"Implicit Commits",id:"implicit-commits",level:4},{value:"Using Multiple Database Connections",id:"using-multiple-database-connections",level:3},{value:"Database Transactions",id:"database-transactions",level:2},{value:"Manually Using Transactions",id:"manually-using-transactions",level:4},{value:"Multi-threading support",id:"multi-threading-support",level:2}];function L(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"database-getting-started",children:"Database: Getting Started"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#configuration",children:"Configuration"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#ssl-connections",children:"SSL Connections"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#running-sql-queries",children:"Running SQL Queries"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#using-multiple-database-connections",children:"Using Multiple Database Connections"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#database-transactions",children:"Database Transactions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#multi-threading-support",children:"Multi-threading support"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)("div",{class:"api-stability alert alert--success",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(a.A,{to:"/stability#stability-indexes",children:(0,i.jsx)(n.strong,{children:"Stability: 2"})})," - Stable"]})}),"\n",(0,i.jsxs)(n.p,{children:["Almost every modern application interacts with a database. TinyORM makes interacting with a database extremely simple using raw SQL, a ",(0,i.jsx)(n.a,{href:"/database/query-builder",children:"fluent query builder"}),", and the ",(0,i.jsx)(n.a,{href:"/tinyorm/getting-started",children:"TinyORM"}),". Currently, TinyORM provides first-party support for four databases:"]}),"\n",(0,i.jsx)("div",{id:"databases-supported-versions",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["MySQL ",(0,i.jsx)(n.code,{children:">=5.7"})," (",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/MySQL#Release_history",children:"Version Policy"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["MariaDB ",(0,i.jsx)(n.code,{children:">=10.3"})," (",(0,i.jsx)(n.a,{href:"https://mariadb.org/about/#maintenance-policy",children:"Version Policy"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["PostgreSQL ",(0,i.jsx)(n.code,{children:">=11"})," (",(0,i.jsx)(n.a,{href:"https://www.postgresql.org/support/versioning/",children:"Version Policy"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["SQLite ",(0,i.jsx)(n.code,{children:">=3.8.8"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["native rename column ",(0,i.jsx)(n.code,{children:">=3.25.0"})," (",(0,i.jsx)(n.a,{href:"https://www.sqlite.org/lang_altertable.html#alter_table_rename_column",children:"docs"})," , ",(0,i.jsx)(n.a,{href:"https://www.sqlite.org/releaselog/3_25_0.html",children:"release notes"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["native drop column ",(0,i.jsx)(n.code,{children:">=3.35.0"})," (",(0,i.jsx)(n.a,{href:"https://www.sqlite.org/lang_altertable.html#alter_table_drop_column",children:"docs"}),", ",(0,i.jsx)(n.a,{href:"https://www.sqlite.org/releaselog/3_35_0.html",children:"release notes"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["generated columns ",(0,i.jsx)(n.code,{children:">=3.31.0"})," (",(0,i.jsx)(n.a,{href:"https://www.sqlite.org/gencol.html",children:"docs"}),", ",(0,i.jsx)(n.a,{href:"https://www.sqlite.org/releaselog/3_31_0.html",children:"release notes"}),")"]}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,i.jsxs)(n.p,{children:["TinyORM internally uses ",(0,i.jsx)(n.code,{children:"QtSql"})," module, you can look for ",(0,i.jsx)(n.a,{href:"https://doc.qt.io/qt/sql-driver.html#supported-databases",children:"supported databases"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"TinyORM's code is ready and designed to simply add support for the  SQL Server."})}),"\n",(0,i.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["You can create and configure a new database connection using the ",(0,i.jsx)(n.code,{children:"create"})," method provided by the ",(0,i.jsx)(n.code,{children:"DB"})," facade:"]}),"\n",(0,i.jsxs)("div",{id:"tinyorm-configuration",children:[(0,i.jsx)(h,{}),(0,i.jsxs)(o.A,{className:"tinyorm-configuration-basic",groupId:y.OO,children:[(0,i.jsx)(s.A,{value:y.Dx,label:y.A3,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nusing Orm::DB;\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {"driver",          "QMYSQL"},\n    {"host",            qEnvironmentVariable("DB_HOST", "127.0.0.1")},\n    {"port",            qEnvironmentVariable("DB_PORT", "3306")},\n    {"database",        qEnvironmentVariable("DB_DATABASE", "")},\n    {"username",        qEnvironmentVariable("DB_USERNAME", "root")},\n    {"password",        qEnvironmentVariable("DB_PASSWORD", "")},\n    {"charset",         qEnvironmentVariable("DB_CHARSET", "utf8mb4")},\n    {"collation",       qEnvironmentVariable("DB_COLLATION", "utf8mb4_0900_ai_ci")},\n    {"timezone",        "+00:00"},\n    /* Specifies what time zone all QDateTime-s will have, the overridden default is\n       the QTimeZone::UTC, set to the QTimeZone::LocalTime or\n       QtTimeZoneType::DontConvert to use the system local time. */\n    {"qt_timezone",     QVariant::fromValue(QTimeZone::UTC)},\n    {"prefix",          ""},\n    {"prefix_indexes",  false},\n    {"strict",          true},\n    {"engine",          "InnoDB"},\n    {"options",         QVariantHash()},\n});\n'})})}),(0,i.jsx)(s.A,{value:y.os,label:y.LQ,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nusing Orm::DB;\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {"driver",             "QPSQL"},\n    {"host",               qEnvironmentVariable("DB_HOST", "127.0.0.1")},\n    {"port",               qEnvironmentVariable("DB_PORT", "5432")},\n    {"database",           qEnvironmentVariable("DB_DATABASE", "")},\n    {"search_path",        qEnvironmentVariable("DB_SEARCHPATH", "public")},\n    {"username",           qEnvironmentVariable("DB_USERNAME", "postgres")},\n    {"password",           qEnvironmentVariable("DB_PASSWORD", "")},\n    {"charset",            qEnvironmentVariable("DB_CHARSET", "utf8")},\n    {"timezone",           "UTC"},\n    /* Specifies what time zone all QDateTime-s will have, the overridden default is\n       the QTimeZone::UTC, set to the QTimeZone::LocalTime or\n       QtTimeZoneType::DontConvert to use the system local time. */\n    {"qt_timezone",        QVariant::fromValue(QTimeZone::UTC)},\n    {"prefix",             ""},\n    {"prefix_indexes",     false},\n    {"options",            QVariantHash()},\n});\n'})})}),(0,i.jsx)(s.A,{value:y.F4,label:y.Q7,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nusing Orm::DB;\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {"driver",                  "QSQLITE"},\n    {"database",                qEnvironmentVariable("DB_DATABASE", "/example/example.sqlite3")},\n    {"foreign_key_constraints", qEnvironmentVariable("DB_FOREIGN_KEYS", "true")},\n    {"check_database_exists",   true},\n    /* Specifies what time zone all QDateTime-s will have, the overridden default is\n       the QTimeZone::UTC, set to the QTimeZone::LocalTime or\n       QtTimeZoneType::DontConvert to use the system local time. */\n    {"qt_timezone",             QVariant::fromValue(QTimeZone::UTC)},\n    /* Return a QDateTime/QDate with the correct time zone instead of the QString,\n       only works when the qt_timezone isn\'t set to the DontConvert. */\n    {"return_qdatetime",        true},\n    {"prefix",                  ""},\n    {"prefix_indexes",          false},\n});\n'})})}),(0,i.jsx)(s.A,{value:y.Fi,label:y.CW,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nusing Orm::DB;\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {"driver",          "QMYSQL"},\n    {"host",            qEnvironmentVariable("DB_HOST", "127.0.0.1")},\n    {"port",            qEnvironmentVariable("DB_PORT", "3306")},\n    {"database",        qEnvironmentVariable("DB_DATABASE", "")},\n    {"username",        qEnvironmentVariable("DB_USERNAME", "root")},\n    {"password",        qEnvironmentVariable("DB_PASSWORD", "")},\n    {"charset",         qEnvironmentVariable("DB_CHARSET", "utf8mb4")},\n    {"collation",       qEnvironmentVariable("DB_COLLATION", "utf8mb4_unicode_520_ci")},\n    {"timezone",        "+00:00"},\n    /* Specifies what time zone all QDateTime-s will have, the overridden default is\n       the QTimeZone::UTC, set to the QTimeZone::LocalTime or\n       QtTimeZoneType::DontConvert to use the system local time. */\n    {"qt_timezone",     QVariant::fromValue(QTimeZone::UTC)},\n    {"prefix",          ""},\n    {"prefix_indexes",  false},\n    {"strict",          true},\n    {"engine",          "InnoDB"},\n    {"options",         QVariantHash()},\n});\n'})})})]}),(0,i.jsxs)(o.A,{className:"tinyorm-configuration-full",groupId:y.OO,children:[(0,i.jsx)(s.A,{value:y.Dx,label:y.A3,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n#include <orm/utils/configuration.hpp>\n\nusing Orm::DB;\n\nusing ConfigUtils = Orm::Utils::Configuration;\n\nusing namespace Orm::Constants; // NOLINT(google-build-using-namespace)\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {driver_,         QMYSQL},\n    {host_,           qEnvironmentVariable("DB_HOST", H127001)},\n    {port_,           qEnvironmentVariable("DB_PORT", P3306)},\n    {database_,       qEnvironmentVariable("DB_DATABASE", EMPTY)},\n    {username_,       qEnvironmentVariable("DB_USERNAME", ROOT)},\n    {password_,       qEnvironmentVariable("DB_PASSWORD", EMPTY)},\n    {charset_,        qEnvironmentVariable("DB_CHARSET", UTF8MB4)},\n    {collation_,      qEnvironmentVariable("DB_COLLATION", UTF8MB40900aici)},\n    // SSL-related\n    {ssl_ca,          QStringLiteral("C:/mysql/data/ca.pem")},\n    {ssl_cert,        QStringLiteral("C:/mysql/data/client-cert.pem")},\n    {ssl_key,         QStringLiteral("C:/mysql/data/client-key.pem")},\n    {ssl_mode,        VerifyCA},\n    // Or\n//    {options,         ConfigUtils::mysqlSslOptions()},\n    {timezone_,       TZ00},\n    /* Specifies what time zone all QDateTime-s will have, the overridden default is\n       the QTimeZone::UTC, set to the QTimeZone::LocalTime or\n       QtTimeZoneType::DontConvert to use the system local time. */\n    {qt_timezone,     QVariant::fromValue(QTimeZone::UTC)},\n    {prefix_,         EMPTY},\n    {prefix_indexes,  false},\n    {strict_,         true},\n//    {isolation_level, QStringLiteral("REPEATABLE READ")}, // MySQL default is REPEATABLE READ for InnoDB\n    {engine_,         InnoDB},\n    {Version,         {}}, // Autodetect\n    {options_,        QVariantHash()},\n    // Examples\n//    {options_,        QStringLiteral("MYSQL_OPT_CONNECT_TIMEOUT = 1 ; MYSQL_OPT_READ_TIMEOUT=1")},\n//    {options_,        QVariantHash {{QStringLiteral("MYSQL_OPT_CONNECT_TIMEOUT"), 1},\n//                                    {QStringLiteral("MYSQL_OPT_READ_TIMEOUT"),    1}}},\n});\n'})})}),(0,i.jsx)(s.A,{value:y.os,label:y.LQ,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n#include <orm/utils/configuration.hpp>\n\nusing Orm::DB;\n\nusing ConfigUtils = Orm::Utils::Configuration;\n\nusing namespace Orm::Constants; // NOLINT(google-build-using-namespace)\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {driver_,            QPSQL},\n    {application_name,   QStringLiteral("Example application")},\n    {host_,              qEnvironmentVariable("DB_HOST", H127001)},\n    {port_,              qEnvironmentVariable("DB_PORT", P5432)},\n    {database_,          qEnvironmentVariable("DB_DATABASE", EMPTY)},\n    {search_path,        qEnvironmentVariable("DB_SEARCHPATH", PUBLIC)},\n    {username_,          qEnvironmentVariable("DB_USERNAME", postgres_)},\n    {password_,          qEnvironmentVariable("DB_PASSWORD", EMPTY)},\n    {charset_,           qEnvironmentVariable("DB_CHARSET", UTF8)},\n    // SSL-related\n    {sslmode_,           QStringLiteral("verify-full")},\n    {sslcert,            QStringLiteral("C:/example/postgres.crt")},\n    {sslkey,             QStringLiteral("C:/example/postgres.key")},\n    {sslrootcert,        QStringLiteral("C:/example/root.crt")},\n    // Or\n//    {options_,           ConfigUtils::postgresSslOptions()},\n    {timezone_,          UTC},\n    /* Specifies what time zone all QDateTime-s will have, the overridden default is\n       the QTimeZone::UTC, set to the QTimeZone::LocalTime or\n       QtTimeZoneType::DontConvert to use the system local time. */\n    {qt_timezone,        QVariant::fromValue(QTimeZone::UTC)},\n    {prefix_,            EMPTY},\n    {prefix_indexes,     false},\n//    {isolation_level,    QStringLiteral("REPEATABLE READ")}, // Postgres default is READ COMMITTED\n//    {synchronous_commit, QStringLiteral("off")},  // Postgres default is on\n    // ConnectionFactory provides a default value for this, this is only for reference\n//    {dont_drop,          QStringList {spatial_ref_sys}},\n    {options_,           QVariantHash()},\n});\n'})})}),(0,i.jsx)(s.A,{value:y.F4,label:y.Q7,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n#include <orm/utils/configuration.hpp>\n\nusing Orm::DB;\n\nusing ConfigUtils = Orm::Utils::Configuration;\n\nusing namespace Orm::Constants; // NOLINT(google-build-using-namespace)\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {driver_,                 QSQLITE},\n    {database_,               qEnvironmentVariable("DB_DATABASE", "C:/SQLite/example.sqlite3")},\n    {foreign_key_constraints, qEnvironmentVariable("DB_FOREIGN_KEYS", "true")},\n    {check_database_exists,   true},\n    /* Specifies what time zone all QDateTime-s will have, the overridden default is\n       the QTimeZone::UTC, set to the QTimeZone::LocalTime or\n       QtTimeZoneType::DontConvert to use the system local time. */\n    {qt_timezone,             QVariant::fromValue(QTimeZone::UTC)},\n    /* Return a QDateTime/QDate with the correct time zone instead of the QString,\n       only works when the qt_timezone isn\'t set to the DontConvert. */\n    {return_qdatetime,        true},\n    {prefix_,                 EMPTY},\n    {prefix_indexes,          false},\n});\n'})})}),(0,i.jsx)(s.A,{value:y.Fi,label:y.CW,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n#include <orm/utils/configuration.hpp>\n\nusing Orm::DB;\n\nusing ConfigUtils = Orm::Utils::Configuration;\n\nusing namespace Orm::Constants; // NOLINT(google-build-using-namespace)\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {driver_,         QMYSQL},\n    {host_,           qEnvironmentVariable("DB_HOST", H127001)},\n    {port_,           qEnvironmentVariable("DB_PORT", P3306)},\n    {database_,       qEnvironmentVariable("DB_DATABASE", EMPTY)},\n    {username_,       qEnvironmentVariable("DB_USERNAME", ROOT)},\n    {password_,       qEnvironmentVariable("DB_PASSWORD", EMPTY)},\n    {charset_,        qEnvironmentVariable("DB_CHARSET", UTF8MB4)},\n    {collation_,      qEnvironmentVariable("DB_COLLATION", UTF8MB4Unicode520ci)},\n    // SSL-related\n    {ssl_ca,          QStringLiteral("C:/maria/data/ca.pem")},\n    {ssl_cert,        QStringLiteral("C:/maria/data/client-cert.pem")},\n    {ssl_key,         QStringLiteral("C:/maria/data/client-key.pem")},\n    // Or\n//    {options,         ConfigUtils::mariaSslOptions()},\n    {timezone_,       TZ00},\n    /* Specifies what time zone all QDateTime-s will have, the overridden default is\n       the QTimeZone::UTC, set to the QTimeZone::LocalTime or\n       QtTimeZoneType::DontConvert to use the system local time. */\n    {qt_timezone,     QVariant::fromValue(QTimeZone::UTC)},\n    {prefix_,         EMPTY},\n    {prefix_indexes,  false},\n    {strict_,         true},\n//    {isolation_level, QStringLiteral("REPEATABLE READ")}, // MariaDB default is REPEATABLE READ for InnoDB\n    {engine_,         InnoDB},\n    {Version,         {}}, // Autodetect\n    {options_,        QVariantHash()},\n    // Examples\n//    {options_,        QStringLiteral("MYSQL_OPT_CONNECT_TIMEOUT = 1 ; MYSQL_OPT_READ_TIMEOUT=1")},\n//    {options_,        QVariantHash {{QStringLiteral("MYSQL_OPT_CONNECT_TIMEOUT"), 1},\n//                                    {QStringLiteral("MYSQL_OPT_READ_TIMEOUT"),    1}}},\n});\n'})})})]})]}),"\n",(0,i.jsxs)(n.p,{children:["The first argument is configuration hash which is of type ",(0,i.jsx)(n.code,{children:"QVariantHash"})," and the second argument specifies the name of the ",(0,i.jsx)(n.em,{children:"connection"}),", this connection will also be a ",(0,i.jsx)(n.em,{children:"default connection"}),". You can configure multiple database connections at once and choose the needed one before executing SQL query, section ",(0,i.jsx)(n.a,{href:"#using-multiple-database-connections",children:"Using Multiple Database Connections"})," describes how to create and use multiple database connections."]}),"\n",(0,i.jsxs)(n.p,{children:["You may also configure connection options by ",(0,i.jsx)(n.code,{children:"options"})," key as ",(0,i.jsx)(n.code,{children:"QVariantHash"})," or ",(0,i.jsx)(n.code,{children:"QString"}),", you can pass any ",(0,i.jsx)(n.a,{href:"https://doc.qt.io/qt/qsqldatabase.html#setConnectOptions",children:"connection options"})," supported by ",(0,i.jsx)(n.code,{children:"QSqlDatabase"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["You can also configure ",(0,i.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/9.0/en/innodb-transaction-isolation-levels.html",children:"Transaction Isolation Levels"})," for MySQL connection with the ",(0,i.jsx)(n.code,{children:"isolation_level"})," configuration option."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"version"})," option is relevant only for the MySQL connections and you can save/avoid one database query (select version()) if you provide it manually. Based on this version will be decided which ",(0,i.jsx)(n.a,{href:"https://github.com/silverqx/TinyORM/blob/main/src/orm/connectors/mysqlconnector.cpp#L182",children:"session variables"})," will be set if strict mode is enabled and whether to use an ",(0,i.jsx)(n.a,{href:"https://github.com/silverqx/TinyORM/blob/main/src/orm/query/grammars/mysqlgrammar.cpp#L36",children:"alias"})," during the ",(0,i.jsx)(n.code,{children:"upsert"})," method call."]}),"\n",(0,i.jsxs)(n.p,{children:["Breaking values are as follows; use an upsert alias on the MySQL >=8.0.19 and remove the ",(0,i.jsx)(n.code,{children:"NO_AUTO_CREATE_USER"})," sql mode on the MySQL >=8.0.11 if the strict mode is enabled."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["A database connection is resolved lazily, which means that the connection configuration is only saved after the ",(0,i.jsx)(n.code,{children:"DB::create"})," method call. The connection will be resolved after you run some query or you can create it using the ",(0,i.jsx)(n.code,{children:"DB::connection"})," method."]})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["You can also use predefined string constants to avoid unnecessary ",(0,i.jsx)(n.code,{children:"QString"})," instantiations, as used in the ",(0,i.jsx)(n.code,{children:"tom"})," migrations ",(0,i.jsx)(n.a,{href:"/building/migrations#string-constants-example",children:"example"}),"."]})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"/tinyorm/casts#date-casting-serialization-and-timezones",children:"Date Casting, Serialization & Timezones"})," if you have problems with ",(0,i.jsx)(n.code,{children:"qt_timezone"})," configuration option and ",(0,i.jsx)(n.code,{children:"QTimeZone"})," value on older ",(0,i.jsx)(n.code,{children:"Qt <6.5"})," versions."]})}),"\n",(0,i.jsx)(n.h4,{id:"sqlite-configuration",children:"SQLite Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["SQLite databases are contained within a single file on your filesystem. You can create a new SQLite database using the ",(0,i.jsx)(n.code,{children:"touch"})," command in your terminal: ",(0,i.jsx)(n.code,{children:"touch database.sqlite3"}),". After the database has been created, you may configure SQLite database connection:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {"driver",    "QSQLITE"},\n    {"database",  qEnvironmentVariable("DB_DATABASE", "/absolute/path/to/database.sqlite3")},\n    {"foreign_key_constraints", qEnvironmentVariable("DB_FOREIGN_KEYS", "true")},\n    {"check_database_exists",   true},\n    {"prefix",                  ""},\n});\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"database"})," configuration value is the absolute path to the database. To enable foreign key constraints for SQLite connections, you should set the ",(0,i.jsx)(n.code,{children:"foreign_key_constraints"})," configuration value to ",(0,i.jsx)(n.code,{children:"true"}),", if this configuration value is not set, then the default of the SQLite driver will be used (currently the default is ",(0,i.jsx)(n.strong,{children:"disabled"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["If the ",(0,i.jsx)(n.code,{children:"check_database_exists"})," configuration value is set to the ",(0,i.jsx)(n.code,{children:"true"})," value, then the database connection throws an ",(0,i.jsx)(n.code,{children:"Orm::InvalidArgumentError"})," exception, when the SQLite database file doesn't exist. If it is set to the ",(0,i.jsx)(n.code,{children:"false"})," value and the SQLite database file doesn't exist, then it will be created for you by SQLite driver. The default value is ",(0,i.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"ssl-connections",children:"SSL Connections"}),"\n",(0,i.jsxs)(n.p,{children:["SSL connections are supported for the ",(0,i.jsx)(n.code,{children:"MySQL"})," and ",(0,i.jsx)(n.code,{children:"PostgreSQL"})," databases. They can be set using the ",(0,i.jsx)(n.code,{children:"options"})," configuration option."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["This feature is heavily dependent on the underlying ",(0,i.jsx)(n.code,{children:"QSqlDatabase"})," module. What means that you can pass the same ",(0,i.jsx)(n.a,{href:"https://doc.qt.io/qt/qsqldatabase.html#setConnectOptions",children:"connection options"})," to the ",(0,i.jsx)(n.code,{children:"TinyORM"})," that the ",(0,i.jsx)(n.code,{children:"QSqlDatabase"})," accepts."]})}),"\n",(0,i.jsx)(n.h5,{id:"mysql",children:"MySQL"}),"\n",(0,i.jsxs)(n.p,{children:["You have to pass the ",(0,i.jsx)(n.code,{children:"SSL_CA"}),", ",(0,i.jsx)(n.code,{children:"SSL_CERT"}),", ",(0,i.jsx)(n.code,{children:"SSL_KEY"}),", and ",(0,i.jsx)(n.code,{children:"MYSQL_OPT_SSL_MODE"})," options."]}),"\n",(0,i.jsxs)(o.A,{groupId:y.vf,children:[(0,i.jsx)(s.A,{value:y.b,label:y.ux,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nusing Orm::DB;\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {"driver",  "QMYSQL"},\n    {"host",    qEnvironmentVariable("DB_MYSQL_HOST", "127.0.0.1")},\n    ...\n    // highlight-start\n    {"options", QVariantHash({{"SSL_CA",   "C:/mysql/data/ca.pem"},\n                              {"SSL_CERT", "C:/mysql/data/client-cert.pem"},\n                              {"SSL_KEY",  "C:/mysql/data/client-key.pem"},\n                              {"MYSQL_OPT_SSL_MODE", "VERIFY_CA"}})},\n    // highlight-end\n});\n'})})}),(0,i.jsx)(s.A,{value:y.xj,label:y.gg,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nusing Orm::DB;\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {"driver",  "QMYSQL"},\n    {"host",    qEnvironmentVariable("DB_MYSQL_HOST", "127.0.0.1")},\n    ...\n    // highlight-start\n    {"options", QVariantHash({{"SSL_CA",   "~/.local/share/TinyORM/ssl/ca.pem"},\n                              {"SSL_CERT", "~/.local/share/TinyORM/ssl/client-cert.pem"},\n                              {"SSL_KEY",  "~/.local/share/TinyORM/ssl/client-key.pem"},\n                              {"MYSQL_OPT_SSL_MODE", "VERIFY_CA"}})},\n    // highlight-end\n});\n'})})})]}),"\n",(0,i.jsxs)(n.p,{children:["You may also use the ",(0,i.jsx)(n.code,{children:"ConfigUtils::mysqlSslOptions()"})," or the ",(0,i.jsx)(n.code,{children:"ConfigUtils::insertMySqlSslOptions()"})," methods to insert these options for you and define them using the ",(0,i.jsx)(n.code,{children:"DB_MYSQL_SSL_CA"}),", ",(0,i.jsx)(n.code,{children:"DB_MYSQL_SSL_CERT"}),", ",(0,i.jsx)(n.code,{children:"DB_MYSQL_SSL_KEY"}),", and ",(0,i.jsx)(n.code,{children:"DB_MYSQL_SSL_MODE"})," environment variables."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n#include <orm/utils/configuration.hpp>\n\nusing Orm::DB;\n\nusing ConfigUtils = Orm::Utils::Configuration;\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {"driver",  "QMYSQL"},\n    {"host",    qEnvironmentVariable("DB_MYSQL_HOST", "127.0.0.1")},\n    ...\n    // highlight-next-line\n    {"options", ConfigUtils::mysqlSslOptions()},\n});\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can define these SSL-related options in the top-level configuration, they will be copied to the ",(0,i.jsx)(n.code,{children:"options"})," option hash during configuration parsing. The top-level configuration takes precedence and overwrites the options in the ",(0,i.jsx)(n.code,{children:"options"})," hash."]}),"\n",(0,i.jsxs)(o.A,{groupId:y.vf,children:[(0,i.jsx)(s.A,{value:y.b,label:y.ux,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nusing Orm::DB;\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {"driver",   "QMYSQL"},\n    {"host",     qEnvironmentVariable("DB_MYSQL_HOST", "127.0.0.1")},\n    ...\n    // highlight-start\n    {"SSL_CA",   "C:/mysql/data/ca.pem"},\n    {"SSL_CERT", "C:/mysql/data/client-cert.pem"},\n    {"SSL_KEY",  "C:/mysql/data/client-key.pem"},\n    {"MYSQL_OPT_SSL_MODE", "VERIFY_CA"},\n    // highlight-end\n});\n'})})}),(0,i.jsx)(s.A,{value:y.xj,label:y.gg,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nusing Orm::DB;\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {"driver",   "QMYSQL"},\n    {"host",     qEnvironmentVariable("DB_MYSQL_HOST", "127.0.0.1")},\n    ...\n    // highlight-start\n    {"SSL_CA",   "~/.local/share/TinyORM/ssl/ca.pem"},\n    {"SSL_CERT", "~/.local/share/TinyORM/ssl/client-cert.pem"},\n    {"SSL_KEY",  "~/.local/share/TinyORM/ssl/client-key.pem"},\n    {"MYSQL_OPT_SSL_MODE", "VERIFY_CA"},\n    // highlight-end\n});\n'})})})]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["You can take a look at the GitHub actions how the ",(0,i.jsx)(n.code,{children:"MySQL"})," certificates are generated in the CI pipeline for ",(0,i.jsx)(n.a,{href:"https://github.com/silverqx/TinyORM/blob/main/.github/workflows/msvc2022-qt6.yml",children:"Windows"})," and ",(0,i.jsx)(n.a,{href:"https://github.com/silverqx/TinyORM/blob/main/.github/workflows/linux-qt6.yml",children:"Linux"}),"."]})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["You can also pass the ",(0,i.jsx)(n.code,{children:"QString"})," to the ",(0,i.jsx)(n.code,{children:"options"})," configuration separated by the ",(0,i.jsx)(n.code,{children:";"})," semicolon character and use the ",(0,i.jsx)(n.code,{children:"="})," to assign values."]})}),"\n",(0,i.jsx)(n.h5,{id:"postgresql",children:"PostgreSQL"}),"\n",(0,i.jsxs)(n.p,{children:["You have to pass the ",(0,i.jsx)(n.a,{href:"https://www.postgresql.org/docs/current/libpq-ssl.html#LIBPQ-SSL-SSLMODE-STATEMENTS",children:(0,i.jsx)(n.code,{children:"sslmode"})})," or the deprecated ",(0,i.jsx)(n.a,{href:"https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-REQUIRESSL",children:(0,i.jsx)(n.code,{children:"requiressl"})})," options."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nusing Orm::DB;\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {"driver",  "QPSQL"},\n    {"host",    qEnvironmentVariable("DB_PGSQL_HOST", "127.0.0.1")},\n    ...\n    // highlight-next-line\n    {"options", QVariantHash({{"sslmode", "verify-full"}})},\n});\n'})}),"\n",(0,i.jsxs)(n.p,{children:["And place your ",(0,i.jsx)(n.strong,{children:"client"})," certificates to the ",(0,i.jsx)(n.code,{children:"~/.postgres/"})," on ",(0,i.jsx)(n.a,{href:"https://www.postgresql.org/docs/current/libpq-ssl.html#LIBPQ-SSL-FILE-USAGE",children:"Linux"})," and ",(0,i.jsx)(n.code,{children:"$env:APPDATA/postgres/"})," on Windows. Everything is described in the PostgreSQL's ",(0,i.jsx)(n.a,{href:"https://www.postgresql.org/docs/current/libpq-ssl.html",children:"libpq client"})," and ",(0,i.jsx)(n.a,{href:"https://www.postgresql.org/docs/15/ssl-tcp.html#SSL-FILE-USAGE",children:"server"})," documentation."]}),"\n",(0,i.jsxs)(n.p,{children:["If you want to keep your ",(0,i.jsx)(n.strong,{children:"client"})," certificates in your own location, you can set the ",(0,i.jsx)(n.code,{children:"sslcert"}),", ",(0,i.jsx)(n.code,{children:"sslkey"}),", and ",(0,i.jsx)(n.code,{children:"sslrootcert"})," options."]}),"\n",(0,i.jsxs)(o.A,{groupId:y.vf,children:[(0,i.jsx)(s.A,{value:y.b,label:y.ux,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nusing Orm::DB;\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {"driver",  "QPSQL"},\n    {"host",    qEnvironmentVariable("DB_PGSQL_HOST", "127.0.0.1")},\n    ...\n    // highlight-next-line\n    {"options", QVariantHash({{"sslmode",     "verify-full"},\n                              // highlight-start\n                              {"sslcert",     "C:/example/postgres.crt"},\n                              {"sslkey",      "C:/example/postgres.key"},\n                              {"sslrootcert", "C:/example/root.crt"}})},\n                              // highlight-end\n});\n'})})}),(0,i.jsx)(s.A,{value:y.xj,label:y.gg,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nusing Orm::DB;\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {"driver",  "QPSQL"},\n    {"host",    qEnvironmentVariable("DB_PGSQL_HOST", "127.0.0.1")},\n    ...\n    // highlight-next-line\n    {"options", QVariantHash({{"sslmode",     "verify-full"},\n                              // highlight-start\n                              {"sslcert",     "/example/postgres.crt"},\n                              {"sslkey",      "/example/postgres.key"},\n                              {"sslrootcert", "/example/root.crt"}})},\n                              // highlight-end\n});\n'})})})]}),"\n",(0,i.jsxs)(n.p,{children:["You can define these SSL-related options in the top-level configuration, they will be copied to the ",(0,i.jsx)(n.code,{children:"options"})," option hash during a configuration parsing. The top-level configuration takes precedence and overwrites the options in the ",(0,i.jsx)(n.code,{children:"options"})," hash."]}),"\n",(0,i.jsxs)(o.A,{groupId:y.vf,children:[(0,i.jsx)(s.A,{value:y.b,label:y.ux,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nusing Orm::DB;\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {"driver",  "QPSQL"},\n    {"host",    qEnvironmentVariable("DB_PGSQL_HOST", "127.0.0.1")},\n    ...\n    // highlight-start\n    {"sslmode",     "verify-full"},\n    {"sslcert",     "C:/example/postgres.crt"},\n    {"sslkey",      "C:/example/postgres.key"},\n    {"sslrootcert", "C:/example/root.crt"},\n    // highlight-end\n});\n'})})}),(0,i.jsx)(s.A,{value:y.xj,label:y.gg,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nusing Orm::DB;\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {"driver",  "QPSQL"},\n    {"host",    qEnvironmentVariable("DB_PGSQL_HOST", "127.0.0.1")},\n    ...\n    // highlight-start\n    {"sslmode",     "verify-full"},\n    {"sslcert",     "/example/postgres.crt"},\n    {"sslkey",      "/example/postgres.key"},\n    {"sslrootcert", "/example/root.crt"},\n    // highlight-end\n});\n'})})})]}),"\n",(0,i.jsxs)(n.p,{children:["You may also use the ",(0,i.jsx)(n.code,{children:"ConfigUtils::postgresSslOptions()"})," or the ",(0,i.jsx)(n.code,{children:"ConfigUtils::insertPostgresSslOptions()"})," methods to insert the ",(0,i.jsx)(n.code,{children:"sslmode"}),", ",(0,i.jsx)(n.code,{children:"sslcert"}),", ",(0,i.jsx)(n.code,{children:"sslkey"}),", and ",(0,i.jsx)(n.code,{children:"sslrootcert"})," options for you and define them using the ",(0,i.jsx)(n.code,{children:"DB_PGSQL_SSLMODE"}),", ",(0,i.jsx)(n.code,{children:"DB_PGSQL_SSLCERT"}),", ",(0,i.jsx)(n.code,{children:"DB_PGSQL_SSLKEY"}),", and ",(0,i.jsx)(n.code,{children:"DB_PGSQL_SSLROOTCERT"})," environment variable."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n#include <orm/utils/configuration.hpp>\n\nusing Orm::DB;\n\nusing ConfigUtils = Orm::Utils::Configuration;\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {"driver",  "QPSQL"},\n    {"host",    qEnvironmentVariable("DB_PGSQL_HOST", "127.0.0.1")},\n    ...\n    // highlight-next-line\n    {"options", ConfigUtils::postgresSslOptions()},\n});\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["The PostgreSQL's libpq client library provides the ",(0,i.jsx)(n.a,{href:"https://www.postgresql.org/docs/current/libpq-envars.html#id-1.7.3.22.3.4.13.1.1",children:(0,i.jsx)(n.code,{children:"PGSSLMODE"})}),", ",(0,i.jsx)(n.a,{href:"https://www.postgresql.org/docs/current/libpq-envars.html#id-1.7.3.22.3.4.16.1.1",children:(0,i.jsx)(n.code,{children:"PGSSLCERT"})}),", ",(0,i.jsx)(n.a,{href:"https://www.postgresql.org/docs/current/libpq-envars.html#id-1.7.3.22.3.4.17.1.1",children:(0,i.jsx)(n.code,{children:"PGSSLKEY"})}),", and ",(0,i.jsx)(n.a,{href:"https://www.postgresql.org/docs/current/libpq-envars.html#id-1.7.3.22.3.4.18.1.1",children:(0,i.jsx)(n.code,{children:"PGSSLROOTCERT"})})," environment variables, so you don't have to use TinyORM's ",(0,i.jsx)(n.code,{children:"options"})," configuration and may use these environment variables instead."]})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["You can take a look at the GitHub actions how the ",(0,i.jsx)(n.code,{children:"PostgreSQL"})," certificates are generated in the CI pipeline for ",(0,i.jsx)(n.a,{href:"https://github.com/silverqx/TinyORM/blob/main/.github/workflows/msvc2022-qt6.yml",children:"Windows"})," and ",(0,i.jsx)(n.a,{href:"https://github.com/silverqx/TinyORM/blob/main/.github/workflows/linux-qt6.yml",children:"Linux"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"running-sql-queries",children:"Running SQL Queries"}),"\n",(0,i.jsxs)(n.p,{children:["Once you have configured your database connection, you may run queries using the ",(0,i.jsx)(n.code,{children:"DB"})," facade. The ",(0,i.jsx)(n.code,{children:"DB"})," facade provides methods for each type of query: ",(0,i.jsx)(n.code,{children:"select"}),", ",(0,i.jsx)(n.code,{children:"update"}),", ",(0,i.jsx)(n.code,{children:"insert"}),", ",(0,i.jsx)(n.code,{children:"delete"}),", and ",(0,i.jsx)(n.code,{children:"statement"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"running-a-select-query",children:"Running A Select Query"}),"\n",(0,i.jsxs)(n.p,{children:["To run a basic SELECT query, you may use the ",(0,i.jsx)(n.code,{children:"select"})," method on the ",(0,i.jsx)(n.code,{children:"DB"})," facade:"]}),"\n",(0,i.jsxs)(n.p,{children:['auto users = DB::select("select * from users where active = ?", ',1,");"]}),"\n",(0,i.jsxs)(n.p,{children:["The first argument passed to the ",(0,i.jsx)(n.code,{children:"select"})," method is the SQL query, while the second argument is any parameter bindings that need to be bound to the query. Typically, these are the values of the ",(0,i.jsx)(n.code,{children:"where"})," clause constraints. Parameter binding provides protection against SQL injection."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"select"})," method returns a ",(0,i.jsx)(n.code,{children:"QSqlQuery"})," containing the results of the query, where each result can be accessed by ",(0,i.jsx)(n.code,{children:"QSqlQuery::next"})," method. Look into the ",(0,i.jsx)(n.code,{children:"QSqlQuery"}),' documentation on how to obtain results from the "query". You may access each column\'s value by ',(0,i.jsx)(n.code,{children:"QSqlQuery::value"})," method. The first ",(0,i.jsx)(n.code,{children:"bool"})," return value is the value returned from ",(0,i.jsx)(n.code,{children:"QSqlQuery::exec"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <QDebug>\n\n#include <orm/db.hpp>\n\nauto users = DB::select("select * from users");\n\nwhile(users.next())\n    qDebug() << users.value("name").toString();\n'})}),"\n",(0,i.jsx)(n.h4,{id:"selecting-scalar-values",children:"Selecting Scalar Values"}),"\n",(0,i.jsxs)(n.p,{children:["Sometimes your database query may result in a single, scalar value. Instead of being required to retrieve the query's scalar result from a record instance, TinyORM allows you to retrieve this value directly using the ",(0,i.jsx)(n.code,{children:"scalar"})," shortcut method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nauto states = DB::scalar(\n    "select count(case when state = \'pending\' then 1 end) as states "\n      "from comments"\n);\n\n// With binding\nauto states = DB::scalar(\n    "select count(case when state = ? then 1 end) as states from comments",\n    {"pending"}\n);\n'})}),"\n",(0,i.jsx)(n.h4,{id:"running-an-insert-statement",children:"Running An Insert Statement"}),"\n",(0,i.jsxs)(n.p,{children:["To execute an ",(0,i.jsx)(n.code,{children:"insert"})," statement, you may use the ",(0,i.jsx)(n.code,{children:"insert"})," method on the ",(0,i.jsx)(n.code,{children:"DB"})," facade. Like ",(0,i.jsx)(n.code,{children:"select"}),", this method accepts the SQL query as its first argument and bindings as its second argument and returns ",(0,i.jsx)(n.code,{children:"QSqlQuery"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nDB::insert("insert into users (id, name) values (?, ?)", {1, "Marc"});\n'})}),"\n",(0,i.jsx)(n.h4,{id:"running-an-update-statement",children:"Running An Update Statement"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"update"})," method should be used to update existing records in the database. The number of rows affected by the statement and ",(0,i.jsx)(n.code,{children:"QSqlQuery"})," is returned by the method as ",(0,i.jsx)(n.code,{children:"std::tuple<int, QSqlQuery>"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <QDateTime>\n\n#include <orm/db.hpp>\n\nauto [affected, query] = DB::update(\n    "update users set updated_at = ? where name = ?",\n    {QDateTime::currentDateTimeUtc(), "Anita"}\n);\n\nif (!affected)\n    qDebug() << "Any record was updated.";\n'})}),"\n",(0,i.jsx)(n.h4,{id:"running-a-delete-statement",children:"Running A Delete Statement"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"remove"})," method should be used to delete records from the database. Like ",(0,i.jsx)(n.code,{children:"update"}),", the number of affected rows and ",(0,i.jsx)(n.code,{children:"QSqlQuery"})," will be returned by the method as ",(0,i.jsx)(n.code,{children:"std::tuple<int, QSqlQuery>"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nauto [affected, query] = DB::remove("delete from users");\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"delete"})," can not be used as the method name because it is the reserved word."]})}),"\n",(0,i.jsx)(n.h4,{id:"running-a-general-statement",children:"Running A General Statement"}),"\n",(0,i.jsxs)(n.p,{children:["Some database statements do not return any value. For these types of operations, you may use the ",(0,i.jsx)(n.code,{children:"statement"})," method on the ",(0,i.jsx)(n.code,{children:"DB"})," facade:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'DB::statement("drop table users");\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"DB::statement"})," method should be used for ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Data_definition_language",children:"DDL"}),' queries, don\'t use it for "select" queries because it internally calls ',(0,i.jsx)(n.code,{children:"recordsHaveBeenModified"})," method."]})}),"\n",(0,i.jsx)(n.h4,{id:"running-an-unprepared-statement",children:"Running An Unprepared Statement"}),"\n",(0,i.jsxs)(n.p,{children:["Sometimes you may want to execute an SQL statement without binding any values. You may use the ",(0,i.jsx)(n.code,{children:"DB"})," facade's ",(0,i.jsx)(n.code,{children:"unprepared"})," method to accomplish this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"DB::unprepared(\"update users set votes = 100 where name = 'Dries'\");\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"Since unprepared statements do not bind parameters, they may be vulnerable to SQL injection. You should never allow user controlled values within an unprepared statement."})}),"\n",(0,i.jsx)(n.h4,{id:"implicit-commits",children:"Implicit Commits"}),"\n",(0,i.jsxs)(n.p,{children:["When using the ",(0,i.jsx)(n.code,{children:"DB"})," facade's ",(0,i.jsx)(n.code,{children:"statement"})," methods within transactions, you must be careful to avoid statements that cause ",(0,i.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/9.0/en/implicit-commit.html",children:"implicit commits"}),". These statements will cause the database engine to indirectly commit the entire transaction, leaving TinyORM unaware of the database's transaction level. An example of such a statement is creating a database table:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'DB::statement("create table users (name varchar(255) null)");\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Please refer to the MySQL manual for ",(0,i.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/9.0/en/implicit-commit.html",children:"a list of all statements"})," that trigger implicit commits."]}),"\n",(0,i.jsx)(n.h3,{id:"using-multiple-database-connections",children:"Using Multiple Database Connections"}),"\n",(0,i.jsxs)(n.p,{children:["You can configure multiple database connections at once during ",(0,i.jsx)(n.code,{children:"DatabaseManager"})," instantiation using the ",(0,i.jsx)(n.code,{children:"DB::create"})," overload, where the first argument is a hash of multiple connections and is of type ",(0,i.jsx)(n.code,{children:"QHash<QString, QVariantHash>"})," and the second argument is the name of the default connection:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\n// Ownership of a shared_ptr()\nauto manager = DB::create({\n    {"mysql", {\n        {"driver",    "QMYSQL"},\n        {"host",      qEnvironmentVariable("DB_MYSQL_HOST", "127.0.0.1")},\n        {"port",      qEnvironmentVariable("DB_MYSQL_PORT", "3306")},\n        {"database",  qEnvironmentVariable("DB_MYSQL_DATABASE", "")},\n        {"username",  qEnvironmentVariable("DB_MYSQL_USERNAME", "root")},\n        {"password",  qEnvironmentVariable("DB_MYSQL_PASSWORD", "")},\n        {"charset",   qEnvironmentVariable("DB_MYSQL_CHARSET", "utf8mb4")},\n        {"collation", qEnvironmentVariable("DB_MYSQL_COLLATION", "utf8mb4_0900_ai_ci")},\n        {"strict",    true},\n        {"options",   QVariantHash()},\n    }},\n    {"sqlite", {\n        {"driver",    "QSQLITE"},\n        {"database",  qEnvironmentVariable("DB_SQLITE_DATABASE", "")},\n        {"foreign_key_constraints", qEnvironmentVariable("DB_SQLITE_FOREIGN_KEYS", "true")},\n        {"check_database_exists",   true},\n        {"prefix",                  ""},\n    }},\n}, "mysql");\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If your application needs to use multiple connections, you may access each connection via the ",(0,i.jsx)(n.code,{children:"connection"})," method provided by the ",(0,i.jsx)(n.code,{children:"DB"})," facade. The connection name passed to the ",(0,i.jsx)(n.code,{children:"connection"})," method should correspond to one of the connections key listed in your configuration:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <orm/db.hpp>\n\nauto query = DB::connection("mysql_test").select(...);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You may access the raw underlying ",(0,i.jsx)(n.code,{children:"QSqlQuery"})," instance of a connection using the ",(0,i.jsx)(n.code,{children:"getSqlQuery"})," method on a connection instance:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"auto query = DB::connection().getSqlQuery();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Or you can use the shortcut method ",(0,i.jsx)(n.code,{children:"sqlQuery"})," provided by the ",(0,i.jsx)(n.code,{children:"DB"})," facade:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"auto query = DB::sqlQuery();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"database-transactions",children:"Database Transactions"}),"\n",(0,i.jsx)(n.h4,{id:"manually-using-transactions",children:"Manually Using Transactions"}),"\n",(0,i.jsxs)(n.p,{children:["If you would like to begin a transaction manually and have complete control over rollbacks and commits, you may use the ",(0,i.jsx)(n.code,{children:"beginTransaction"})," method provided by the ",(0,i.jsx)(n.code,{children:"DB"})," facade:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <orm/db.hpp>\n\nDB::beginTransaction();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can rollback the transaction via the ",(0,i.jsx)(n.code,{children:"rollBack"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"DB::rollBack();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Lastly, you can commit a transaction via the ",(0,i.jsx)(n.code,{children:"commit"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"DB::commit();\n"})}),"\n",(0,i.jsx)(n.p,{children:"All transaction methods accept a connection name as the optional argument:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'DB::beginTransaction("mysql_test");\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"DB"})," facade's transaction methods control the transactions for both the ",(0,i.jsx)(n.a,{href:"/database/query-builder",children:"query builder"})," and ",(0,i.jsx)(n.a,{href:"/tinyorm/getting-started",children:"TinyORM"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"multi-threading-support",children:"Multi-threading support"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"TinyORM"})," supports multi-threading for the ",(0,i.jsx)(n.code,{children:"MSVC"})," and ",(0,i.jsx)(n.code,{children:"GCC"})," on Linux compilers. Multi-threading is disabled for the ",(0,i.jsx)(n.code,{children:"Clang <14.0.3"})," compiler on MSYS2, ",(0,i.jsx)(n.code,{children:"Clang <14.0.4"})," on Linux and for the ",(0,i.jsx)(n.code,{children:"GCC"})," compiler on MSYS2. The reason are bugs in the ",(0,i.jsx)(n.code,{children:"TLS"})," wrapper that is generated by the ",(0,i.jsx)(n.a,{href:"https://en.cppreference.com/w/cpp/keyword/thread_local",children:(0,i.jsx)(n.code,{children:"thread_local"})})," keyword."]}),"\n",(0,i.jsx)(n.p,{children:"A connection can only be used from within the thread that created it. Moving connections between threads or creating queries from a different thread where the connection was created is not supported."}),"\n",(0,i.jsxs)(n.p,{children:["In addition, the third party libraries used by the ",(0,i.jsx)(n.code,{children:"QSqlDrivers"})," can impose further restrictions on using the SQL Module in a multithreaded program."]}),"\n",(0,i.jsxs)(n.p,{children:["In short, if you create a ",(0,i.jsx)(n.code,{children:"DB::connection"})," in some thread then you have to use this connection only from this particular thread and of course all queries that will be executed on this connection."]}),"\n",(0,i.jsx)(n.p,{children:"If you want to execute some query from another thread for the same connection then you have to create a new connection first and if you have a new connection you can send a query from this new thread to the database."}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/database/migrations#tables",children:(0,i.jsx)(n.code,{children:"schema builder"})})," and ",(0,i.jsx)(n.a,{href:"/database/migrations",children:(0,i.jsx)(n.code,{children:"migrations"})})," don't support multi-threading."]})})]})}function q(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(L,{...e})}):L(e)}},9365:(e,n,t)=>{t.d(n,{A:()=>s});t(6540);var i=t(4164);const r={tabItem:"tabItem_Ymn6"};var a=t(4848);function s(e){let{children:n,hidden:t,className:s}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,s),hidden:t,children:n})}},1470:(e,n,t)=>{t.d(n,{A:()=>v});var i=t(6540),r=t(4164),a=t(3104),s=t(6347),o=t(205),l=t(7485),c=t(1682),d=t(679);function h(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:r}}=e;return{value:n,label:t,attributes:i,default:r}}))}(t);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const r=(0,s.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(a),(0,i.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(r.location.search);n.set(a,e),r.replace({...r.location,search:n.toString()})}),[a,r])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,a=u(e),[s,l]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:a}))),[c,h]=m({queryString:t,groupId:r}),[g,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,a]=(0,d.Dv)(t);return[r,(0,i.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:r}),f=(()=>{const e=c??g;return p({value:e,tabValues:a})?e:null})();(0,o.A)((()=>{f&&l(f)}),[f]);return{selectedValue:s,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),x(e)}),[h,x,a]),tabValues:a}}var x=t(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(4848);function j(e){let{className:n,block:t,selectedValue:i,selectValue:s,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),r=o[t].value;r!==i&&(c(n),s(r))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>l.push(e),onKeyDown:h,onClick:d,...a,className:(0,r.A)("tabs__item",f.tabItem,a?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function S(e){let{lazy:n,children:t,selectedValue:r}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===r));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function y(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,r.A)("tabs-container",f.tabList),children:[(0,b.jsx)(j,{...n,...e}),(0,b.jsx)(S,{...n,...e})]})}function v(e){const n=(0,x.A)();return(0,b.jsx)(y,{...e,children:h(e.children)},String(n))}},7324:(e,n,t)=>{t.d(n,{$E:()=>x,A3:()=>b,CW:()=>f,Dx:()=>d,F4:()=>u,Fi:()=>c,J_:()=>v,LQ:()=>j,Lf:()=>_,OO:()=>r,Q7:()=>S,b:()=>o,cy:()=>l,gg:()=>m,kl:()=>p,os:()=>h,pW:()=>a,ux:()=>g,vf:()=>i,xj:()=>s,xt:()=>y});const i="shell",r="database",a="application",s="bash",o="pwsh",l="zsh",c="maria",d="mysql",h="postgres",u="sqlite",p="application",m="bash",g="pwsh",x="zsh",f="MariaDB",b="MySQL",j="PostgreSQL",S="SQLite",y="tinyorm.org",v="$HOME/Code/c/",_="$env:USERPROFILE\\Code\\c\\"},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(6540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);