"use strict";(self.webpackChunktinyorm_github_io=self.webpackChunktinyorm_github_io||[]).push([[799],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=d(n),u=o,c=h["".concat(s,".").concat(u)]||h[u]||m[u]||i;return n?a.createElement(c,r(r({ref:t},p),{},{components:n})):a.createElement(c,r({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var d=2;d<i;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7273:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return m}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],l={sidebar_position:1,sidebar_label:"Relationships",description:"TinyORM relationships are defined as methods on your TinyORM model classes. Since relationships also serve as powerful query builders, defining relationships as methods provides powerful method chaining and querying capabilities.",keywords:["c++ orm","relationships","relations","tinyorm"]},s="TinyORM: Relationships",d={unversionedId:"tinyorm/relationships",id:"tinyorm/relationships",title:"TinyORM: Relationships",description:"TinyORM relationships are defined as methods on your TinyORM model classes. Since relationships also serve as powerful query builders, defining relationships as methods provides powerful method chaining and querying capabilities.",source:"@site/docs/tinyorm/relationships.mdx",sourceDirName:"tinyorm",slug:"/tinyorm/relationships",permalink:"/tinyorm/relationships",draft:!1,editUrl:"https://github.com/silverqx/TinyORM-github.io/edit/main/docs/tinyorm/relationships.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Relationships",description:"TinyORM relationships are defined as methods on your TinyORM model classes. Since relationships also serve as powerful query builders, defining relationships as methods provides powerful method chaining and querying capabilities.",keywords:["c++ orm","relationships","relations","tinyorm"]},sidebar:"tinyormSidebar",previous:{title:"Getting Started",permalink:"/tinyorm/getting-started"},next:{title:"TinyORM",permalink:"/building/tinyorm"}},p={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Defining Relationships",id:"defining-relationships",level:2},{value:"Common Rules",id:"common-rules",level:3},{value:"One To One",id:"one-to-one",level:3},{value:"Defining The Inverse Of The Relationship",id:"defining-the-inverse-of-the-relationship",level:4},{value:"One To Many",id:"one-to-many",level:3},{value:"One To Many (Inverse) / Belongs To",id:"one-to-many-inverse",level:3},{value:"Default Models",id:"default-models",level:4},{value:"Many To Many Relationships",id:"many-to-many",level:2},{value:"Table Structure",id:"table-structure",level:4},{value:"Model Structure",id:"model-structure",level:4},{value:"Defining The Inverse Of The Relationship",id:"defining-the-inverse-of-the-relationship-1",level:4},{value:"Retrieving Intermediate Table Columns",id:"retrieving-intermediate-table-columns",level:3},{value:"Customizing The <code>pivot</code> Relation Name",id:"customizing-the-pivot-relation-name",level:4},{value:"Defining Custom Intermediate Table Models",id:"defining-custom-intermediate-table-models",level:3},{value:"Custom Pivot Models And Incrementing IDs",id:"custom-pivot-models-and-incrementing-ids",level:4},{value:"Querying Relations",id:"querying-relations",level:2},{value:"Chaining <code>orWhere</code> Clauses After Relationships",id:"chaining-orwhere-clauses-after-relationships",level:4},{value:"Relationship Methods",id:"relationship-methods",level:3},{value:"Querying Relationship Existence",id:"querying-relationship-existence",level:3},{value:"Related template parameter",id:"related-template-parameter",level:4},{value:"Querying Relationship Absence",id:"querying-relationship-absence",level:3},{value:"Eager Loading",id:"eager-loading",level:2},{value:"Eager Loading Multiple Relationships",id:"eager-loading-multiple-relationships",level:4},{value:"Nested Eager Loading",id:"nested-eager-loading",level:4},{value:"Eager Loading Specific Columns",id:"eager-loading-specific-columns",level:4},{value:"Eager Loading By Default",id:"eager-loading-by-default",level:4},{value:"Constraining Eager Loads",id:"constraining-eager-loads",level:3},{value:"Lazy Eager Loading",id:"lazy-eager-loading",level:3},{value:"Inserting &amp; Updating Related Models",id:"inserting-and-updating-related-models",level:2},{value:"The <code>save</code> Method",id:"the-save-method",level:3},{value:"Recursively Saving Models &amp; Relationships",id:"recursively-saving-models--relationships",level:4},{value:"The <code>create</code> Method",id:"the-create-method",level:3},{value:"Belongs To Relationships",id:"updating-belongs-to-relationships",level:3},{value:"Many To Many Relationships",id:"updating-many-to-many-relationships",level:3},{value:"Attaching / Detaching",id:"attaching--detaching",level:4},{value:"Syncing Associations",id:"syncing-associations",level:4},{value:"Updating A Record On The Intermediate Table",id:"updating-a-record-on-the-intermediate-table",level:4},{value:"Touching Parent Timestamps",id:"touching-parent-timestamps",level:2}],h={toc:m};function u(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tinyorm-relationships"},"TinyORM: Relationships"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#defining-relationships"},"Defining Relationships"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#common-rules"},"Common Rules")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#one-to-one"},"One To One")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#one-to-many"},"One To Many")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#one-to-many-inverse"},"One To Many (Inverse) / Belongs To")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#many-to-many"},"Many To Many Relationships"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#retrieving-intermediate-table-columns"},"Retrieving Intermediate Table Columns")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#defining-custom-intermediate-table-models"},"Defining Custom Intermediate Table Models")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#querying-relations"},"Querying Relations"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#relationship-methods"},"Relationship Methods")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#querying-relationship-existence"},"Querying Relationship Existence")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#querying-relationship-absence"},"Querying Relationship Absence")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#eager-loading"},"Eager Loading"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#constraining-eager-loads"},"Constraining Eager Loads")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#lazy-eager-loading"},"Lazy Eager Loading")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#inserting-and-updating-related-models"},"Inserting & Updating Related Models"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#the-save-method"},"The ",(0,i.kt)("inlineCode",{parentName:"a"},"save")," Method")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#the-create-method"},"The ",(0,i.kt)("inlineCode",{parentName:"a"},"create")," Method")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#updating-belongs-to-relationships"},"Belongs To Relationships")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#updating-many-to-many-relationships"},"Many To Many Relationships")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#touching-parent-timestamps"},"Touching Parent Timestamps"))),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Database tables are often related to one another. For example, a blog post may have many comments or an order could be related to the user who placed it. TinyORM makes managing and working with these relationships easy, and supports basic relationships:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#one-to-one"},"One To One")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#one-to-many"},"One To Many")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#many-to-many"},"Many To Many"))),(0,i.kt)("h2",{id:"defining-relationships"},"Defining Relationships"),(0,i.kt)("p",null,"TinyORM relationships are defined as methods on your TinyORM model classes. Since relationships also serve as powerful ",(0,i.kt)("a",{parentName:"p",href:"/database/query-builder"},"query builders"),", defining relationships as methods provides powerful method chaining and querying capabilities. For example, we may chain additional query constraints on this ",(0,i.kt)("inlineCode",{parentName:"p"},"posts")," relationship:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'user->posts()->whereEq("active", 1).get();\n')),(0,i.kt)("p",null,"But, before diving too deep into using relationships, let's learn how to define each type of relationship supported by TinyORM."),(0,i.kt)("h3",{id:"common-rules"},"Common Rules"),(0,i.kt)("p",null,'Before you start defining relationship methods, you have to declare a model class, let\'s examine following model class with a "one" type relation:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#pragma once\n#ifndef USER_HPP\n#define USER_HPP\n\n#include <orm/tiny/model.hpp>\n\n#include "models/phone.hpp"\n\nusing Orm::Tiny::Model;\nusing Orm::Tiny::Relations::HasOne;\n\nclass User final : public Model<User, Phone>\n{\n    friend Model;\n    using Model::Model;\n\npublic:\n    /*! Get the phone associated with the user. */\n    std::unique_ptr<HasOne<User, Phone>>\n    phone()\n    {\n        return hasOne<Phone>();\n    }\n\nprivate:\n    /*! Map of relation names to methods. */\n    QHash<QString, RelationVisitor> u_relations {\n        {"phone", &User::phone); }},\n    };\n};\n\n#endif // USER_HPP\n')),(0,i.kt)("p",null,"First, you have to extend the ",(0,i.kt)("inlineCode",{parentName:"p"},"Model<Derived, AllRelations...>"),", it is a common class for all models, the first template parameter is the type-id of the defined model itself, this pattern is called a ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern"},"Curiously recurring template pattern")," pattern."),(0,i.kt)("p",null,"However, the second parameter is more interesting, here you have to provide a type-id of all related models. The TinyORM needs these types to store relationships in the hash."),(0,i.kt)("p",null,"Next, you have to define the ",(0,i.kt)("inlineCode",{parentName:"p"},"u_relations")," hash, which maps a relation name to the relationship method. \ud83d\udd25\ud83d\ude80\ud83d\ude4c"),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You may omit the ",(0,i.kt)("inlineCode",{parentName:"p"},"friend Model")," declaration and define all the private data and function members as public."))),(0,i.kt)("h3",{id:"one-to-one"},"One To One"),(0,i.kt)("p",null,"A one-to-one relationship is a very basic type of database relationship. For example, a ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model might be associated with one ",(0,i.kt)("inlineCode",{parentName:"p"},"Phone")," model. To define this relationship, we will place a ",(0,i.kt)("inlineCode",{parentName:"p"},"phone")," method on the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model. The ",(0,i.kt)("inlineCode",{parentName:"p"},"phone")," method should call the ",(0,i.kt)("inlineCode",{parentName:"p"},"hasOne")," method and return its result. The ",(0,i.kt)("inlineCode",{parentName:"p"},"hasOne<Related>")," method is available to your model via the model's ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::Tiny::Model<Derived, AllRelations...>")," base class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#pragma once\n#ifndef USER_HPP\n#define USER_HPP\n\n#include <orm/tiny/model.hpp>\n\n#include "models/phone.hpp"\n\nusing Orm::Tiny::Model;\nusing Orm::Tiny::Relations::HasOne;\n\nclass User final : public Model<User, Phone>\n{\n    friend Model;\n    using Model::Model;\n\npublic:\n    /*! Get the phone associated with the user. */\n    std::unique_ptr<HasOne<User, Phone>>\n    phone()\n    {\n        return hasOne<Phone>();\n    }\n\nprivate:\n    /*! Map of relation names to methods. */\n    QHash<QString, RelationVisitor> u_relations {\n        {"phone", [](auto &v) { v(&User::phone); }},\n    };\n};\n\n#endif // USER_HPP\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Related")," template argument provided to the ",(0,i.kt)("inlineCode",{parentName:"p"},"hasOne<Related>")," method is the type-id of the related model class. Once the relationship is defined, we may retrieve the related record using Model's ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelationValue<Related, Tag>")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto phone = User::find(1)->getRelationValue<Phone, Orm::One>("phone");\n')),(0,i.kt)("p",null,"TinyORM determines the foreign key of the relationship based on the parent model name. In this case, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Phone")," model is automatically assumed to have a ",(0,i.kt)("inlineCode",{parentName:"p"},"user_id")," foreign key. If you wish to override this convention, you may pass a first argument to the ",(0,i.kt)("inlineCode",{parentName:"p"},"hasOne")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'return hasOne<Phone>("foreign_key");\n')),(0,i.kt)("p",null,"Additionally, TinyORM assumes that the foreign key should have a value matching the primary key column of the parent. In other words, TinyORM will look for the value of the user's ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," column in the ",(0,i.kt)("inlineCode",{parentName:"p"},"user_id")," column of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Phone")," record. If you would like the relationship to use a primary key value other than ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," or your model's ",(0,i.kt)("inlineCode",{parentName:"p"},"u_primaryKey")," data member, you may pass a second argument to the ",(0,i.kt)("inlineCode",{parentName:"p"},"hasOne")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'return hasOne<Phone>("foreign_key", "local_key");\n')),(0,i.kt)("h4",{id:"defining-the-inverse-of-the-relationship"},"Defining The Inverse Of The Relationship"),(0,i.kt)("p",null,"So, we can access the ",(0,i.kt)("inlineCode",{parentName:"p"},"Phone")," model from our ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model. Next, let's define a relationship on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Phone")," model that will let us access the user that owns the phone. We can define the inverse of a ",(0,i.kt)("inlineCode",{parentName:"p"},"hasOne")," relationship using the ",(0,i.kt)("inlineCode",{parentName:"p"},"belongsTo<Related>")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#pragma once\n#ifndef PHONE_HPP\n#define PHONE_HPP\n\n#include <orm/tiny/model.hpp>\n\n#include "models/user.hpp"\n\nusing Orm::Tiny::Model;\nusing Orm::Tiny::Relations::BelongsTo;\n\nclass Phone final : public Model<Phone, User>\n{\n    friend Model;\n    using Model::Model;\n\npublic:\n    /*! Get the user that owns the phone. */\n    std::unique_ptr<BelongsTo<Phone, User>>\n    user()\n    {\n        return belongsTo<User>();\n    }\n\nprivate:\n    /*! Map of relation names to methods. */\n    QHash<QString, RelationVisitor> u_relations {\n        {"user", [](auto &v) { v(&Phone::user); }},\n    };\n};\n\n#endif // PHONE_HPP\n')),(0,i.kt)("p",null,"When invoking the ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," method, TinyORM will attempt to find a ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model that has an ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," which matches the ",(0,i.kt)("inlineCode",{parentName:"p"},"user_id")," column on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Phone")," model."),(0,i.kt)("p",null,"TinyORM determines the foreign key name by examining the type-name of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Related")," template parameter and suffixing the type-name with ",(0,i.kt)("inlineCode",{parentName:"p"},"_id"),". So, in this case, TinyORM assumes that the ",(0,i.kt)("inlineCode",{parentName:"p"},"Phone")," model has a ",(0,i.kt)("inlineCode",{parentName:"p"},"user_id")," column."),(0,i.kt)("p",null," However, if the foreign key on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Phone")," model is not ",(0,i.kt)("inlineCode",{parentName:"p"},"user_id"),", you may pass a custom key name as the first argument to the ",(0,i.kt)("inlineCode",{parentName:"p"},"belongsTo")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'using Orm::Tiny::Relations::BelongsTo;\n\n/*! Get the user that owns the phone. */\nstd::unique_ptr<BelongsTo<Phone, User>>\nuser()\n{\n    return belongsTo<User>("foreign_key");\n}\n')),(0,i.kt)("p",null,"If the parent model does not use ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," as its primary key, or you wish to find the associated model using a different column, you may pass a second argument to the ",(0,i.kt)("inlineCode",{parentName:"p"},"belongsTo")," method specifying the parent table's custom key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'/*! Get the user that owns the phone. */\nstd::unique_ptr<BelongsTo<Phone, User>>\nuser()\n{\n    return belongsTo<User>("foreign_key", "owner_key");\n}\n')),(0,i.kt)("p",null,"The third ",(0,i.kt)("inlineCode",{parentName:"p"},"belongsTo"),' parameter is the relation name, if you pass it, the foreign key name will be determined from it. By convention, TinyORM will "snake case" this relation name  and suffix it with a ',(0,i.kt)("inlineCode",{parentName:"p"},"_")," followed by the name of the parent model's primary key column to generate foreign key, the ",(0,i.kt)("inlineCode",{parentName:"p"},"__func__")," predefined identifier is ideal for this. The relation name is also used in BelongsTo's ",(0,i.kt)("inlineCode",{parentName:"p"},"associate")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"disassociate")," methods:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/*! Get the user that owns the phone. */\nstd::unique_ptr<BelongsTo<Phone, User>>\nsomeUser()\n{\n    return belongsTo<User>({}, {}, __func__); // the foreign key will be some_user_id\n}\n")),(0,i.kt)("p",null,"The relation name will be guessed from the type-id of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Related")," template parameter, TinyORM takes this name and changes the first character to lower case, so in the example above, the relation name will be ",(0,i.kt)("inlineCode",{parentName:"p"},"user"),"."),(0,i.kt)("h3",{id:"one-to-many"},"One To Many"),(0,i.kt)("p",null,"A one-to-many relationship is used to define relationships where a single model is the parent to one or more child models. For example, a blog post may have an infinite number of comments. Like all other TinyORM relationships, one-to-many relationships are defined by defining a ",(0,i.kt)("inlineCode",{parentName:"p"},"hasMany<Related>")," method on your TinyORM model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#pragma once\n#ifndef POST_HPP\n#define POST_HPP\n\n#include <orm/tiny/model.hpp>\n\n#include "models/comment.hpp"\n\nusing Orm::Tiny::Model;\nusing Orm::Tiny::Relations::HasMany;\n\nclass Post final : public Model<Post, Comment>\n{\n    friend Model;\n    using Model::Model;\n\npublic:\n    /*! Get the comments for the blog post. */\n    std::unique_ptr<HasMany<Post, Comment>>\n    comments()\n    {\n        return hasMany<Comment>();\n    }\n\nprivate:\n    /*! Map of relation names to methods. */\n    QHash<QString, RelationVisitor> u_relations {\n        {"comments", [](auto &v) { v(&Post::comments); }},\n    };\n};\n\n#endif // POST_HPP\n')),(0,i.kt)("p",null,"Remember, TinyORM will automatically determine the proper foreign key column for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Comment"),' model. By convention, TinyORM will take the "snake case" name of the parent model and suffix it with ',(0,i.kt)("inlineCode",{parentName:"p"},"_id"),". So, in this example, TinyORM will assume the foreign key column on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Comment")," model is ",(0,i.kt)("inlineCode",{parentName:"p"},"post_id"),"."),(0,i.kt)("p",null,"Once the relationship method has been defined, we can access the ",(0,i.kt)("inlineCode",{parentName:"p"},"QVector<Related *>")," of related comments by Model's ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelationValue<Related, Container = QVector>")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/post.hpp"\n\nauto comments = Post::find(1)->getRelationValue<Comment>("comments");\n\nfor (auto *comment : comments) {\n    //\n}\n')),(0,i.kt)("p",null,"Since all relationships also serve as ",(0,i.kt)("a",{parentName:"p",href:"/database/query-builder"},"query builders"),", you may add further constraints to the relationship query by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"comments")," method and continuing to chain conditions onto the query, all the ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyBuilder")," methods which are related to building queries are proxied:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto comment = Post::find(1)->comments()\n                     ->whereEq("title", "foo")\n                     .first();\n')),(0,i.kt)("p",null,"Like the ",(0,i.kt)("inlineCode",{parentName:"p"},"hasOne")," method, you may also override the foreign and local keys by passing additional arguments to the ",(0,i.kt)("inlineCode",{parentName:"p"},"hasMany")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'return hasMany<Comment>("foreign_key");\n\nreturn hasMany<Comment>("foreign_key", "local_key");\n')),(0,i.kt)("h3",{id:"one-to-many-inverse"},"One To Many (Inverse) / Belongs To"),(0,i.kt)("p",null,"Now that we can access all of a post's comments, let's define a relationship to allow a comment to access its parent post. To define the inverse of a ",(0,i.kt)("inlineCode",{parentName:"p"},"hasMany")," relationship, define a relationship method on the child model which calls the ",(0,i.kt)("inlineCode",{parentName:"p"},"belongsTo")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#pragma once\n#ifndef COMMENT_HPP\n#define COMMENT_HPP\n\n#include <orm/tiny/model.hpp>\n\n#include "models/post.hpp"\n\nusing Orm::Tiny::Model;\nusing Orm::Tiny::Relations::BelongsTo;\n\nclass Comment final : public Model<Comment, Post>\n{\n    friend Model;\n    using Model::Model;\n\npublic:\n    /*! Get the post that owns the comment. */\n    std::unique_ptr<BelongsTo<Comment, Post>>\n    post()\n    {\n        return belongsTo<Post>();\n    }\n\nprivate:\n    /*! Map of relation names to methods. */\n    QHash<QString, RelationVisitor> u_relations {\n        {"post", [](auto &v) { v(&Comment::post); }},\n    };\n};\n\n#endif // COMMENT_HPP\n')),(0,i.kt)("p",null,"Once the relationship has been defined, we can retrieve a comment's parent post by Model's ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelationValue<Related, Tag>")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/comment.hpp"\n\nauto comment = Comment::find(1);\n\nreturn comment->getRelationValue<Post, Orm::One>("post")->getAttribute("title").toString();\n')),(0,i.kt)("p",null,"In the example above, TinyORM will attempt to find a ",(0,i.kt)("inlineCode",{parentName:"p"},"Post")," model that has an ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," which matches the ",(0,i.kt)("inlineCode",{parentName:"p"},"post_id")," column on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Comment")," model."),(0,i.kt)("p",null,"TinyORM determines the foreign key name by examining the type-name of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Related")," template parameter and suffixing the type-name with a ",(0,i.kt)("inlineCode",{parentName:"p"},"_")," followed by the name of the parent model's primary key column. So, in this case, TinyORM assumes that the ",(0,i.kt)("inlineCode",{parentName:"p"},"Post")," model's foreign key on the ",(0,i.kt)("inlineCode",{parentName:"p"},"comments")," table is ",(0,i.kt)("inlineCode",{parentName:"p"},"post_id"),"."),(0,i.kt)("p",null,"However, if the foreign key for your relationship does not follow these conventions, you may pass a custom foreign key name as the first argument to the ",(0,i.kt)("inlineCode",{parentName:"p"},"belongsTo")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'using Orm::Tiny::Relations::BelongsTo;\n\n/*! Get the post that owns the comment. */\nstd::unique_ptr<BelongsTo<Comment, Post>>\npost()\n{\n    return belongsTo<Post>("foreign_key");\n}\n')),(0,i.kt)("p",null,"If your parent model does not use ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," as its primary key, or you wish to find the associated model using a different column, you may pass a second argument to the ",(0,i.kt)("inlineCode",{parentName:"p"},"belongsTo")," method specifying your parent table's custom key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'using Orm::Tiny::Relations::BelongsTo;\n\n/*! Get the post that owns the comment. */\nstd::unique_ptr<BelongsTo<Comment, Post>>\npost()\n{\n    return belongsTo<Post>("foreign_key", "owner_key");\n}\n')),(0,i.kt)("p",null,"The third ",(0,i.kt)("inlineCode",{parentName:"p"},"belongsTo"),' parameter is the relation name, if you pass it, the foreign key name will be determined from it. By convention, TinyORM will "snake case" this relation name  and suffix it with a ',(0,i.kt)("inlineCode",{parentName:"p"},"_")," followed by the name of the parent model's primary key column to generate foreign key, the ",(0,i.kt)("inlineCode",{parentName:"p"},"__func__")," predefined identifier is ideal for this. The relation name is also used in BelongsTo's ",(0,i.kt)("inlineCode",{parentName:"p"},"associate")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"disassociate")," methods:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/*! Get the post that owns the comment. */\nstd::unique_ptr<BelongsTo<Comment, Post>>\nsomePost()\n{\n    return belongsTo<Post>({}, {}, __func__); // the foreign key will be some_post_id\n}\n")),(0,i.kt)("p",null,"The relation name will be guessed from the type-id of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Related")," template parameter, TinyORM takes this name and changes the first character to lower case, so in the example above, the relation name will be ",(0,i.kt)("inlineCode",{parentName:"p"},"user"),"."),(0,i.kt)("h4",{id:"default-models"},"Default Models"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"belongsTo"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"hasOne")," relationships allow you to define a default model that will be returned if the given relationship is ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),". This pattern is often referred to as the ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Null_Object_pattern"},"Null Object pattern")," and can help remove conditional checks in your code. In the following example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," relation will return an empty ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model if no user is attached to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Post")," model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/*! Get the author of the post. */\nstd::unique_ptr<BelongsTo<Post, User>>\nuser()\n{\n    // Ownership of a unique_ptr()\n    auto relation = belongsTo<User>();\n\n    relation->withDefault();\n\n    return relation;\n}\n")),(0,i.kt)("p",null,"To populate the default model with attributes, you may pass the vector of attributes to the ",(0,i.kt)("inlineCode",{parentName:"p"},"withDefault")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'/*! Get the author of the post. */\nstd::unique_ptr<BelongsTo<Post, User>>\nuser()\n{\n    // Ownership of a unique_ptr()\n    auto relation = belongsTo<User>();\n\n    relation->withDefault({{"name", "Guest Author"}, {"is_active", false}});\n\n    return relation;\n}\n')),(0,i.kt)("h2",{id:"many-to-many"},"Many To Many Relationships"),(0,i.kt)("p",null,"Many-to-many relations are slightly more complicated than ",(0,i.kt)("inlineCode",{parentName:"p"},"hasOne")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"hasMany"),' relationships. An example of a many-to-many relationship is a user that has many roles and those roles are also shared by other users in the application. For example, a user may be assigned the role of "Author" and "Editor"; however, those roles may also be assigned to other users as well. So, a user has many roles and a role has many users.'),(0,i.kt)("h4",{id:"table-structure"},"Table Structure"),(0,i.kt)("p",null,"To define this relationship, three database tables are needed: ",(0,i.kt)("inlineCode",{parentName:"p"},"users"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"roles"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"role_user"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"role_user")," table is derived from the alphabetical order of the related model names and contains ",(0,i.kt)("inlineCode",{parentName:"p"},"user_id")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"role_id")," columns. This table is used as an intermediate table linking the users and roles."),(0,i.kt)("p",null,"Remember, since a role can belong to many users, we cannot simply place a ",(0,i.kt)("inlineCode",{parentName:"p"},"user_id")," column on the ",(0,i.kt)("inlineCode",{parentName:"p"},"roles")," table. This would mean that a role could only belong to a single user. In order to provide support for roles being assigned to multiple users, the ",(0,i.kt)("inlineCode",{parentName:"p"},"role_user")," table is needed. We can summarize the relationship's table structure like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"users\n    id - integer\n    name - string\n\nroles\n    id - integer\n    name - string\n\nrole_user\n    user_id - integer\n    role_id - integer\n")),(0,i.kt)("h4",{id:"model-structure"},"Model Structure"),(0,i.kt)("p",null,"Many-to-many relationships are defined by writing a method that returns the result of the ",(0,i.kt)("inlineCode",{parentName:"p"},"belongsToMany")," method. The ",(0,i.kt)("inlineCode",{parentName:"p"},"belongsToMany")," method is provided by the ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::Tiny::Model<Derived, AllRelations...>")," base class that is used by all of your application's TinyORM models. For example, let's define a ",(0,i.kt)("inlineCode",{parentName:"p"},"roles")," method on our ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model. The first argument passed to this method is the name of the related model class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#pragma once\n#ifndef USER_HPP\n#define USER_HPP\n\n#include <orm/tiny/model.hpp>\n#include <orm/tiny/relations/pivot.hpp>\n\n#include "models/role.hpp"\n\nusing Orm::Tiny::Model;\nusing Orm::Tiny::Relations::BelongsToMany;\nusing Orm::Tiny::Relations::Pivot;\n\nclass User final : public Model<User, Role, Pivot>\n{\n    friend Model;\n    using Model::Model;\n\npublic:\n    /*! The roles that belong to the user. */\n    std::unique_ptr<BelongsToMany<User, Role>>\n    roles()\n    {\n        return belongsToMany<Role>();\n    }\n\nprivate:\n    /*! Map of relation names to methods. */\n    QHash<QString, RelationVisitor> u_relations {\n        {"roles", [](auto &v) { v(&User::roles); }},\n    };\n};\n\n#endif // USER_HPP\n')),(0,i.kt)("p",null,"Once the relationship is defined, you may access the user's roles as the ",(0,i.kt)("inlineCode",{parentName:"p"},"QVector<Related *>"),"  by Model's ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelationValue<Related, Container = QVector>")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include <QDebug>\n\n#include "models/user.hpp"\n\nauto user = User::find(1);\n\nfor (auto *role : user->getRelationValue<Role>("roles"))\n    qDebug() << role->getAttribute("id").toULongLong();\n')),(0,i.kt)("p",null,"Since all relationships also serve as query builders, you may add further constraints to the relationship query by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"roles")," method and continuing to chain conditions onto the query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto roles = User::find(1)->roles()->orderBy("name").get();\n')),(0,i.kt)("p",null,"To determine the table name of the relationship's intermediate table, TinyORM will join the two related model names in alphabetical order. However, you are free to override this convention. You may do so by passing a first argument to the ",(0,i.kt)("inlineCode",{parentName:"p"},"belongsToMany")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'return belongsToMany<Role>("role_user");\n')),(0,i.kt)("p",null,"In addition to customizing the name of the intermediate table, you may also customize the column names of the keys on the table by passing additional arguments to the ",(0,i.kt)("inlineCode",{parentName:"p"},"belongsToMany")," method. The second argument is the foreign key name of the model on which you are defining the relationship, while the third argument is the foreign key name of the model that you are joining to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'return belongsToMany<Role>("role_user", "user_id", "role_id");\n')),(0,i.kt)("p",null,"The fourth and fifth arguments are primary key names on models in the many-to-many relation and the sixth argument is the relation name."),(0,i.kt)("p",null,"The relation name is used during ",(0,i.kt)("a",{parentName:"p",href:"#touching-parent-timestamps"},"Touching Parent Timestamps")," and will be guessed from the type-id of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Related")," template parameter, TinyORM takes this name, changes the first character to lower case, and appends ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," character. So in the example above, the relation name will be ",(0,i.kt)("inlineCode",{parentName:"p"},"roles"),"."),(0,i.kt)("h4",{id:"defining-the-inverse-of-the-relationship-1"},"Defining The Inverse Of The Relationship"),(0,i.kt)("p",null,'To define the "inverse" of a many-to-many relationship, you should define a method on the related model which also returns the result of the ',(0,i.kt)("inlineCode",{parentName:"p"},"belongsToMany")," method. To complete our user / role example, let's define the ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," method on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Role")," model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#pragma once\n#ifndef ROLE_HPP\n#define ROLE_HPP\n\n#include <orm/tiny/model.hpp>\n#include <orm/tiny/relations/pivot.hpp>\n\nusing Orm::Tiny::Model;\nusing Orm::Tiny::Relations::BelongsToMany;\nusing Orm::Tiny::Relations::Pivot;\n\nclass User; // Forward declaration to avoid cyclic dependency\n\nclass Role final : public Model<Role, User, Pivot>\n{\n    friend Model;\n    using Model::Model;\n\npublic:\n    /*! The users that belong to the role. */\n    std::unique_ptr<BelongsToMany<Role, User>>\n    users()\n    {\n        return belongsToMany<User>();\n    }\n\nprivate:\n    /*! Map of relation names to methods. */\n    QHash<QString, RelationVisitor> u_relations {\n        {"users", [](auto &v) { v(&Role::users); }},\n    };\n};\n\n#endif // ROLE_HPP\n')),(0,i.kt)("p",null,"As you can see, the relationship is defined exactly the same as its ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model counterpart with the exception of referencing the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model. Since we're reusing the ",(0,i.kt)("inlineCode",{parentName:"p"},"belongsToMany"),' method, all of the usual table and key customization options are available when defining the "inverse" of many-to-many relationships.'),(0,i.kt)("h3",{id:"retrieving-intermediate-table-columns"},"Retrieving Intermediate Table Columns"),(0,i.kt)("p",null,"As you have already learned, working with many-to-many relations requires the presence of an intermediate table. TinyORM provides some very helpful ways of interacting with this table. For example, let's assume our ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model has many ",(0,i.kt)("inlineCode",{parentName:"p"},"Role")," models that it is related to. After accessing this relationship, we may access the intermediate table using the ",(0,i.kt)("inlineCode",{parentName:"p"},"pivot")," attribute on the models:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include <QDebug>\n\n#include "models/user.hpp"\n\nusing Orm::Tiny::Relations::Pivot;\n\nauto user = User::find(1);\n\nfor (auto *role : user->getRelationValue<Role>("roles"))\n    qDebug() << role->getRelation<Pivot, Orm::One>("pivot")\n                    ->getAttribute("created_at");\n')),(0,i.kt)("p",null,"Notice that each ",(0,i.kt)("inlineCode",{parentName:"p"},"Role")," model we retrieve has automatically assigned a ",(0,i.kt)("inlineCode",{parentName:"p"},"pivot")," relationship. This relation contains a model representing the intermediate table and it is an instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::Tiny::Relations::Pivot")," model class."),(0,i.kt)("p",null,"By default, only the model keys will be present on the ",(0,i.kt)("inlineCode",{parentName:"p"},"pivot")," model. If your intermediate table contains extra attributes, you must specify them when defining the relationship:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// Ownership of a unique_ptr()\nauto relation = belongsToMany<Role>();\n\nrelation->withPivot({"active", "created_by"});\n\nreturn relation;\n')),(0,i.kt)("p",null,"If you would like your intermediate table to have ",(0,i.kt)("inlineCode",{parentName:"p"},"created_at")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"updated_at")," timestamps that are automatically maintained by TinyORM, call the ",(0,i.kt)("inlineCode",{parentName:"p"},"withTimestamps")," method when defining the relationship:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// Ownership of a unique_ptr()\nauto relation = belongsToMany<Role>();\n\nrelation->withTimestamps();\n\nreturn relation;\n")),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Intermediate tables that utilize TinyORM's automatically maintained timestamps are required to have both ",(0,i.kt)("inlineCode",{parentName:"p"},"created_at")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"updated_at")," timestamp columns."))),(0,i.kt)("h4",{id:"customizing-the-pivot-relation-name"},"Customizing The ",(0,i.kt)("inlineCode",{parentName:"h4"},"pivot")," Relation Name"),(0,i.kt)("p",null,"As noted previously, attributes from the intermediate table may be accessed on models via the ",(0,i.kt)("inlineCode",{parentName:"p"},"pivot")," relation name. However, you are free to customize the name of this relation to better reflect its purpose within your application."),(0,i.kt)("p",null,"For example, if your application contains users that may subscribe to podcasts, you likely have a many-to-many relationship between users and podcasts. If this is the case, you may wish to rename your intermediate table relation name to ",(0,i.kt)("inlineCode",{parentName:"p"},"subscription")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"pivot"),". This can be done using the ",(0,i.kt)("inlineCode",{parentName:"p"},"as")," method when defining the relationship:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// Ownership of a unique_ptr()\nauto relation = belongsToMany<Podcast>();\n\nrelation->as("subscription")\n        .withTimestamps();\n\nreturn relation;\n')),(0,i.kt)("p",null,"Once the custom intermediate table relation name has been specified, you may access the intermediate table data using the customized name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include <QDebug>\n\n#include "models/user.hpp"\n\nusing Orm::Tiny::Relations::Pivot;\n\nauto users = User::with("podcasts")->get();\n\nfor (auto &user : users)\n    for (auto *podcast : user.getRelation<Podcast>("podcasts"))\n        qDebug() << podcast->getRelation<Pivot, Orm::One>("subscription")\n                           ->getAttribute("created_at");\n')),(0,i.kt)("h3",{id:"defining-custom-intermediate-table-models"},"Defining Custom Intermediate Table Models"),(0,i.kt)("p",null,"If you would like to define a custom model to represent the intermediate table of your many-to-many relationship, you may pass the custom pivot type as a second template argument to the ",(0,i.kt)("inlineCode",{parentName:"p"},"belongsToMany<Related, PivotType = Pivot>")," method when defining the relationship. Custom pivot models give you the opportunity to define additional methods on the pivot model."),(0,i.kt)("p",null,"Custom many-to-many pivot models should extend the ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::Tiny::Relations::BasePivot<PivotModel>")," class. For example, we may define a ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model which uses a custom ",(0,i.kt)("inlineCode",{parentName:"p"},"RoleUser")," pivot model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#pragma once\n#ifndef USER_HPP\n#define USER_HPP\n\n#include <orm/tiny/model.hpp>\n#include <orm/tiny/relations/pivot.hpp>\n\n#include "models/role.hpp"\n\nusing Orm::Tiny::Model;\nusing Orm::Tiny::Relations::BelongsToMany;\nusing Orm::Tiny::Relations::Pivot;\n\nclass User final : public Model<User, Role, Pivot>\n{\n    friend Model;\n    using Model::Model;\n\npublic:\n    /*! The roles that belong to the user. */\n    std::unique_ptr<BelongsToMany<User, Role, RoleUser>>\n    roles()\n    {\n        return belongsToMany<Role, RoleUser>();\n    }\n\nprivate:\n    /*! Map of relation names to methods. */\n    QHash<QString, RelationVisitor> u_relations {\n        {"roles", [](auto &v) { v(&User::roles); }},\n    };\n};\n\n#endif // USER_HPP\n')),(0,i.kt)("p",null,"When defining the ",(0,i.kt)("inlineCode",{parentName:"p"},"RoleUser")," model, you should extend the ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::Tiny::Relations::BasePivot<PivotModel>")," class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#pragma once\n#ifndef ROLEUSER_HPP\n#define ROLEUSER_HPP\n\n#include "orm/tiny/relations/basepivot.hpp"\n\nusing Orm::Tiny::Relations::BasePivot;\n\nclass RoleUser final : public BasePivot<RoleUser>\n{\n    friend Model;\n    friend BasePivot;\n\n    using BasePivot::BasePivot;\n};\n\n#endif // ROLEUSER_HPP\n')),(0,i.kt)("p",null,"You have to pass a custom pivot type to the ",(0,i.kt)("inlineCode",{parentName:"p"},"AllRelations")," template parameter pack on ",(0,i.kt)("inlineCode",{parentName:"p"},"Model<Derived, AllRelations...>")," so that the ",(0,i.kt)("inlineCode",{parentName:"p"},"Model")," knows how to generate a ",(0,i.kt)("inlineCode",{parentName:"p"},"std::variant"),", which holds all the relations and also you have to add a new mapping from the relation name to the custom pivot model type-id, this is  described in more detail in the ",(0,i.kt)("a",{parentName:"p",href:"#common-rules"},"Common Rules"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#pragma once\n#ifndef ROLE_HPP\n#define ROLE_HPP\n\n#include <orm/tiny/model.hpp>\n\n#include "models/roleuser.hpp"\n\nusing Orm::Tiny::Model;\nusing Orm::Tiny::Relations::BelongsToMany;\n\nclass User; // Forward declaration to avoid cyclic dependency\n\nclass Role final : public Model<Role, User, RoleUser>\n{\n    friend Model;\n    using Model::Model;\n\npublic:\n    /*! The users that belong to the role. */\n    std::unique_ptr<BelongsToMany<Role, User>>\n    users()\n    {\n        return belongsToMany<User>();\n    }\n\nprivate:\n    /*! Map of relation names to methods. */\n    QHash<QString, RelationVisitor> u_relations {\n        {"users", [](auto &v) { v(&Role::users); }},\n    };\n};\n\n#endif // ROLE_HPP\n')),(0,i.kt)("p",null,"Once the custom pivot model ",(0,i.kt)("inlineCode",{parentName:"p"},"RoleUser")," has been defined, ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelation")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelationValue")," method returns proper pivot type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include <QDebug>\n\n#include "models/user.hpp"\n\nauto users = User::with("roles")->get();\n\nfor (auto &user : users)\n    for (auto *role : user.getRelation<Role>("roles"))\n        qDebug() << role->getRelation<RoleUser, Orm::One>("pivot")\n                        ->getAttribute("created_at");\n')),(0,i.kt)("h4",{id:"custom-pivot-models-and-incrementing-ids"},"Custom Pivot Models And Incrementing IDs"),(0,i.kt)("p",null,"If you have defined a many-to-many relationship that uses a custom pivot model, and that pivot model has an auto-incrementing primary key, you should ensure your custom pivot model class defines an ",(0,i.kt)("inlineCode",{parentName:"p"},"u_incrementing")," data member that is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/*! Indicates if the IDs are auto-incrementing. */\nbool u_incrementing = true;\n")),(0,i.kt)("h2",{id:"querying-relations"},"Querying Relations"),(0,i.kt)("p",null,"Since all TinyORM relationships are defined via methods, you may call those methods to obtain an instance of the relationship without actually executing a query to load the related models. In addition, all types of TinyORM relationships also serve as ",(0,i.kt)("a",{parentName:"p",href:"/database/query-builder"},"query builders"),", allowing you to continue to chain constraints onto the relationship query before finally executing the SQL query against your database."),(0,i.kt)("p",null,"For example, imagine a blog application in which a ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model has many associated ",(0,i.kt)("inlineCode",{parentName:"p"},"Post")," models:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/post.hpp"\n\nusing Orm::Tiny::Model;\nusing Orm::Tiny::Relations::HasMany;\n\nclass User final : public Model<User, Post>\n{\n    friend Model;\n    using Model::Model;\n\npublic:\n    /*! Get all of the posts for the user. */\n    std::unique_ptr<HasMany<User, Post>>\n    posts()\n    {\n        return hasMany<Post>();\n    }\n\nprivate:\n    /*! Map of relation names to methods. */\n    QHash<QString, RelationVisitor> u_relations {\n        {"posts", [](auto &v) { v(&User::posts); }},\n    };\n};\n')),(0,i.kt)("p",null,"You may query the ",(0,i.kt)("inlineCode",{parentName:"p"},"posts")," relationship and add additional constraints to the relationship like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/user.hpp"\n\nauto user = User::find(1);\n\nuser->posts()->whereEq("active", 1).get();\n')),(0,i.kt)("p",null,"You are able to use any of the TinyORM ",(0,i.kt)("a",{parentName:"p",href:"/database/query-builder"},"query builder's")," methods on the relationship, so be sure to explore the query builder documentation to learn about all of the methods that are available to you."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"All the ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyBuilder")," methods which are related to building queries are proxied on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Relation")," base class."))),(0,i.kt)("h4",{id:"chaining-orwhere-clauses-after-relationships"},"Chaining ",(0,i.kt)("inlineCode",{parentName:"h4"},"orWhere")," Clauses After Relationships"),(0,i.kt)("p",null,"As demonstrated in the example above, you are free to add additional constraints to relationships when querying them. However, be careful when chaining ",(0,i.kt)("inlineCode",{parentName:"p"},"orWhere")," clauses onto a relationship, as the ",(0,i.kt)("inlineCode",{parentName:"p"},"orWhere")," clauses will be logically grouped at the same level as the relationship constraint:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'user->posts()\n    ->whereEq("active", 1)\n    .orWhere("votes", ">=", 100)\n    .get();\n')),(0,i.kt)("p",null,"The example above will generate the following SQL. As you can see, the ",(0,i.kt)("inlineCode",{parentName:"p"},"or")," clause instructs the query to return ",(0,i.kt)("em",{parentName:"p"},"any")," user with greater than 100 votes. The query is no longer constrained to a specific user:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"select *\nfrom posts\nwhere user_id = ? and active = 1 or votes >= 100\n")),(0,i.kt)("p",null,"In most situations, you should use ",(0,i.kt)("a",{parentName:"p",href:"/database/query-builder#logical-grouping"},"logical groups")," to group the conditional checks between parentheses:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'user->posts()\n    ->where([](auto &query)\n    {\n        query.whereEq("active", 1)\n             .orWhere("votes", ">=", 100);\n    })\n    .get();\n')),(0,i.kt)("p",null,"The example above will produce the following SQL. Note that the logical grouping has properly grouped the constraints and the query remains constrained to a specific user:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"select *\nfrom posts\nwhere user_id = ? and (active = 1 or votes >= 100)\n")),(0,i.kt)("h3",{id:"relationship-methods"},"Relationship Methods"),(0,i.kt)("p",null,"If you do not need to add additional constraints to the TinyORM relationship query, you may access the relationship directly. For example, continuing to use our ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Post")," example models, we may access all of a user's posts like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/user.hpp"\n\nauto user = User::find(1);\n\nfor (auto *post : user->getRelationValue<Post>("posts")) {\n    //\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelationValue<Related>"),' method performs "lazy loading", meaning they will only load their relationship data when you actually access them. Because of this, developers often use ',(0,i.kt)("a",{parentName:"p",href:"#eager-loading"},"eager loading")," to pre-load relationships they know will be accessed after loading the model. Eager loading provides a significant reduction in SQL queries that must be executed to load a model's relations."),(0,i.kt)("p",null,"To access eager loaded relationship use Model's ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelation<Related>")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto user = User::find(1);\n\nfor (auto *post : user->getRelation<Post>("posts")) {\n    //\n}\n')),(0,i.kt)("p",null,"As described above TinyORM offers two methods to access relationships; ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelation")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelationValue"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelation"),' method is for "eager loaded" relations, when the relationship is not loaded, it throws the exception ',(0,i.kt)("inlineCode",{parentName:"p"},"RelationNotLoadedError"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelationValue"),' is for "lazy loading", when the relationship is not loaded, it will load it.'),(0,i.kt)("p",null,"Both methods have two overloads, the ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelation<Related, Container = QVector>")," overload is for obtaining many type relationships:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto posts = User::find(1)->getRelation<Post>("posts");\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelation<Related, Tag>"),' overload is for obtaining "one" type relationships:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto user = Post::find(1)->getRelation<User, Orm::One>("user");\n')),(0,i.kt)("p",null,"The same is true for the ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelationValue")," method."),(0,i.kt)("h3",{id:"querying-relationship-existence"},"Querying Relationship Existence"),(0,i.kt)("p",null,"When retrieving model records, you may wish to limit your results based on the existence of a relationship. For example, imagine you want to retrieve all blog posts that have at least one comment. To do so, you may pass the name of the relationship to the ",(0,i.kt)("inlineCode",{parentName:"p"},"has")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"orHas")," methods:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/post.hpp"\n\n// Retrieve all posts that have at least one comment...\nauto posts = Post::has("comments")->get();\n')),(0,i.kt)("p",null,"You may also specify an operator and count value to further customize the query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// Retrieve all posts that have three or more comments...\nauto posts = Post::has("comments", ">=", 3)->get();\n')),(0,i.kt)("p",null,"Nested ",(0,i.kt)("inlineCode",{parentName:"p"},"has"),' statements may be constructed using "dot" notation. For example, you may retrieve all posts that have at least one comment that has at least one image:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// Retrieve posts that have at least one comment with images...\nauto posts = Post::has<Image>("comments.images")->get();\n')),(0,i.kt)("p",null,"If you need even more power, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"whereHas")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"orWhereHas")," methods to define additional query constraints on your ",(0,i.kt)("inlineCode",{parentName:"p"},"has")," queries, such as inspecting the content of a comment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// Retrieve posts with at least one comment containing words like code%...\nauto posts = Post::whereHas("comments", [](auto &query)\n{\n    query.where("content", LIKE, "code%");\n})->get();\n\n// Retrieve posts with at least ten comments containing words like code%...\nauto posts = Post::whereHas("comments", [](auto &query)\n{\n    query.where("content", LIKE, "code%");\n}, ">=", 10)->get();\n')),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"TinyORM does not currently support querying for relationship existence across databases. The relationships must exist within the same database."))),(0,i.kt)("h4",{id:"related-template-parameter"},"Related template parameter"),(0,i.kt)("p",null,"All the ",(0,i.kt)("inlineCode",{parentName:"p"},"has")," related methods are templated by the ",(0,i.kt)("inlineCode",{parentName:"p"},"Related")," template parameter, it looks something like the following ",(0,i.kt)("inlineCode",{parentName:"p"},"has<Related>(..., const std::function<void(CallbackType<Related> &)> &callback = nullptr)"),", you can pass a query callback to this parameter and on the base of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Related")," template argument will be decided whether the ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::QueryBuilder")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::TinyBuilder<Related>")," will be passed to the callback. As you can see this ",(0,i.kt)("inlineCode",{parentName:"p"},"Related")," parameter exists because the ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::TinyBuilder<Related>")," needs it."),(0,i.kt)("p",null,"The rule of thumbs are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if you don't pass the ",(0,i.kt)("inlineCode",{parentName:"li"},"Related")," template parameter  or you pass ",(0,i.kt)("inlineCode",{parentName:"li"},"void")," then ",(0,i.kt)("inlineCode",{parentName:"li"},"Orm::QueryBuilder")," will be passed to the callback"),(0,i.kt)("li",{parentName:"ul"},"if you pass it, then ",(0,i.kt)("inlineCode",{parentName:"li"},"Orm::TinyBuilder<Related>")," will be passed to the callback"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Related")," has to be of the same type as a relation name passed to the ",(0,i.kt)("inlineCode",{parentName:"li"},"has")," related method"),(0,i.kt)("li",{parentName:"ul"},"you have to always pass the ",(0,i.kt)("inlineCode",{parentName:"li"},"Related")," template parameter in nested relations, you can not use nested relations with ",(0,i.kt)("inlineCode",{parentName:"li"},"Related = void")),(0,i.kt)("li",{parentName:"ul"},'in nested relations, where you can pass more relation names using "dot" notation, ',(0,i.kt)("inlineCode",{parentName:"li"},"Related")," has to be of the same type as the ",(0,i.kt)("strong",{parentName:"li"},"last")," relation name passed to the ",(0,i.kt)("inlineCode",{parentName:"li"},"has")," related method like you can see in the nested example above or below")),(0,i.kt)("h3",{id:"querying-relationship-absence"},"Querying Relationship Absence"),(0,i.kt)("p",null,"When retrieving model records, you may wish to limit your results based on the absence of a relationship. For example, imagine you want to retrieve all blog posts that ",(0,i.kt)("strong",{parentName:"p"},"don't")," have any comments. To do so, you may pass the name of the relationship to the ",(0,i.kt)("inlineCode",{parentName:"p"},"doesntHave")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"orDoesntHave")," methods:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/post.hpp"\n\nauto posts = Post::doesntHave("comments")->get();\n')),(0,i.kt)("p",null,"If you need even more power, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"whereDoesntHave")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"orWhereDoesntHave")," methods to add additional query constraints to your ",(0,i.kt)("inlineCode",{parentName:"p"},"doesntHave")," queries, such as inspecting the content of a comment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto posts = Post::whereDoesntHave("comments", [](auto &query)\n{\n    query.where("content", LIKE, "code%");\n})->get();\n')),(0,i.kt)("p",null,'You may use "dot" notation to execute a query against a nested relationship. For example, the following query will retrieve all posts that have comments from authors that are not banned:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto posts = Post::whereDoesntHave<Author>("comments.author",\n                                           [](auto &query)\n{\n    query.where("banned", false);\n})->get();\n')),(0,i.kt)("h2",{id:"eager-loading"},"Eager Loading"),(0,i.kt)("p",null,"When accessing TinyORM relationships by Model's ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelationValue"),' method, the related models are "lazy loaded". This means the relationship data is not actually loaded until you first access them. However, TinyORM can "eager load" relationships at the time you query the parent model. Eager loading alleviates the "N + 1" query problem. To illustrate the N + 1 query problem, consider a ',(0,i.kt)("inlineCode",{parentName:"p"},"Book"),' model that "belongs to" to an ',(0,i.kt)("inlineCode",{parentName:"p"},"Author")," model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'using Orm::Tiny::Model;\nusing Orm::Tiny::Relations::BelongsTo;\n\nclass Book final : public Model<Book, Author>\n{\n    friend Model;\n    using Model::Model;\n\npublic:\n    /*! Get the author that wrote the book. */\n    std::unique_ptr<BelongsTo<Book, Author>>\n    author()\n    {\n        return belongsTo<Author>();\n    }\n\nprivate:\n    /*! Map of relation names to methods. */\n    QHash<QString, RelationVisitor> u_relations {\n        {"author", [](auto &v) { v(&Book::author); }},\n    };\n};\n')),(0,i.kt)("p",null,"Now, let's retrieve all books and their authors:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include <QDebug>\n\n#include "models/book.hpp"\n\nauto books = Book::all();\n\nfor (auto &book : books)\n    qDebug() << book.getRelationValue<Author, Orm::One>("author")\n                    ->getAttribute("name").toString();\n')),(0,i.kt)("p",null,"This loop will execute one query to retrieve all of the books within the database table, then another query for each book in order to retrieve the book's author. So, if we have 25 books, the code above would run 26 queries: one for the original book, and 25 additional queries to retrieve the author of each book."),(0,i.kt)("p",null,"Thankfully, we can use eager loading to reduce this operation to just two queries. When building a query, you may specify which relationships should be eager loaded using the ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto books = Book::with("author")->get();\n\nfor (auto &book : books)\n    qDebug() << book.getRelation<Author, Orm::One>("author")\n                    ->getAttribute("name").toString();\n')),(0,i.kt)("p",null,"For this operation, only two queries will be executed - one query to retrieve all of the books and one query to retrieve all of the authors for all of the books:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"select * from books\n\nselect * from authors where id in (1, 2, 3, 4, 5, ...)\n")),(0,i.kt)("h4",{id:"eager-loading-multiple-relationships"},"Eager Loading Multiple Relationships"),(0,i.kt)("p",null,"Sometimes you may need to eager load several different relationships. To do so, just pass a ",(0,i.kt)("inlineCode",{parentName:"p"},"QVector<Orm::WithItem>")," of relationships to the ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto books = Book::with({{"author"}, {"publisher"}})->get();\n')),(0,i.kt)("h4",{id:"nested-eager-loading"},"Nested Eager Loading"),(0,i.kt)("p",null,"To eager a relationship's relationships, you may use \"dot\" syntax. For example, let's eager load all of the book's authors and all of the author's personal contacts:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto books = Book::with("author.contacts")->get();\n')),(0,i.kt)("h4",{id:"eager-loading-specific-columns"},"Eager Loading Specific Columns"),(0,i.kt)("p",null,"You may not always need every column from the relationships you are retrieving. For this reason, TinyORM allows you to specify which columns of the relationship you would like to retrieve:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto books = Book::with("author:id,name,book_id")->get();\n')),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"When using this feature, you should always include the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," column and any relevant foreign key columns in the list of columns you wish to retrieve, otherwise relations will not be loaded correctly."))),(0,i.kt)("h4",{id:"eager-loading-by-default"},"Eager Loading By Default"),(0,i.kt)("p",null,"Sometimes you might want to always load some relationships when retrieving a model. To accomplish this, you may define a ",(0,i.kt)("inlineCode",{parentName:"p"},"u_with")," data member on the model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'using Orm::Tiny::Model;\nusing Orm::Tiny::Relations::BelongsTo;\n\nclass Book final : public Model<Book, Author>\n{\n    friend Model;\n    using Model::Model;\n\npublic:\n    /*! Get the author that wrote the book. */\n    std::unique_ptr<BelongsTo<Book, Author>>\n    author()\n    {\n        return belongsTo<Author>();\n    }\n\nprivate:\n    /*! Map of relation names to methods. */\n    QHash<QString, RelationVisitor> u_relations {\n        {"author", [](auto &v) { v(&Book::author); }},\n    };\n\n    /*! The relationships that should always be loaded. */\n    QVector<QString> u_with {\n        "author",\n    };\n};\n')),(0,i.kt)("p",null,"If you would like to remove an item from the ",(0,i.kt)("inlineCode",{parentName:"p"},"u_with")," data member for a single query, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"without")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto books = Book::without("author")->get();\n')),(0,i.kt)("p",null,"If you would like to override all items within the ",(0,i.kt)("inlineCode",{parentName:"p"},"u_with")," data member for a single query, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"withOnly")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto books = Book::withOnly("genre")->get();\n')),(0,i.kt)("h3",{id:"constraining-eager-loads"},"Constraining Eager Loads"),(0,i.kt)("p",null,"Sometimes you may wish to eager load a relationship but also specify additional query conditions for the eager loading query. You can accomplish this by passing a ",(0,i.kt)("inlineCode",{parentName:"p"},"QVector<Orm::WithItem>")," of relationships to the ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," method where the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," data member of ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::WithItem")," struct is a relationship name and the ",(0,i.kt)("inlineCode",{parentName:"p"},"constraints")," data member expects a lambda expression that adds additional constraints to the eager loading query. The first argument passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"constraints")," lambda expression is an underlying ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::QueryBuilder")," for a related model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/user.hpp"\n\nauto users = User::with({{"posts", [](auto &query)\n{\n    query.where("title", "like", "%code%");\n}}})->get();\n')),(0,i.kt)("p",null,"In this example, TinyORM will only eager load posts where the post's ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," column contains the word ",(0,i.kt)("inlineCode",{parentName:"p"},"code"),". You may call other ",(0,i.kt)("a",{parentName:"p",href:"/database/query-builder"},"query builder")," methods to further customize the eager loading operation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto users = User::with({{"posts", [](auto &query)\n{\n    query.orderBy("created_at", "desc");\n}}})->get();\n')),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"limit")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"take")," query builder methods may not be used when constraining eager loads."))),(0,i.kt)("h3",{id:"lazy-eager-loading"},"Lazy Eager Loading"),(0,i.kt)("p",null,"Sometimes you may need to eager load a relationship after the parent model has already been retrieved. For example, this may be useful if you need to dynamically decide whether to load related models:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/book.hpp"\n\nauto book = Book::find(1);\n\nif (someCondition)\n    book->load("author");\n')),(0,i.kt)("p",null,"You may load more relationships at once, to do so, just pass a ",(0,i.kt)("inlineCode",{parentName:"p"},"QVector<Orm::WithItem>")," of relationships to the ",(0,i.kt)("inlineCode",{parentName:"p"},"load")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Book::find(1)->load({{"author"}, {"publisher"}});\n')),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"So far, this only works on models, not on containers returned from Model's ",(0,i.kt)("inlineCode",{parentName:"p"},"get")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"all")," methods."))),(0,i.kt)("p",null,"If you need to set additional query constraints on the eager loading query, you may pass a ",(0,i.kt)("inlineCode",{parentName:"p"},"QVector<Orm::WithItem>")," of relationships to the ",(0,i.kt)("inlineCode",{parentName:"p"},"load")," method where the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," data member of ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::WithItem")," struct is a relationship name and the ",(0,i.kt)("inlineCode",{parentName:"p"},"constraints")," data member expects a lambda expression that adds additional constraints to the eager loading query. The first argument passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"constraints")," lambda expression is an underlying ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::QueryBuilder")," for a related model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'author->load({{"books", [](auto &query)\n{\n    query.orderBy("published_date", "asc");\n}}});\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You can also use eager constraining in the Model's ",(0,i.kt)("inlineCode",{parentName:"p"},"fresh")," method."))),(0,i.kt)("h2",{id:"inserting-and-updating-related-models"},"Inserting & Updating Related Models"),(0,i.kt)("h3",{id:"the-save-method"},"The ",(0,i.kt)("inlineCode",{parentName:"h3"},"save")," Method"),(0,i.kt)("p",null,"TinyORM provides convenient methods for adding new models to relationships. For example, perhaps you need to add a new comment to a post. Instead of manually setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"post_id")," attribute on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Comment")," model you may insert the comment using the relationship's ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/comment.hpp"\n#include "models/post.hpp"\n\nComment comment({{"message", "A new comment."}});\n\nauto post = Post::find(1);\n\npost->comments()->save(comment);\n')),(0,i.kt)("p",null,"Note that we did not access the ",(0,i.kt)("inlineCode",{parentName:"p"},"comments")," relationship with the ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelation")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"getRelationValue")," method. Instead, we called the ",(0,i.kt)("inlineCode",{parentName:"p"},"comments")," method to obtain an instance of the relationship. The ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," method will automatically add the appropriate ",(0,i.kt)("inlineCode",{parentName:"p"},"post_id")," value to the new ",(0,i.kt)("inlineCode",{parentName:"p"},"Comment")," model."),(0,i.kt)("p",null,"If you need to save multiple related models, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"saveMany")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto post = Post::find(1);\n\npost->comments()->saveMany({\n    {{"message", "A new comment."}},\n    {{\'message", "Another new comment."}},\n});\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"saveMany")," methods will not add the new models to any in-memory relationships that are already loaded onto the parent model. If you plan on accessing the relationship after using the ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"saveMany")," methods, you may wish to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"refresh")," method to reload the model and its relationships:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'post->comments()->save(comment);\n\npost->refresh();\n\n// All comments, including the newly saved comment...\npost->getRelation<Comment>("comments");\n')),(0,i.kt)("p",null,"The many-to-many relationship also supports the ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"saveMany")," methods. In addition, you may pass the pivot attributes as a second argument and select if you want to touch parent timestamps as a third argument:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto user = User::find(2);\n\nRole role {{"name", "admin"}};\n\nuser->roles()->save(role, {{"active", true}});\n\nRole role1 {{"name", "edit"}};\nRole role2 {{"name", "view"}};\n\nuser->roles()->saveMany({role1, role2}, {{{"active", true}},\n                                         {{"active", false}}});\n\n// No pivot attributes for role1\nuser->roles()->saveMany({role1, role2}, {{}, {{"active", false}}});\n')),(0,i.kt)("h4",{id:"recursively-saving-models--relationships"},"Recursively Saving Models & Relationships"),(0,i.kt)("p",null,"If you would like to ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," your model and all of its associated relationships, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"push")," method. In this example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Post")," model will be saved as well as its comments and the comment's authors:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto post = Post::find(1);\n\npost->getRelationValue<Comment>("comments").at(0)->setAttribute("message", "Message");\n\npost->getRelationValue<Comment>("comments").first()\n    ->getRelationValue<User, Orm::One>("author")->setAttribute("name", "Author Name");\n\npost->push();\n')),(0,i.kt)("h3",{id:"the-create-method"},"The ",(0,i.kt)("inlineCode",{parentName:"h3"},"create")," Method"),(0,i.kt)("p",null,"In addition to the ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"saveMany")," methods, you may also use the ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," method, which accepts a vector of attributes, creates a model, and inserts it into the database. The difference between ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," is that ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," accepts a full TinyORM model instance while ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," accepts a ",(0,i.kt)("inlineCode",{parentName:"p"},"QVector<Orm::AttributeItem>"),". The newly created model will be returned by the ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/post.hpp"\n\nauto post = Post::find(1);\n\nauto comment = post->comments()->create({\n    {"message", "A new comment."},\n});\n')),(0,i.kt)("p",null,"You may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"createMany")," method to create multiple related models:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto post = Post::find(1);\n\nauto comments = post->comments()->createMany({\n    {{"message", "A new comment."}, {"is_published", true}},\n    {{"message", "Another new comment."}, {"is_published", false}},\n});\n')),(0,i.kt)("p",null,"The many-to-many relationship also supports the ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"createMany")," methods. In addition, you may pass the pivot attributes as a second argument and select if you want to touch parent timestamps as a third argument:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto user = User::find(2);\n\nuser->roles()->create({{"name", "admin"}}, {{"active", true}});\n\nuser->roles()->createMany({\n    {{"name", "edit"}},\n    {{"name", "view"}},\n}, {\n    {{"active", true}},\n    {{"active", false}},\n});\n\n// No pivot attributes for the first role\nuser->roles()->createMany({\n    {{"name", "edit"}},\n    {{"name", "view"}},\n}, {\n    {},\n    {{"active", false}},\n});\n')),(0,i.kt)("p",null,"You may also use the ",(0,i.kt)("inlineCode",{parentName:"p"},"findOrNew"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"firstOrNew"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"firstOrCreate"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"updateOrCreate")," methods to ",(0,i.kt)("a",{parentName:"p",href:"/tinyorm/getting-started#retrieving-or-creating-models"},"create and update models on relationships"),"."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Before using the ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," method, be sure to review the ",(0,i.kt)("a",{parentName:"p",href:"/tinyorm/getting-started#mass-assignment"},"mass assignment")," documentation."))),(0,i.kt)("h3",{id:"updating-belongs-to-relationships"},"Belongs To Relationships"),(0,i.kt)("p",null,"If you would like to assign a child model to a new parent model, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"associate")," method. In this example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model defines a ",(0,i.kt)("inlineCode",{parentName:"p"},"belongsTo")," relationship to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Account")," model. The ",(0,i.kt)("inlineCode",{parentName:"p"},"associate")," method will set the foreign key on the child model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/user.hpp"\n\nUser user {{"name", "Mike"}};\n\nauto account = Account::find(10);\n\nuser.account()->associate(*account);\n\nuser.save();\n')),(0,i.kt)("p",null,"To remove a parent model from a child model, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"dissociate")," method. This method will set the relationship's foreign key to ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"user.account()->dissociate();\n\nuser.save();\n")),(0,i.kt)("h3",{id:"updating-many-to-many-relationships"},"Many To Many Relationships"),(0,i.kt)("h4",{id:"attaching--detaching"},"Attaching / Detaching"),(0,i.kt)("p",null,"TinyORM also provides methods to make working with many-to-many relationships more convenient. For example, let's imagine a user can have many roles and a role can have many users. You may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"attach")," method to attach a role to a user by inserting a record in the relationship's intermediate table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/user.hpp"\n\nauto user = User::find(1);\n\nuser->roles()->attach(roleId);\n')),(0,i.kt)("p",null,"When attaching a relationship to a model, you may also pass a vector of additional data to be inserted into the intermediate table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'const auto expires = true;\n\nuser->roles()->attach(roleId, {{"expires", expires}});\n')),(0,i.kt)("p",null,"Sometimes it may be necessary to remove a role from a user. To remove a many-to-many relationship record, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"detach")," method. The ",(0,i.kt)("inlineCode",{parentName:"p"},"detach")," method will delete the appropriate record out of the intermediate table; however, both models will remain in the database:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// Detach a single role from the user...\nuser->roles()->detach(roleId);\n\n// Detach all roles from the user...\nuser->roles()->detach();\n")),(0,i.kt)("p",null,"For convenience, ",(0,i.kt)("inlineCode",{parentName:"p"},"attach")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"detach")," also accept vectors of IDs or Model instances as input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto user = User::find(1);\n\nuser->roles()->detach({1, 2, 3});\n\nRole role1({{"name", "Role 1"}});\nrole1.save();\nRole role2({{"name", "Role 2"}});\nrole2.save();\n\nuser->roles()->attach({{role1}, {role2}});\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"attach")," method also accepts ",(0,i.kt)("inlineCode",{parentName:"p"},"std::map")," as input, so you can pass different attributes for each model you are attaching:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'user->roles()->attach({\n    {1, {{"expires", true},  {"is_active", false}}},\n    {2, {{"expires", false}, {"is_active", true}}},\n});\n')),(0,i.kt)("h4",{id:"syncing-associations"},"Syncing Associations"),(0,i.kt)("p",null,"You may also use the ",(0,i.kt)("inlineCode",{parentName:"p"},"sync")," method to construct many-to-many associations. The ",(0,i.kt)("inlineCode",{parentName:"p"},"sync")," method accepts a vector of IDs to place on the intermediate table. Any IDs that are not in the given vector will be removed from the intermediate table. So, after this operation is complete, only the IDs in the given vector will exist in the intermediate table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"user->roles()->sync({1, 2, 3});\n")),(0,i.kt)("p",null,"You may also pass additional intermediate table values with the IDs:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'user->roles()->sync({\n    {1, {{"expires", true}}},\n    {2, {}},\n    {3, {}},\n});\n')),(0,i.kt)("p",null,"If you do not want to detach existing IDs that are missing from the given vector, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"syncWithoutDetaching")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"user->roles()->syncWithoutDetaching({1, 2, 3});\n")),(0,i.kt)("h4",{id:"updating-a-record-on-the-intermediate-table"},"Updating A Record On The Intermediate Table"),(0,i.kt)("p",null,"If you need to update an existing row in your relationship's intermediate table, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"updateExistingPivot")," method. This method accepts the intermediate record foreign key and the vector of attributes to update:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto user = User::find(1);\n\nuser->roles()->updateExistingPivot(roleId, {\n    {"active", false},\n});\n')),(0,i.kt)("h2",{id:"touching-parent-timestamps"},"Touching Parent Timestamps"),(0,i.kt)("p",null,"When a model defines a ",(0,i.kt)("inlineCode",{parentName:"p"},"belongsTo")," relationship to another model, such as a ",(0,i.kt)("inlineCode",{parentName:"p"},"Comment")," which belongs to a ",(0,i.kt)("inlineCode",{parentName:"p"},"Post"),", it is sometimes helpful to update the parent's timestamp when the child model is updated."),(0,i.kt)("p",null,"For example, when a ",(0,i.kt)("inlineCode",{parentName:"p"},"Comment"),' model is updated, you may want to automatically "touch" the ',(0,i.kt)("inlineCode",{parentName:"p"},"updated_at")," timestamp of the owning ",(0,i.kt)("inlineCode",{parentName:"p"},"Post")," so that it is set to the current date and time. To accomplish this, you may add a ",(0,i.kt)("inlineCode",{parentName:"p"},"u_touches")," data member to your child model containing the names of the relationships that should have their ",(0,i.kt)("inlineCode",{parentName:"p"},"updated_at")," timestamps updated when the child model is updated:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'using Orm::Tiny::Model;\nusing Orm::Tiny::Relations::BelongsTo;\n\nclass Comment final : public Model<Comment, Post>\n{\n    friend Model;\n    using Model::Model;\n\npublic:\n    /*! Get the post that owns the comment. */\n    std::unique_ptr<BelongsTo<Comment, Post>>\n    post()\n    {\n        return belongsTo<Post>();\n    }\n\nprivate:\n    /*! Map of relation names to methods. */\n    QHash<QString, RelationVisitor> u_relations {\n        {"post", [](auto &v) { v(&Comment::post); }},\n    };\n\n    /*! All of the relationships to be touched. */\n    QStringList u_touches {"post"};\n};\n')),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Parent model timestamps will only be updated if the child model is updated using TinyORM's ",(0,i.kt)("inlineCode",{parentName:"p"},"save"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"push"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"remove")," method."))))}u.isMDXComponent=!0}}]);