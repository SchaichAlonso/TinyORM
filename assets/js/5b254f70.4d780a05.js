"use strict";(self.webpackChunktinyorm_org=self.webpackChunktinyorm_org||[]).push([[116],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=d(n),h=i,c=u["".concat(s,".").concat(h)]||u[h]||p[h]||r;return n?a.createElement(c,l(l({ref:t},m),{},{components:n})):a.createElement(c,l({ref:t},m))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7923:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:0,sidebar_label:"Getting Started",description:'TinyORM is an object-relational mapper (ORM) that makes it enjoyable to interact with your database. When using TinyORM, each database table has a corresponding "Model" that is used to interact with that table. In addition to retrieving records from the database table, TinyORM models allow you to insert, update, and delete records from the table as well.',keywords:["c++ orm","orm","getting started","tinyorm"]},l="TinyORM: Getting Started",o={unversionedId:"tinyorm/getting-started",id:"tinyorm/getting-started",title:"TinyORM: Getting Started",description:'TinyORM is an object-relational mapper (ORM) that makes it enjoyable to interact with your database. When using TinyORM, each database table has a corresponding "Model" that is used to interact with that table. In addition to retrieving records from the database table, TinyORM models allow you to insert, update, and delete records from the table as well.',source:"@site/docs/tinyorm/getting-started.mdx",sourceDirName:"tinyorm",slug:"/tinyorm/getting-started",permalink:"/tinyorm/getting-started",draft:!1,editUrl:"https://github.com/silverqx/TinyORM-github.io/edit/main/docs/tinyorm/getting-started.mdx",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0,sidebar_label:"Getting Started",description:'TinyORM is an object-relational mapper (ORM) that makes it enjoyable to interact with your database. When using TinyORM, each database table has a corresponding "Model" that is used to interact with that table. In addition to retrieving records from the database table, TinyORM models allow you to insert, update, and delete records from the table as well.',keywords:["c++ orm","orm","getting started","tinyorm"]},sidebar:"tinyormSidebar",previous:{title:"Seeding",permalink:"/database/seeding"},next:{title:"Relationships",permalink:"/tinyorm/relationships"}},s={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Generating Model Classes",id:"generating-model-classes",level:2},{value:"TinyORM Model Conventions",id:"tinyorm-model-conventions",level:2},{value:"Table Names",id:"table-names",level:3},{value:"Primary Keys",id:"primary-keys",level:3},{value:"&quot;Composite&quot; Primary Keys",id:"composite-primary-keys",level:4},{value:"Timestamps",id:"timestamps",level:3},{value:"Database Connections",id:"database-connections",level:3},{value:"Default Attribute Values",id:"default-attribute-values",level:2},{value:"Retrieving Models",id:"retrieving-models",level:2},{value:"Building Queries",id:"building-queries",level:4},{value:"Refreshing Models",id:"refreshing-models",level:4},{value:"Containers",id:"containers",level:3},{value:"Chunking Results",id:"chunking-results",level:3},{value:"Advanced Subqueries",id:"advanced-subqueries",level:3},{value:"Subquery Selects",id:"subquery-selects",level:4},{value:"Subquery Ordering",id:"subquery-ordering",level:4},{value:"Retrieving Single Models / Aggregates",id:"retrieving-single-models",level:2},{value:"Not Found Exceptions",id:"not-found-exceptions",level:4},{value:"Retrieving Or Creating Models",id:"retrieving-or-creating-models",level:3},{value:"Retrieving Aggregates",id:"retrieving-aggregates",level:3},{value:"Inserting &amp; Updating Models",id:"inserting-and-updating-models",level:2},{value:"Inserts",id:"inserts",level:3},{value:"Updates",id:"updates",level:3},{value:"Mass Updates",id:"mass-updates",level:4},{value:"Examining Attribute Changes",id:"examining-attribute-changes",level:4},{value:"Mass Assignment",id:"mass-assignment",level:3},{value:"Allowing Mass Assignment",id:"allowing-mass-assignment",level:4},{value:"Deleting Models",id:"deleting-models",level:2},{value:"Deleting An Existing Model By Its Primary Key",id:"deleting-an-existing-model-by-its-primary-key",level:4},{value:"Deleting Models Using Queries",id:"deleting-models-using-queries",level:4},{value:"Truncate Table",id:"truncate-table",level:3},{value:"Comparing Models",id:"comparing-models",level:2}],m={toc:d};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tinyorm-getting-started"},"TinyORM: Getting Started"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#generating-model-classes"},"Generating Model Classes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#tinyorm-model-conventions"},"TinyORM Model Conventions"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#table-names"},"Table Names")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#primary-keys"},"Primary Keys")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#timestamps"},"Timestamps")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#database-connections"},"Database Connections")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#default-attribute-values"},"Default Attribute Values")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#retrieving-models"},"Retrieving Models"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#containers"},"Containers")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#chunking-results"},"Chunking Results")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#advanced-subqueries"},"Advanced Subqueries")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#retrieving-single-models"},"Retrieving Single Models / Aggregates"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#retrieving-or-creating-models"},"Retrieving Or Creating Models")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#retrieving-aggregates"},"Retrieving Aggregates")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#inserting-and-updating-models"},"Inserting & Updating Models"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#inserts"},"Inserts")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#updates"},"Updates")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#mass-assignment"},"Mass Assignment")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#deleting-models"},"Deleting Models"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#truncate-table"},"Truncate Table")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#comparing-models"},"Comparing Models"))),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,'TinyORM is an object-relational mapper (ORM) that makes it enjoyable to interact with your database. When using TinyORM, each database table has a corresponding "Model" that is used to interact with that table. In addition to retrieving records from the database table, TinyORM models allow you to insert, update, and delete records from the table as well.'),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Before getting started, be sure to configure a database connection in your application. For more information on configuring your database, check out the ",(0,i.kt)("a",{parentName:"p",href:"/database/getting-started#configuration"},"database configuration documentation"),".")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you want to see a model in which are used all possible TinyORM features you can look at the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/silverqx/TinyORM/blob/main/tests/models/models/torrent.hpp"},(0,i.kt)("inlineCode",{parentName:"a"},"torrent.hpp"))," in the TinyORM's tests, this ",(0,i.kt)("inlineCode",{parentName:"p"},"Models::Torrent")," class serves also as a showcase, so all possible features are defined in it.")),(0,i.kt)("h2",{id:"generating-model-classes"},"Generating Model Classes"),(0,i.kt)("p",null,"To get started, let's create the simplest TinyORM model. Models typically live in the ",(0,i.kt)("inlineCode",{parentName:"p"},"database\\models")," directory and extend the ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::Tiny::Model")," class. You may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"make:model")," command to generate a new model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"tom make:model User\n")),(0,i.kt)("p",null,"If you would like to generate a database ",(0,i.kt)("a",{parentName:"p",href:"/database/migrations"},"migration")," or ",(0,i.kt)("a",{parentName:"p",href:"/database/seeding"},"seeder")," when you generate the model, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"--migration"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"-m")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"--seeder"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"-s")," options:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"tom make:model User --migration --seeder\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"--force")," option forces overwriting of existing files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"tom make:model User --migration --seeder --force\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"make:model")," is king \ud83d\udc51 among scaffolding commands that you can use to generate complete TinyORM model classes, it supports all features that TinyORM models offer. All advanced features are described in the ",(0,i.kt)("inlineCode",{parentName:"p"},"make:model")," help command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"tom make:model --help\n")),(0,i.kt)("p",null,"Few examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},"# Setting some model attributes\ntom make:model User --table=users --fillable=name,email,banned_at `\n                    --guarded=password --dates=banned_at\n\n# Generate relationship methods\ntom make:model User --one-to-one=Passport `\n                    --one-to-many=Post --foreign-key=post_id `\n                    --one-to-many=Car\n\n# Generate a basic many-to-many relationship\ntom make:model User --belongs-to-many=Tag --with-timestamps\n\n# Generate a many-to-many relationship\ntom make:model User --belongs-to-many=Tag --foreign-key=tag_id `\n                    --pivot-table=user_tag --as=tagged `\n                    --with-pivot=active,soft --with-timestamps `\n                    --pivot=Tagged\n\n# Generate a pivot model\ntom make:model Tagged --pivot-model\ntom make:model Tagged --pivot-model --incrementing\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Writing a ",(0,i.kt)("inlineCode",{parentName:"p"},"make:model")," commands is superb with the ",(0,i.kt)("a",{parentName:"p",href:"/database/migrations#tab-completion"},"tab-completion"),".")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"--path")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"--realpath")," options work the same as for the ",(0,i.kt)("a",{parentName:"p",href:"/database/migrations#generating-migrations"},(0,i.kt)("inlineCode",{parentName:"a"},"make:migration"))," command.")),(0,i.kt)("h2",{id:"tinyorm-model-conventions"},"TinyORM Model Conventions"),(0,i.kt)("p",null,"Let's examine a basic model class and discuss some of TinyORM's key conventions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#pragma once\n#ifndef FLIGHT_HPP\n#define FLIGHT_HPP\n\n#include <orm/tiny/model.hpp>\n\nusing Orm::Tiny::Model;\n\nclass Flight final : public Model<Flight>\n{\n    friend Model;\n\n    using Model::Model;\n};\n\n#endif // FLIGHT_HPP\n")),(0,i.kt)("h3",{id:"table-names"},"Table Names"),(0,i.kt)("p",null,"After glancing at the example above, you may have noticed that we did not tell TinyORM which database table corresponds to our ",(0,i.kt)("inlineCode",{parentName:"p"},"Flight"),' model. By convention, the "snake case", plural name of the class will be used as the table name unless another name is explicitly specified. So, in this case, TinyOrm will assume the ',(0,i.kt)("inlineCode",{parentName:"p"},"Flight")," model stores records in the ",(0,i.kt)("inlineCode",{parentName:"p"},"flights")," table, while an ",(0,i.kt)("inlineCode",{parentName:"p"},"AirTrafficOperator")," model would store records in an ",(0,i.kt)("inlineCode",{parentName:"p"},"air_traffic_operators")," table."),(0,i.kt)("p",null,"If your model's corresponding database table does not fit this convention, you may manually specify the model's table name by defining the private ",(0,i.kt)("inlineCode",{parentName:"p"},"u_table")," data member on the model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include <orm/tiny/model.hpp>\n\nusing Orm::Tiny::Model;\n\nclass Flight final : public Model<Flight>\n{\n    friend Model;\n    using Model::Model;\n\nprivate:\n    /*! The table associated with the model. */\n    QString u_table {"torrents"};\n};\n')),(0,i.kt)("h3",{id:"primary-keys"},"Primary Keys"),(0,i.kt)("p",null,"TinyORM will also assume that each model's corresponding database table has a primary key column named ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),". If necessary, you may define a private ",(0,i.kt)("inlineCode",{parentName:"p"},"u_primaryKey")," data member on your model to specify a different column that serves as your model's primary key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include <orm/tiny/model.hpp>\n\nusing Orm::Tiny::Model;\n\nclass Flight final : public Model<Flight>\n{\n    friend Model;\n    using Model::Model;\n\nprivate:\n    /*! The primary key associated with the table. */\n    QString u_primaryKey {"id"};\n};\n')),(0,i.kt)("p",null,"In addition, TinyORM assumes that the primary key is an incrementing integer value. If you wish to use a non-incrementing or a non-numeric primary key you must define a private ",(0,i.kt)("inlineCode",{parentName:"p"},"u_incrementing")," data member on your model that is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#include <orm/tiny/model.hpp>\n\nusing Orm::Tiny::Model;\n\nclass Flight final : public Model<Flight>\n{\n    friend Model;\n    using Model::Model;\n\nprivate:\n    /*! Indicates if the model's ID is auto-incrementing. */\n    bool u_incrementing = false;\n};\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Non-numeric primary keys are not currently implemented, ",(0,i.kt)("inlineCode",{parentName:"p"},"u_incrementing")," code logic is fully implemented, but it is only one part to make it fully work.")),(0,i.kt)("h4",{id:"composite-primary-keys"},'"Composite" Primary Keys'),(0,i.kt)("p",null,'TinyOrm requires each model to have at least one uniquely identifying "ID" that can serve as its primary key. "Composite" primary keys are not supported by TinyOrm models. However, you are free to add additional multi-column unique indexes to your database tables, in addition to the table\'s uniquely identifying primary key.'),(0,i.kt)("h3",{id:"timestamps"},"Timestamps"),(0,i.kt)("p",null,"By default, TinyOrm expects ",(0,i.kt)("inlineCode",{parentName:"p"},"created_at")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"updated_at")," columns to exist on your model's corresponding database table.  TinyOrm will automatically set these column's values when models are created or updated. If you do not want these columns to be automatically managed by TinyOrm, you should define a private ",(0,i.kt)("inlineCode",{parentName:"p"},"u_timestamps")," data member on your model with a value of ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#include <orm/tiny/model.hpp>\n\nusing Orm::Tiny::Model;\n\nclass Flight final : public Model<Flight>\n{\n    friend Model;\n    using Model::Model;\n\nprivate:\n    /*! Indicates if the model should be timestamped. */\n    bool u_timestamps = false;\n};\n")),(0,i.kt)("p",null,"If you need to customize the format of your model's timestamps, set the private ",(0,i.kt)("inlineCode",{parentName:"p"},"u_dateFormat")," data member on your model. This data member determines how date attributes are stored in the database, supported formats are described in the ",(0,i.kt)("inlineCode",{parentName:"p"},"QDateTime")," documentation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include <orm/tiny/model.hpp>\n\nusing Orm::Tiny::Model;\n\nclass Flight final : public Model<Flight>\n{\n    friend Model;\n    using Model::Model;\n\nprivate:\n    /*! The storage format of the model\'s date columns. */\n    QString u_dateFormat {"yyyy-MM-dd HH:mm:ss"};\n};\n')),(0,i.kt)("p",null,"If you need to customize the names of the columns used to store the timestamps, you may define ",(0,i.kt)("inlineCode",{parentName:"p"},"CREATED_AT")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"UPDATED_AT")," private static constants on your model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include <orm/tiny/model.hpp>\n\nusing Orm::Tiny::Model;\n\nclass Flight final : public Model<Flight>\n{\n    friend Model;\n    using Model::Model;\n\nprivate:\n    /*! The name of the "created at" column. */\n    inline static const QString CREATED_AT = QStringLiteral("created_at");\n    /*! The name of the "updated at" column. */\n    inline static const QString UPDATED_AT = QStringLiteral("updated_at");\n};\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can make these static constants non-inline and initialize them in the cpp file.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You may also use ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::CREATED_AT")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::UPDATED_AT")," string constants instead of ",(0,i.kt)("inlineCode",{parentName:"p"},'QStringLiteral("created_at")'),".")),(0,i.kt)("h3",{id:"database-connections"},"Database Connections"),(0,i.kt)("p",null,"By default, all TinyOrm models will use the default database connection that is configured for your application. If you would like to specify a different connection that should be used when interacting with a particular model, you should define a ",(0,i.kt)("inlineCode",{parentName:"p"},"u_connection")," private data member on the model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include <orm/tiny/model.hpp>\n\nusing Orm::Tiny::Model;\n\nclass Flight final : public Model<Flight>\n{\n    friend Model;\n    using Model::Model;\n\nprivate:\n    /*! The database connection that should be used by the model. */\n    QString u_connection {"sqlite"};\n};\n')),(0,i.kt)("p",null,"In special cases, when you want to query the database through a different connection, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"Model::on")," method, which takes the connection name as the first argument:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto user = User::on("sqlite")->find(1);\n')),(0,i.kt)("h2",{id:"default-attribute-values"},"Default Attribute Values"),(0,i.kt)("p",null,"By default, a newly instantiated model instance will not contain any attribute values. If you would like to define the default values for some of your model's attributes, you may define an ",(0,i.kt)("inlineCode",{parentName:"p"},"u_attributes")," data member on your model, it has to be ",(0,i.kt)("strong",{parentName:"p"},"static")," and can be ",(0,i.kt)("strong",{parentName:"p"},"const"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include <QDateTime>\n\n#include <orm/tiny/model.hpp>\n\nusing Orm::AttributeItem;\nusing Orm::Tiny::Model;\n\nclass Flight final : public Model<Flight>\n{\n    friend Model;\n    using Model::Model;\n\nprivate:\n    /*! The model\'s default values for attributes. */\n    inline static const QVector<AttributeItem> u_attributes {\n        {"delayed",  false},\n        {"progress", 0},\n        {"added_on", QDateTime::currentDateTime()},\n    };\n};\n')),(0,i.kt)("h2",{id:"retrieving-models"},"Retrieving Models"),(0,i.kt)("p",null,"Once you have created a model and its associated database table, you are ready to start retrieving data from your database. You can think of each TinyOrm model as a powerful ",(0,i.kt)("a",{parentName:"p",href:"/database/query-builder"},"query builder")," allowing you to fluently query the database table associated with the model. The model's ",(0,i.kt)("inlineCode",{parentName:"p"},"all")," method will retrieve all of the records from the model's associated database table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include <QDebug>\n\n#include "models/flight.hpp"\n\nfor (const auto &flight : Flight::all())\n    qDebug() << flight["name"].toString();\n')),(0,i.kt)("h4",{id:"building-queries"},"Building Queries"),(0,i.kt)("p",null,"The TinyOrm ",(0,i.kt)("inlineCode",{parentName:"p"},"all")," method will return all of the results in the model's table. However, since each TinyOrm model serves as a ",(0,i.kt)("a",{parentName:"p",href:"/database/query-builder"},"query builder"),", you may add additional constraints to queries and then invoke the ",(0,i.kt)("inlineCode",{parentName:"p"},"get")," method to retrieve the results:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto flights = Flight::whereEq("active", 1)\n           ->orderBy("name")\n           .take(10)\n           .get();\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Since TinyOrm models are query builders, you should review all of the methods provided by TinyORM's ",(0,i.kt)("a",{parentName:"p",href:"/database/query-builder"},"query builder"),". You may use any of these methods when writing your TinyOrm queries.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"All the static methods defined on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::Tiny::Model<Derived, AllRelations...>")," class, which start building queries like ",(0,i.kt)("inlineCode",{parentName:"p"},"where"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"latest"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"oldest"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"with"),", ... return ",(0,i.kt)("inlineCode",{parentName:"p"},"std::unique_ptr<TinyBuilder<Model>>"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyBuilder = Orm::Tiny::Builder")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Model")," template argument is queried model class.")),(0,i.kt)("h4",{id:"refreshing-models"},"Refreshing Models"),(0,i.kt)("p",null,'If you already have an instance of the TinyOrm model that was retrieved from the database, you can "refresh" the model using the ',(0,i.kt)("inlineCode",{parentName:"p"},"fresh")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"refresh")," methods. The ",(0,i.kt)("inlineCode",{parentName:"p"},"fresh")," method will re-retrieve the model from the database. The existing model instance will not be affected:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto flight = Flight::whereEq("number", "FR 900")->first();\n\nauto freshFlight = flight->fresh();\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"refresh")," method will re-hydrate the existing model using fresh data from the database. In addition, all of its loaded relationships will be refreshed as well:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto flight = Flight::whereEq("number", "FR 900")->first();\n\nflight->setAttribute("number", "FR 456");\n\nflight->refresh();\n\nflight->getAttribute("number"); // "FR 900"\n')),(0,i.kt)("h3",{id:"containers"},"Containers"),(0,i.kt)("p",null,"As we have seen, TinyORM methods like ",(0,i.kt)("inlineCode",{parentName:"p"},"all")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"get")," retrieve multiple records from the database. Since these methods return a ",(0,i.kt)("inlineCode",{parentName:"p"},"QVector<Model>"),", you can iterate it like any other container with the ",(0,i.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/language/range-for"},"Range-based for loop"),", ",(0,i.kt)("a",{parentName:"p",href:"https://doc.qt.io/qt-5/containers.html#stl-style-iterators"},"STL-Style Iterators"),", ",(0,i.kt)("a",{parentName:"p",href:"https://doc.qt.io/qt-5/containers.html#java-style-iterators"},"Java-Style Iterators")," or ",(0,i.kt)("a",{parentName:"p",href:"https://www.walletfox.com/course/quickref_range_v3.php"},"Ranges"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include <QDebug>\n\n#include "models/flight.hpp"\n\nfor (const auto &flight : Flight::all())\n    qDebug() << flight["name"].toString();\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"An ",(0,i.kt)("inlineCode",{parentName:"p"},"all")," method is defined on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::Tiny::Model<Derived, AllRelations...>")," class and ",(0,i.kt)("inlineCode",{parentName:"p"},"get")," method is defined on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::Tiny::Builder"),", may be also referred as ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyBuilder"),", and on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::Query::Builder")," alias ",(0,i.kt)("inlineCode",{parentName:"p"},"QueryBuilder"),".")),(0,i.kt)("h3",{id:"chunking-results"},"Chunking Results"),(0,i.kt)("p",null,"Your application may run out of memory if you attempt to load tens of thousands of TinyORM records via the ",(0,i.kt)("inlineCode",{parentName:"p"},"all")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"get")," methods. Instead of using these methods, the ",(0,i.kt)("inlineCode",{parentName:"p"},"chunk")," method may be used to process large numbers of models more efficiently."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"chunk")," method will retrieve a subset of TinyORM models, passing them to a lambda expression for processing. Since only the current chunk of TinyORM models is retrieved at a time, the ",(0,i.kt)("inlineCode",{parentName:"p"},"chunk")," method will provide significantly reduced memory usage when working with a large number of models:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Flight::chunk(200, [](QVector<Flight> &&flights, const int /*unused*/)\n{\n    for (auto &&flight : flights) {\n        //\n    }\n\n    return true;\n});\n")),(0,i.kt)("p",null,"The first argument passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"chunk"),' method is the number of records you wish to receive per "chunk". The lambda expression passed as the second argument will be invoked for each chunk that is retrieved from the database. A database query will be executed to retrieve each chunk of records passed to the lambda expression.'),(0,i.kt)("p",null,"If you are filtering the results of the ",(0,i.kt)("inlineCode",{parentName:"p"},"chunk")," method based on a column that you will also be updating while iterating over the results, you should use the ",(0,i.kt)("inlineCode",{parentName:"p"},"chunkById")," method. Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"chunk")," method in these scenarios could lead to unexpected and inconsistent results. Internally, the ",(0,i.kt)("inlineCode",{parentName:"p"},"chunkById")," method will always retrieve models with an ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," column greater than the last model in the previous chunk:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Flight::whereEq("departed", true)\n    ->chunkById(200, [](QVector<Flight> &&flights, const int /*unused*/)\n    {\n        for (auto &&flight : flights)\n            flight.update({{"departed", false}});\n\n        return true;\n    });\n')),(0,i.kt)("h3",{id:"advanced-subqueries"},"Advanced Subqueries"),(0,i.kt)("h4",{id:"subquery-selects"},"Subquery Selects"),(0,i.kt)("p",null,"TinyORM also offers advanced subquery support, which allows you to pull information from related tables in a single query. For example, let's imagine that we have a table of flight ",(0,i.kt)("inlineCode",{parentName:"p"},"destinations")," and a table of ",(0,i.kt)("inlineCode",{parentName:"p"},"flights")," to destinations. The ",(0,i.kt)("inlineCode",{parentName:"p"},"flights")," table contains an ",(0,i.kt)("inlineCode",{parentName:"p"},"arrived_at")," column which indicates when the flight arrived at the destination."),(0,i.kt)("p",null,"Using the subquery functionality available to the query builder's ",(0,i.kt)("inlineCode",{parentName:"p"},"select")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"addSelect")," methods, we can select all of the ",(0,i.kt)("inlineCode",{parentName:"p"},"destinations")," and the name of the flight that most recently arrived at that destination using a single query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/destination.hpp"\n#include "models/flight.hpp"\n\nreturn Destination::addSelect(\n        Flight::select("name")\n            ->whereColumnEq("destination_id", "destinations.id")\n            .orderByDesc("arrived_at")\n            .limit(1)\n            .toBase(), "last_flight")\n    ->get();\n')),(0,i.kt)("h4",{id:"subquery-ordering"},"Subquery Ordering"),(0,i.kt)("p",null,"In addition, the query builder's ",(0,i.kt)("inlineCode",{parentName:"p"},"orderBy")," function supports subqueries. Continuing to use our flight example, we may use this functionality to sort all destinations based on when the last flight arrived at that destination. Again, this may be done while executing a single database query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'return Destination::orderByDesc(\n        Flight::select("arrived_at")\n            ->whereColumnEq("destination_id", "destinations.id")\n            .orderByDesc("arrived_at")\n            .limit(1)\n            .toBase())\n    ->get();\n')),(0,i.kt)("h2",{id:"retrieving-single-models"},"Retrieving Single Models / Aggregates"),(0,i.kt)("p",null,"In addition to retrieving all of the records matching a given query, you may also retrieve single records using the ",(0,i.kt)("inlineCode",{parentName:"p"},"find"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"first"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"firstWhere"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"firstWhereEq")," methods. Instead of returning a vector of models, these methods return a single model instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/flight.hpp"\n\n// Retrieve a model by its primary key...\nauto flight = Flight::find(1);\n\n// Retrieve the first model matching the query constraints...\nauto flight = Flight::whereEq("active", 1)->first();\n\n// Alternative to retrieving the first model matching the query constraints...\nauto flight = Flight::firstWhere("active", "=", 1);\n\n// Alternative firstWhere method syntax\nauto flight = Flight::firstWhereEq("active", 1);\n')),(0,i.kt)("p",null,"Sometimes you may wish to perform some other action if no results are found. The ",(0,i.kt)("inlineCode",{parentName:"p"},"findOr")," methods will return a single model instance or, if no results are found, execute the given lambda expression. The value returned by the lambda will be considered the result of the method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"auto flight = Flight::findOr(1, [] {\n    // ...\n});\n\nauto flight = Flight::findOr<int>(1, [] {\n    // ...\n    return 10;\n});\n\nauto flight = Flight::findOr<std::optional<Flight>>(1, [] {\n    // ...\n    return Flight::find(10);\n});\n")),(0,i.kt)("h4",{id:"not-found-exceptions"},"Not Found Exceptions"),(0,i.kt)("p",null,"Sometimes you may wish to throw an exception if a model is not found. The ",(0,i.kt)("inlineCode",{parentName:"p"},"findOrFail")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"firstOrFail")," methods will retrieve the first result of the query; however, if no result is found, an ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::Tiny::ModelNotFoundError")," will be thrown:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto flight = Flight::findOrFail(1);\n\nauto flight = Flight::where("legs", ">", 3)->firstOrFail();\n')),(0,i.kt)("h3",{id:"retrieving-or-creating-models"},"Retrieving Or Creating Models"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"firstOrCreate")," method will attempt to locate a database record using the given column / value pairs. If the model can not be found in the database, a record will be inserted with the attributes resulting from merging the first ",(0,i.kt)("inlineCode",{parentName:"p"},"QVector<Orm::WhereItem>")," argument with the optional second ",(0,i.kt)("inlineCode",{parentName:"p"},"QVector<Orm::AttributeItem>")," argument:"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"firstOrNew")," method, like ",(0,i.kt)("inlineCode",{parentName:"p"},"firstOrCreate"),", will attempt to locate a record in the database matching the given attributes. However, if a model is not found, a new model instance will be returned. Note that the model returned by ",(0,i.kt)("inlineCode",{parentName:"p"},"firstOrNew")," has not yet been persisted to the database. You will need to manually call the ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," method to persist it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/flight.hpp"\n\n// Retrieve flight by name or create it if it doesn\'t exist...\nauto flight = Flight::firstOrCreate({\n    {"name", "London to Paris"}\n});\n\n// Retrieve flight by name or create it with the name, delayed, and arrival_time attributes...\nauto flight = Flight::firstOrCreate(\n    {{"name", "London to Paris"}},\n    {{"delayed", 1}, {"arrival_time", "11:30"}}\n);\n\n// Retrieve flight by name or instantiate a new Flight instance...\nauto flight = Flight::firstOrNew({\n    {"name", "London to Paris"}\n});\n\n// Retrieve flight by name or instantiate with the name, delayed, and arrival_time attributes...\nauto flight = Flight::firstOrNew(\n    {{"name", "Tokyo to Sydney"}},\n    {{"delayed", 1}, {"arrival_time", "11:30"}}\n);\n')),(0,i.kt)("h3",{id:"retrieving-aggregates"},"Retrieving Aggregates"),(0,i.kt)("p",null,"When interacting with TinyORM models, you may also use the ",(0,i.kt)("inlineCode",{parentName:"p"},"count"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"sum"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"max"),", and other ",(0,i.kt)("a",{parentName:"p",href:"/database/query-builder#aggregates"},"aggregate methods")," provided by the ",(0,i.kt)("a",{parentName:"p",href:"/database/query-builder"},"query builder"),". As you might expect, these methods return a scalar value instead of a TinyORM model instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto count = Flight::whereEq("active", 1)->count();\n\nauto max = Flight::whereEq("active", 1)->max("price");\n')),(0,i.kt)("h2",{id:"inserting-and-updating-models"},"Inserting & Updating Models"),(0,i.kt)("h3",{id:"inserts"},"Inserts"),(0,i.kt)("p",null,"Of course, when using TinyOrm, we don't only need to retrieve models from the database. We also need to insert new records. Thankfully, TinyOrm makes it simple. To insert a new record into the database, you should instantiate a new model instance and set attributes on the model. Then, call the ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," method on the model instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/flight.hpp"\n\n// Store a new flight in the database\nFlight flight;\nflight.setAttribute("name", "Slovakia to Czech");\nflight.save();\n')),(0,i.kt)("p",null,"In this example, we assign the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," attribute of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Flight")," model instance. When we call the ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," method, a record will be inserted into the database. The model's ",(0,i.kt)("inlineCode",{parentName:"p"},"created_at")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"updated_at")," timestamps will automatically be set when the ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," method is called, so there is no need to set them manually."),(0,i.kt)("p",null,"Alternatively, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"create"),' method to "save" a new model using a single c++ statement. The inserted model instance will be returned to you by the ',(0,i.kt)("inlineCode",{parentName:"p"},"create")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/flight.hpp"\n\nauto flight = Flight::create({\n    {"name", "London to Paris"},\n});\n')),(0,i.kt)("p",null,"However, before using the ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," method, you will need to specify either a ",(0,i.kt)("inlineCode",{parentName:"p"},"u_fillable")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"u_guarded")," static data member on your model class. These static data members are required because all TinyORM models are protected against mass assignment vulnerabilities by default. To learn more about mass assignment, please consult the ",(0,i.kt)("a",{parentName:"p",href:"#mass-assignment"},"mass assignment documentation"),"."),(0,i.kt)("h3",{id:"updates"},"Updates"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," method may also be used to update models that already exist in the database. To update a model, you should retrieve it and set any attributes you wish to update. Then, you should call the model's ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," method. Again, the ",(0,i.kt)("inlineCode",{parentName:"p"},"updated_at")," timestamp will automatically be updated, so there is no need to manually set its value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/flight.hpp"\n\nauto flight = Flight::find(1);\n\nflight->setAttribute("name", "Paris to London");\n\nflight->save();\n')),(0,i.kt)("h4",{id:"mass-updates"},"Mass Updates"),(0,i.kt)("p",null,"Updates can also be performed against models that match a given query. In this example, all flights that are ",(0,i.kt)("inlineCode",{parentName:"p"},"active")," and have a ",(0,i.kt)("inlineCode",{parentName:"p"},"destination")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"San Diego")," will be marked as delayed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Flight::whereEq("active", 1)\n      ->whereEq("destination", "San Diego")\n      .update({{"delayed", 1}});\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," method expects the ",(0,i.kt)("inlineCode",{parentName:"p"},"QVector<Orm::UpdateItem>")," of column and value pairs representing the columns that should be updated."),(0,i.kt)("h4",{id:"examining-attribute-changes"},"Examining Attribute Changes"),(0,i.kt)("p",null,"TinyOrm provides the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDirty"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"isClean"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"wasChanged")," methods to examine the internal state of your model and determine how its attributes have changed from when the model was originally retrieved."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"isDirty")," method determines if any of the model's attributes have been changed since the model was retrieved. You may pass a specific attribute name to the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDirty")," method to determine if a particular attribute is dirty. The ",(0,i.kt)("inlineCode",{parentName:"p"},"isClean")," will determine if an attribute has remained unchanged since the model was retrieved. This method also accepts an optional attribute argument:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/user.hpp"\n\nauto user = User::create({\n    {"first_name", "Silver"},\n    {"last_name", "Zachara"},\n    {"title", "Developer"},\n});\n\nuser.setAttribute("title", "Painter");\n\nuser.isDirty(); // true\nuser.isDirty("title"); // true\nuser.isDirty("first_name"); // false\n\nuser.isClean(); // false\nuser.isClean("title"); // false\nuser.isClean("first_name"); // true\n\nuser.save();\n\nuser.isDirty(); // false\nuser.isClean(); // true\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"wasChanged")," method determines if any attributes were changed after the model was last saved into the database. If needed, you may pass an attribute name to see if a particular attribute was changed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto user = User::create({\n    {"first_name", "Silver"},\n    {"last_name", "Zachara"},\n    {"title", "Developer"},\n});\n\nuser.setAttribute("title", "Painter");\n\nuser.wasChanged(); // false\n\nuser.save();\n\nuser.wasChanged(); // true\nuser.wasChanged("title"); // true\nuser.wasChanged("first_name"); // false\n')),(0,i.kt)("h3",{id:"mass-assignment"},"Mass Assignment"),(0,i.kt)("p",null,"You may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"create"),' method to "save" a new model using a single c++ statement. The inserted model instance will be returned to you by the method:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/flight.hpp"\n\nauto flight = Flight::create({\n    {"name", "London to Paris"},\n});\n')),(0,i.kt)("p",null,"However, before using the ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," method, you will need to specify either a ",(0,i.kt)("inlineCode",{parentName:"p"},"u_fillable")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"u_guarded")," static data member on your model class. These data members are required because all TinyORM models are protected against mass assignment vulnerabilities by default."),(0,i.kt)("p",null,"A mass assignment vulnerability occurs when a user passes an unexpected HTTP request field and that field changes a column in your database that you did not expect. For example, a malicious user might send an ",(0,i.kt)("inlineCode",{parentName:"p"},"is_admin")," parameter through an HTTP request, which is then passed to your model's ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," method, allowing the user to escalate themselves to an administrator."),(0,i.kt)("p",null,"So, to get started, you should define which model attributes you want to make mass assignable. You may do this using the ",(0,i.kt)("inlineCode",{parentName:"p"},"u_fillable")," static data member on the model. For example, let's make the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," attribute of our ",(0,i.kt)("inlineCode",{parentName:"p"},"Flight")," model mass assignable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include <orm/tiny/model.hpp>\n\nusing Orm::Tiny::Model;\n\nclass Flight final : public Model<Flight>\n{\n    friend Model;\n\n    using Model::Model;\n\n    /*! The attributes that are mass assignable. */\n    inline static QStringList u_fillable {\n        "name",\n    };\n};\n')),(0,i.kt)("p",null,"Once you have specified which attributes are mass assignable, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," method to insert a new record in the database. The ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," method returns the newly created model instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto flight = Flight::create({{"name", "London to Paris"}});\n')),(0,i.kt)("p",null,"If you already have a model instance, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"fill")," method to populate it with the vector of attributes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'flight.fill({{"name", "Amsterdam to Frankfurt"}});\n')),(0,i.kt)("h4",{id:"allowing-mass-assignment"},"Allowing Mass Assignment"),(0,i.kt)("p",null,"If you would like to make all of your attributes mass assignable, you may define your model's ",(0,i.kt)("inlineCode",{parentName:"p"},"u_guarded")," static data member as an empty vector. If you choose to unguard your model, you should take special care to always hand-craft the vectors passed to TinyORM's ",(0,i.kt)("inlineCode",{parentName:"p"},"fill"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"create"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," methods:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#include <orm/tiny/model.hpp>\n\nusing Orm::Tiny::Model;\n\nclass Flight final : public Model<Flight>\n{\n    friend Model;\n\n    using Model::Model;\n\n    /*! The attributes that aren't mass assignable. */\n    inline static QStringList u_guarded {};\n};\n")),(0,i.kt)("h2",{id:"deleting-models"},"Deleting Models"),(0,i.kt)("p",null,"To delete a model, you may call the ",(0,i.kt)("inlineCode",{parentName:"p"},"remove"),", or an alias ",(0,i.kt)("inlineCode",{parentName:"p"},"deleteRow")," method on the model instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include "models/flight.hpp"\n\nauto flight = Flight::find(1);\n\nflight->remove();\n')),(0,i.kt)("h4",{id:"deleting-an-existing-model-by-its-primary-key"},"Deleting An Existing Model By Its Primary Key"),(0,i.kt)("p",null,"In the example above, we are retrieving the model from the database before calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"remove")," method. However, if you know the primary key of the model, you may delete the model without explicitly retrieving it by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"destroy")," method.  In addition to accepting the single primary key, the ",(0,i.kt)("inlineCode",{parentName:"p"},"destroy")," method can accept multiple primary keys:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Flight::destroy(1);\n\nFlight::destroy({1, 2, 3});\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"destroy")," method loads models from the database and calls the ",(0,i.kt)("inlineCode",{parentName:"p"},"remove")," method on each model individually, the reason for this is future compatibility with events.")),(0,i.kt)("h4",{id:"deleting-models-using-queries"},"Deleting Models Using Queries"),(0,i.kt)("p",null,"Of course, you may build the query to delete all models matching your query's criteria. In this example, we will delete all flights that are marked as inactive:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'auto deletedRows = Flight::whereEq("active", 0)->remove();\n')),(0,i.kt)("h3",{id:"truncate-table"},"Truncate Table"),(0,i.kt)("p",null,"You may call the ",(0,i.kt)("inlineCode",{parentName:"p"},"truncate")," method to delete all of the model's associated database records. The ",(0,i.kt)("inlineCode",{parentName:"p"},"truncate")," operation will also reset any auto-incrementing IDs on the model's associated table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Flight::truncate();\n")),(0,i.kt)("h2",{id:"comparing-models"},"Comparing Models"),(0,i.kt)("p",null,'Sometimes you may need to determine if two models are the "same". The ',(0,i.kt)("inlineCode",{parentName:"p"},"is")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"isNot")," methods may be used to quickly verify two models have the same primary key, table, and database connection:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"if (post.is(anotherPost)) {\n    //\n}\n")))}p.isMDXComponent=!0}}]);