"use strict";(self.webpackChunktinyorm_org=self.webpackChunktinyorm_org||[]).push([[225],{5162:function(e,n,t){t.d(n,{Z:function(){return o}});var a=t(7294),i=t(6010),r="tabItem_Ymn6";function o(e){var n=e.children,t=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,o),hidden:t},n)}},5488:function(e,n,t){t.d(n,{Z:function(){return c}});var a=t(7462),i=t(7294),r=t(6010),o=t(2389),l=t(7392),s=t(7094),m=t(2466),p="tabList__CuJ",d="tabItem_LNqP";function u(e){var n,t,o=e.lazy,u=e.block,c=e.defaultValue,k=e.values,g=e.groupId,h=e.className,T=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),N=null!=k?k:T.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),b=(0,l.l)(N,(function(e,n){return e.value===n.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===c?c:null!=(n=null!=c?c:null==(t=T.find((function(e){return e.props.default})))?void 0:t.props.value)?n:T[0].props.value;if(null!==f&&!N.some((function(e){return e.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+N.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var _=(0,s.U)(),C=_.tabGroupChoices,I=_.setTabGroupChoices,E=(0,i.useState)(f),y=E[0],v=E[1],R=[],M=(0,m.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var O=C[g];null!=O&&O!==y&&N.some((function(e){return e.value===O}))&&v(O)}var A=function(e){var n=e.currentTarget,t=R.indexOf(n),a=N[t].value;a!==y&&(M(n),v(a),null!=g&&I(g,String(a)))},S=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a,i=R.indexOf(e.currentTarget)+1;t=null!=(a=R[i])?a:R[0];break;case"ArrowLeft":var r,o=R.indexOf(e.currentTarget)-1;t=null!=(r=R[o])?r:R[R.length-1]}null==(n=t)||n.focus()};return i.createElement("div",{className:(0,r.Z)("tabs-container",p)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":u},h)},N.map((function(e){var n=e.value,t=e.label,o=e.attributes;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:y===n?0:-1,"aria-selected":y===n,key:n,ref:function(e){return R.push(e)},onKeyDown:S,onFocus:A,onClick:A},o,{className:(0,r.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":y===n})}),null!=t?t:n)}))),o?(0,i.cloneElement)(T.filter((function(e){return e.props.value===y}))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},T.map((function(e,n){return(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==y})}))))}function c(e){var n=(0,o.Z)();return i.createElement(u,(0,a.Z)({key:String(n)},e))}},2044:function(e,n,t){t.d(n,{Ae:function(){return d},C:function(){return m},Fo:function(){return o},IM:function(){return p},IZ:function(){return a},RS:function(){return k},al:function(){return c},jk:function(){return s},js:function(){return l},q5:function(){return r},qb:function(){return u},wU:function(){return i}});var a="shell",i="application",r="bash",o="pwsh",l="zsh",s="application",m="bash",p="pwsh",d="zsh",u="TestApp",c="$HOME/Code/c/",k="$env:USERPROFILE\\Code\\c\\"},4355:function(e,n,t){t.d(n,{Z:function(){return r}});var a=t(7294),i=t(9482);function r(){var e=(0,a.useContext)(i.Z);if(null!=e)return e;throw new Error("useRootFolderContext is used outside of Layout component.")}},6005:function(e,n,t){t.d(n,{AE:function(){return l},EA:function(){return o},em:function(){return m},go:function(){return s},mT:function(){return p},we:function(){return d}});var a=t(4355),i=t(2389),r=t(2044),o=function(e,n){var t;return void 0===n&&(n=!0),u(null!=(t=(0,a.Z)().rootFolder[e])?t:m(e),e,n)},l=function(){var e;return null!=(e=(0,a.Z)().rootFolder[r.wU])?e:m(r.wU)},s=function(e,n){if(void 0===n&&(n=!0),null==e)throw new Error("The groupId in the applicationFolderPath() can not be empty.");var t=n||e!==r.Fo?"/":"\\";return u(o(e)+t+l(),e,n)};function m(e){if(null==e)throw new Error("The groupId in the folderDefaultValue() can not be empty.");if(!(0,i.Z)())return"";switch(e){case r.Fo:return r.RS;case r.q5:return r.al;case r.wU:return r.qb;default:throw new Error("No default value for '"+e+"' groupId in the folderDefaultValue().")}}function p(e){return e===r.wU}function d(e,n){if(null==n||""===n)return n;var t="$ENV{$1}$2";switch(e){case r.Fo:return k(n).replace(/\$env:(.+?)(\/.*)/,t);case r.q5:return n.replace(/\$(.+?)(\/.*)/,t);default:throw new Error("Unsupported shell type '"+e+"' in the convertToCmakeEnvVariable().")}}function u(e,n,t){if(void 0===t&&(t=!0),null==e||""===e)return e;if(n!==r.Fo)return c(e);var a=c(e);return t?k(a):function(e){return null==e||""===e?e:e.replaceAll(/\/+/g,"\\")}(a)}function c(e){return null==e||""===e?e:e.replace(/[/\\]+$/,"")}function k(e){return null==e||""===e?e:e.replaceAll(/\\+(?! )/g,"/")}},3974:function(e,n,t){t.r(n),t.d(n,{assets:function(){return g},contentTitle:function(){return c},default:function(){return N},frontMatter:function(){return u},metadata:function(){return k},toc:function(){return h}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),o=t(452),l=t(5162),s=t(5488),m=t(2044),p=t(6005),d=["components"],u={sidebar_position:3,sidebar_label:"Migrations",description:"How to compile the TinyORM migrations (tom) c++ console application on Windows and Linux.",keywords:["c++ orm","building","migrations","tinyorm"]},c="Building: Migrations",k={unversionedId:"building/migrations",id:"building/migrations",title:"Building: Migrations",description:"How to compile the TinyORM migrations (tom) c++ console application on Windows and Linux.",source:"@site/docs/building/migrations.mdx",sourceDirName:"building",slug:"/building/migrations",permalink:"/building/migrations",draft:!1,editUrl:"https://github.com/silverqx/TinyORM-github.io/edit/main/docs/building/migrations.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Migrations",description:"How to compile the TinyORM migrations (tom) c++ console application on Windows and Linux.",keywords:["c++ orm","building","migrations","tinyorm"]},sidebar:"tinyormSidebar",previous:{title:"Hello world",permalink:"/building/hello-world"}},g={},h=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"vcpkg.json manifest",id:"vcpkg-json-manifest",level:3},{value:"Source code",id:"source-code",level:2},{value:"Main file",id:"main-file",level:3},{value:"Migrations",id:"migrations",level:3},{value:"Seeders",id:"seeders",level:3},{value:"Migrations with CMake",id:"migrations-with-cmake",level:2},{value:"CMake project",id:"cmake-project",level:3},{value:"Build migrations",id:"build-migrations-cmake",level:3},{value:"Execute migrations",id:"execute-migrations-cmake",level:3},{value:"Migrations with qmake",id:"migrations-with-qmake",level:2},{value:"qmake project",id:"qmake-project",level:3},{value:"Configure using .qmake.conf",id:"configure-using-qmakeconf",level:4},{value:"Migrations source files",id:"migrations-source-files",level:4},{value:"Seeders source files",id:"seeders-source-files",level:4},{value:"Build migrations",id:"build-migrations-qmake",level:3},{value:"Execute migrations",id:"execute-migrations-qmake",level:3},{value:"Finish",id:"finish",level:2}],T={toc:h};function N(e){var n=e.components,u=(0,i.Z)(e,d);return(0,r.kt)("wrapper",(0,a.Z)({},T,u,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"building-migrations"},"Building: Migrations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#prerequisites"},"Prerequisites"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#vcpkg-json-manifest"},"vcpkg.json manifest")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#source-code"},"Source code"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#main-file"},"Main file")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#migrations"},"Migrations")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#seeders"},"Seeders")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#migrations-with-cmake"},"Migrations with CMake"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#cmake-project"},"CMake project")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#build-migrations-cmake"},"Build migrations")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#execute-migrations-cmake"},"Execute migrations")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#migrations-with-qmake"},"Migrations with qmake"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#qmake-project"},"qmake project")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#build-migrations-qmake"},"Build migrations")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#execute-migrations-qmake"},"Execute migrations")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#finish"},"Finish"))),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"We will try to create a working migrations console application called as ",(0,r.kt)("abbr",{title:"TinyORM migrations"},(0,r.kt)("inlineCode",{parentName:"p"},"tom"))," in the terminal with the ",(0,r.kt)("inlineCode",{parentName:"p"},"CMake")," and in the ",(0,r.kt)("inlineCode",{parentName:"p"},"QtCreator")," IDE with the ",(0,r.kt)("inlineCode",{parentName:"p"},"qmake"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," console application also expects the following ",(0,r.kt)("a",{parentName:"p",href:"/building/tinyorm#folders-structure"},"folders structure"),", let's create them."),(0,r.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,r.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},"cd "+(0,p.go)(m.Fo)+"\nmkdir tom/tom\ncd tom")),(0,r.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},"cd "+(0,p.go)(m.q5)+"\nmkdir -p tom/tom\ncd tom"))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TinyORM")," source tree contains the ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," example application, you can inspire or look at the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/silverqx/TinyORM/tree/main/examples/tom"},"source code"),". Also ",(0,r.kt)("inlineCode",{parentName:"p"},"TinyORM")," unit tests use a ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," migrations internally to create the database structure, internally called as the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/silverqx/TinyORM/tree/main/tests/testdata_tom"},(0,r.kt)("inlineCode",{parentName:"a"},"tom")," migrations for unit tests"),"."),(0,r.kt)("p",null,"All these three console applications the ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," example, ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," migrations for unit tests, and the application described in this tutorial have practically identical source code (the main.cpp file)."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"Working MySQL database server as the ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," migrations currently provides support only for the MySQL database."),(0,r.kt)("p",null,"Install required dependencies and build the ",(0,r.kt)("inlineCode",{parentName:"p"},"TinyORM")," library with the ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," (it's enabled by default) as is described ",(0,r.kt)("a",{parentName:"p",href:"/building/hello-world#install-dependencies"},"here")," and ",(0,r.kt)("a",{parentName:"p",href:"/building/tinyorm"},"here"),"."),(0,r.kt)("h3",{id:"vcpkg-json-manifest"},"vcpkg.json manifest"),(0,r.kt)("p",null,"Whole section about the ",(0,r.kt)("inlineCode",{parentName:"p"},"vcpkg")," dependencies is described in the ",(0,r.kt)("a",{parentName:"p",href:"/building/hello-world#install-dependencies"},"Install dependencies"),"."),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"vcpkg.json")," file with the following content. ",(0,r.kt)("inlineCode",{parentName:"p"},"CMake")," example below uses this method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd tom\nvim vcpkg.json\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "https://raw.githubusercontent.com/microsoft/vcpkg/master/scripts/vcpkg.schema.json",\n  "name": "tom",\n  "version-semver": "0.1.0",\n  "description": "Tom console for TinyORM.",\n  "maintainers": "Silver Zachara <silver.zachara@gmail.com>",\n  "supports": "!(uwp | arm | android | emscripten)",\n  "dependencies": [\n    "range-v3",\n    "tabulate"\n  ]\n}\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Only ",(0,r.kt)("inlineCode",{parentName:"p"},"CMake")," via the ",(0,r.kt)("inlineCode",{parentName:"p"},"toolchain file")," supports this method.")),(0,r.kt)("h2",{id:"source-code"},"Source code"),(0,r.kt)("p",null,"Let's start in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," project folder."),(0,r.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,r.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},"cd "+(0,p.go)(m.Fo)+"/tom/tom")),(0,r.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},"cd "+(0,p.go)(m.q5)+"/tom/tom"))),(0,r.kt)("h3",{id:"main-file"},"Main file"),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"main.cpp")," source file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vim main.cpp\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"To paste a source code correctly in ",(0,r.kt)("inlineCode",{parentName:"p"},"vim"),", press ",(0,r.kt)("kbd",null,"Shift")," + ",(0,r.kt)("kbd",null,"p"),".")),(0,r.kt)("p",null,"And paste the following code."),(0,r.kt)("a",{id:"string-constants-example"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'#include <orm/db.hpp>\n\n#include <tom/application.hpp>\n\n#include "migrations/2014_10_12_000000_create_posts_table.hpp"\n\n#include "seeders/databaseseeder.hpp"\n\nusing Orm::DatabaseManager;\nusing Orm::DB;\n\nusing TomApplication = Tom::Application;\n\nusing namespace Migrations; // NOLINT(google-build-using-namespace)\nusing namespace Seeders;    // NOLINT(google-build-using-namespace)\n\n/*! Build the database manager instance and add a database connection. */\nstd::shared_ptr<DatabaseManager> setupManager();\n\n/*! c++ main function. */\nint main(int argc, char *argv[])\n{\n    try {\n        // Ownership of the shared_ptr()\n        auto db = setupManager();\n\n        return TomApplication(argc, argv, db, "TOM_MIGRATIONS_ENV")\n                .migrations<CreatePostsTable>()\n                .seeders<DatabaseSeeder>()\n                // Fire it up \ud83d\udd25\ud83d\ude80\u2728\n                .run();\n\n    } catch (const std::exception &e) {\n\n        TomApplication::logException(e);\n    }\n\n    return EXIT_FAILURE;\n}\n\nstd::shared_ptr<DatabaseManager> setupManager()\n{\n    using namespace Orm::Constants; // NOLINT(google-build-using-namespace)\n\n    // Ownership of the shared_ptr()\n    return DB::create({\n        {driver_,         QMYSQL},\n        {host_,           qEnvironmentVariable("DB_MYSQL_HOST", H127001)},\n        {port_,           qEnvironmentVariable("DB_MYSQL_PORT", P3306)},\n        {database_,       qEnvironmentVariable("DB_MYSQL_DATABASE", EMPTY)},\n        {username_,       qEnvironmentVariable("DB_MYSQL_USERNAME", EMPTY)},\n        {password_,       qEnvironmentVariable("DB_MYSQL_PASSWORD", EMPTY)},\n        {charset_,        qEnvironmentVariable("DB_MYSQL_CHARSET", UTF8MB4)},\n        {collation_,      qEnvironmentVariable("DB_MYSQL_COLLATION", UTF8MB40900aici)},\n        {timezone_,       TZ00},\n        {prefix_,         EMPTY},\n        {prefix_indexes,  true},\n        {strict_,         true},\n        {isolation_level, QStringLiteral("REPEATABLE READ")},\n        {engine_,         InnoDB},\n        {options_,        QVariantHash()},\n    },\n        QStringLiteral("tinyorm_tom"));\n}\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you have defined more database connections then you can tag the lines with the database connection names with the ",(0,r.kt)("inlineCode",{parentName:"p"},"// shell:connection")," comment and this connection names will be provided to the bash/zsh/pwsh completion for the ",(0,r.kt)("inlineCode",{parentName:"p"},"--database=")," option, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/silverqx/TinyORM/blob/main/examples/tom/main.cpp#L71"},"example"),".")),(0,r.kt)("h3",{id:"migrations"},"Migrations"),(0,r.kt)("p",null,"If you have already built the ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," application then you can generate a migrations using the ",(0,r.kt)("a",{parentName:"p",href:"/database/migrations#generating-migrations"},(0,r.kt)("inlineCode",{parentName:"a"},"make:migration"))," command \ud83d\ude0e."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tom make:migration create_posts_table\n")),(0,r.kt)("p",null,"Below is the expected folders structure for the migrations. The ",(0,r.kt)("a",{parentName:"p",href:"#migrations-source-files"},(0,r.kt)("inlineCode",{parentName:"a"},"migrations.pri"))," file is used only by the ",(0,r.kt)("inlineCode",{parentName:"p"},"qmake")," build system and is not needed with ",(0,r.kt)("inlineCode",{parentName:"p"},"CMake")," builds."),(0,r.kt)("a",{id:"folders-structure"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"tom/\n\u2514\u2500\u2500 database/\n    \u251c\u2500\u2500 migrations/\n    \u251c\u2500\u2500 seeders/\n    \u251c\u2500\u2500 migrations.pri\n    \u2514\u2500\u2500 seeders.pri\n")),(0,r.kt)("p",null,"Let's create the first migration manually."),(0,r.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,r.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},"mkdir database/migrations\n\nvim database/migrations/2014_10_12_000000_create_posts_table.hpp")),(0,r.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},"mkdir -p database/migrations\n\nvim database/migrations/2014_10_12_000000_create_posts_table.hpp"))),(0,r.kt)("p",null,"And paste the following code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'#pragma once\n\n#include <tom/migration.hpp>\n\nnamespace Migrations\n{\n\n    struct CreatePostsTable : Migration\n    {\n        /*! Filename of the migration file. */\n        T_MIGRATION\n\n        /*! Run the migrations. */\n        void up() const override\n        {\n            Schema::create("posts", [](Blueprint &table)\n            {\n                table.id();\n\n                table.string(NAME);\n                table.timestamps();\n            });\n        }\n\n        /*! Reverse the migrations. */\n        void down() const override\n        {\n            Schema::dropIfExists("posts");\n        }\n    };\n\n} // namespace Migrations\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you want, you can also build the ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," application without the migrations, simply comment out the ",(0,r.kt)("inlineCode",{parentName:"p"},"migrations")," method and the corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},'#include "migrations/xyz.hpp"')," files.")),(0,r.kt)("h3",{id:"seeders"},"Seeders"),(0,r.kt)("p",null,"If you have already built the ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," application then you can generate a seeder using the ",(0,r.kt)("a",{parentName:"p",href:"/database/seeding#writing-seeders"},(0,r.kt)("inlineCode",{parentName:"a"},"make:seeder"))," command \ud83d\ude0e."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tom make:seeder PostSeeder\n")),(0,r.kt)("p",null,"The expected folders structure is described a few paragraphs ",(0,r.kt)("a",{parentName:"p",href:"#folders-structure"},"above"),". The ",(0,r.kt)("a",{parentName:"p",href:"#seeders-source-files"},(0,r.kt)("inlineCode",{parentName:"a"},"seeders.pri"))," file is used only by the ",(0,r.kt)("inlineCode",{parentName:"p"},"qmake")," build system and is not needed with ",(0,r.kt)("inlineCode",{parentName:"p"},"CMake")," builds."),(0,r.kt)("p",null,"Let's create the root seeder class manually."),(0,r.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,r.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},"mkdir database/seeders\n\nvim database/seeders/databaseseeder.hpp")),(0,r.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},"mkdir -p database/seeders\n\nvim database/seeders/databaseseeder.hpp"))),(0,r.kt)("p",null,"And paste the following code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'#pragma once\n\n#include <tom/seeder.hpp>\n\nnamespace Seeders\n{\n\n    /*! Main database seeder. */\n    struct DatabaseSeeder : Seeder\n    {\n        /*! Run the database seeders. */\n        void run() override\n        {\n            DB::table("posts")->insert({\n                {{"name", "1. post"}},\n                {{"name", "2. post"}},\n            });\n        }\n    };\n\n} // namespace Seeders\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can create more seeder classes like this and use the ",(0,r.kt)("inlineCode",{parentName:"p"},"call<>()")," method to invoke them as is described in the ",(0,r.kt)("a",{parentName:"p",href:"/database/seeding#calling-additional-seeders"},"Calling Additional Seeders")," section.")),(0,r.kt)("h2",{id:"migrations-with-cmake"},"Migrations with CMake"),(0,r.kt)("p",null,"Create a folder for the ",(0,r.kt)("inlineCode",{parentName:"p"},"CMake")," build."),(0,r.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,r.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},"cd ..\nmkdir tom-builds-cmake/build-debug\n\ncd tom-builds-cmake/build-debug")),(0,r.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},"cd ..\nmkdir -p tom-builds-cmake/build-debug\n\ncd tom-builds-cmake/build-debug"))),(0,r.kt)("h3",{id:"cmake-project"},"CMake project"),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"CMakeLists.txt")," file with the following content. I leave the comments in the ",(0,r.kt)("inlineCode",{parentName:"p"},"CMakeLists.txt")," file because it's not as simple as the ",(0,r.kt)("inlineCode",{parentName:"p"},"Hello world")," example; to make it clear what's going on."),(0,r.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,r.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-cmake",mdxType:"CodeBlock"},'cmake_minimum_required(VERSION VERSION 3.20...3.23 FATAL_ERROR)\n\n# Specify the C++ standard\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nset(CMAKE_AUTOMOC ON)\n\n# Tom command-line application\n# ---\n\nset(Tom_ns tom)\nset(Tom_target tom)\n\nfile(REAL_PATH "../../TinyORM" TinyMainDir)\n\nset(TinyOrmSourceDir "${TinyMainDir}/TinyORM")\nset(TinyOrmBuildDir "${TinyMainDir}/TinyORM-builds-cmake/build-debug")\n\n# TinyORM CMake modules (needed to set the executable version and RC file on Windows)\nlist(APPEND CMAKE_MODULE_PATH "${TinyOrmSourceDir}/cmake/CommonModules")\n\n# build tree\nlist(APPEND CMAKE_PREFIX_PATH "${TinyOrmBuildDir}")\n\n# Initialize Project Version\n# ---\n\ninclude(TinyHelpers)\ntiny_read_version(TINY_VERSION\n    TINY_VERSION_MAJOR TINY_VERSION_MINOR TINY_VERSION_PATCH TINY_VERSION_TWEAK\n    VERSION_HEADER "${TinyOrmSourceDir}/tom/include/tom/version.hpp"\n    PREFIX TINYTOM\n    HEADER_FOR "${Tom_ns}"\n)\n\n# Basic project\n# ---\n\nproject(${Tom_ns}\n    DESCRIPTION "Tom console for TinyORM"\n    HOMEPAGE_URL "https://www.tinyorm.org"\n    LANGUAGES CXX\n    VERSION ${TINY_VERSION}\n)\n\n# Tom command-line application\n# ---\n\nadd_executable(${Tom_target}\n    main.cpp\n)\nadd_executable(${Tom_ns}::${Tom_target} ALIAS ${Tom_target})\n\n# Tom command-line application specific configuration\n# ---\n\nset_target_properties(${Tom_target}\n    PROPERTIES\n        C_VISIBILITY_PRESET "hidden"\n        CXX_VISIBILITY_PRESET "hidden"\n        VISIBILITY_INLINES_HIDDEN YES\n        VERSION ${PROJECT_VERSION}\n)\n\ntarget_include_directories(${Tom_target} PRIVATE\n    "$<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/database>"\n)\n\n# Tom command-line application defines\n# ---\n\ntarget_compile_definitions(${Tom_target}\n    PRIVATE\n        PROJECT_TOM\n)\n\n# Windows resource and manifest files\n# ---\n\n# Find icons, tom/version.hpp, and Windows manifest file for MinGW\nif(CMAKE_SYSTEM_NAME STREQUAL "Windows")\n    tiny_set_rc_flags("-I \\"${TinyOrmSourceDir}/tom/resources\\"")\nendif()\n\ninclude(TinyResourceAndManifest)\ntiny_resource_and_manifest(${Tom_target}\n    OUTPUT_DIR "${TINY_BUILD_GENDIR}/tmp/"\n    RESOURCES_DIR "${TinyOrmSourceDir}/tom/resources"\n)\n\n# Resolve and link dependencies\n# ---\n\nfind_package(QT NAMES Qt6 Qt5 COMPONENTS Core REQUIRED)\nfind_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)\nfind_package(TinyOrm 0.2.0 CONFIG REQUIRED)\n\n# Unconditional dependencies\ntarget_link_libraries(${Tom_target}\n    PRIVATE\n        Qt${QT_VERSION_MAJOR}::Core\n        TinyOrm::TinyOrm\n)')),(0,r.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-cmake",mdxType:"CodeBlock"},'cmake_minimum_required(VERSION VERSION 3.20...3.23 FATAL_ERROR)\n\n# Specify the C++ standard\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nset(CMAKE_AUTOMOC ON)\n\n# Tom command-line application\n# ---\n\nset(Tom_ns tom)\nset(Tom_target tom)\n\nfile(REAL_PATH "../../TinyORM" TinyMainDir)\n\nset(TinyOrmSourceDir "${TinyMainDir}/TinyORM")\nset(TinyOrmBuildDir "${TinyMainDir}/TinyORM-builds-cmake/build-debug")\n\n# TinyORM CMake modules (needed to set the executable version and RC file on Windows)\nlist(APPEND CMAKE_MODULE_PATH "${TinyOrmSourceDir}/cmake/CommonModules")\n\n# build tree\nlist(APPEND CMAKE_PREFIX_PATH "${TinyOrmBuildDir}")\n\n# Initialize Project Version\n# ---\n\ninclude(TinyHelpers)\ntiny_read_version(TINY_VERSION\n    TINY_VERSION_MAJOR TINY_VERSION_MINOR TINY_VERSION_PATCH TINY_VERSION_TWEAK\n    VERSION_HEADER "${TinyOrmSourceDir}/tom/include/tom/version.hpp"\n    PREFIX TINYTOM\n    HEADER_FOR "${Tom_ns}"\n)\n\n# Basic project\n# ---\n\nproject(${Tom_ns}\n    DESCRIPTION "Tom console for TinyORM"\n    HOMEPAGE_URL "https://www.tinyorm.org"\n    LANGUAGES CXX\n    VERSION ${TINY_VERSION}\n)\n\n# Tom command-line application\n# ---\n\nadd_executable(${Tom_target}\n    main.cpp\n)\nadd_executable(${Tom_ns}::${Tom_target} ALIAS ${Tom_target})\n\n# Tom command-line application specific configuration\n# ---\n\nset_target_properties(${Tom_target}\n    PROPERTIES\n        C_VISIBILITY_PRESET "hidden"\n        CXX_VISIBILITY_PRESET "hidden"\n        VISIBILITY_INLINES_HIDDEN YES\n        VERSION ${PROJECT_VERSION}\n)\n\ntarget_include_directories(${Tom_target} PRIVATE\n    "$<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/database>"\n)\n\n# Tom command-line application defines\n# ---\n\ntarget_compile_definitions(${Tom_target}\n    PRIVATE\n        PROJECT_TOM\n)\n\n# Windows resource and manifest files\n# ---\n\n# Find icons, tom/version.hpp, and Windows manifest file for MinGW\nif(CMAKE_SYSTEM_NAME STREQUAL "Windows")\n    tiny_set_rc_flags("-I \\"${TinyOrmSourceDir}/tom/resources\\"")\nendif()\n\ninclude(TinyResourceAndManifest)\ntiny_resource_and_manifest(${Tom_target}\n    OUTPUT_DIR "${TINY_BUILD_GENDIR}/tmp/"\n    RESOURCES_DIR "${TinyOrmSourceDir}/tom/resources"\n)\n\n# Resolve and link dependencies\n# ---\n\nfind_package(QT NAMES Qt6 Qt5 COMPONENTS Core REQUIRED)\nfind_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)\nfind_package(TinyOrm 0.2.0 CONFIG REQUIRED)\n\n# Unconditional dependencies\ntarget_link_libraries(${Tom_target}\n    PRIVATE\n        Qt${QT_VERSION_MAJOR}::Core\n        TinyOrm::TinyOrm\n)'))),(0,r.kt)("h3",{id:"build-migrations-cmake"},"Build migrations"),(0,r.kt)("p",null,"Now you are ready to configure ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," ",(0,r.kt)("inlineCode",{parentName:"p"},"CMake")," application. Don't forget to prepare the build environment with the ",(0,r.kt)("a",{parentName:"p",href:"/building/tinyorm#windows-prerequisites"},(0,r.kt)("inlineCode",{parentName:"a"},"qtenv6.ps1"))," command if you are building with the ",(0,r.kt)("inlineCode",{parentName:"p"},"msvc"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ../tom-builds-cmake/build-debug\n")),(0,r.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,r.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},'cmake.exe `\n-S "'+(0,p.go)(m.Fo)+'/tom/tom" `\n-B "'+(0,p.go)(m.Fo)+"/tom/tom-builds-cmake/build-debug\" `\n-G 'Ninja' `\n-D CMAKE_BUILD_TYPE:STRING='Debug' `\n-D CMAKE_TOOLCHAIN_FILE:FILEPATH=\""+(0,p.EA)(m.Fo)+'/vcpkg/scripts/buildsystems/vcpkg.cmake" `\n-D CMAKE_INSTALL_PREFIX:PATH="'+(0,p.EA)(m.Fo)+'/tmp/tom"')),(0,r.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},'cmake \\\n-S "'+(0,p.go)(m.q5)+'/tom/tom" \\\n-B "'+(0,p.go)(m.q5)+"/tom/tom-builds-cmake/build-debug\" \\\n-G 'Ninja' \\\n-D CMAKE_BUILD_TYPE:STRING='Debug' \\\n-D CMAKE_TOOLCHAIN_FILE:FILEPATH=\""+(0,p.EA)(m.q5)+'/vcpkg/scripts/buildsystems/vcpkg.cmake" \\\n-D CMAKE_INSTALL_PREFIX:PATH="'+(0,p.EA)(m.q5)+'/tmp/tom"'))),(0,r.kt)("p",null,"And build."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cmake --build . --target all\n")),(0,r.kt)("h3",{id:"execute-migrations-cmake"},"Execute migrations"),(0,r.kt)("p",null,"Do not forget to add ",(0,r.kt)("inlineCode",{parentName:"p"},"TinyOrm0d.dll")," on the path on Windows and on the ",(0,r.kt)("inlineCode",{parentName:"p"},"LD_LIBRARY_PATH")," on Linux, so ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," application can find it during execution, as is described ",(0,r.kt)("a",{parentName:"p",href:"/building/tinyorm#tinyorm-on-path-cmake"},"here"),"."),(0,r.kt)(s.Z,{groupId:m.IZ,name:"tinyorm-on-path",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},'$env:Path = "'+(0,p.go)(m.Fo,!1)+'\\TinyORM\\TinyORM-builds-cmake\\build-debug;" + $env:Path')),(0,r.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},"export LD_LIBRARY_PATH="+(0,p.go)(m.q5)+"/TinyORM/TinyORM-builds-cmake/build-debug${PATH:+:}$PATH"))),(0,r.kt)("p",null,"Execute ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," application."),(0,r.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,r.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},".\\tom.exe migrate:status\n"))),(0,r.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./tom migrate:status\n")))),(0,r.kt)("p",null,"The output will look something like this."),(0,r.kt)("img",{src:t(3086).Z,alt:"Tom migrations - migrate:status command output",width:"660"}),(0,r.kt)("p",null,"See also the ",(0,r.kt)("a",{parentName:"p",href:"#finish"},"final thoughts")," on how to verify the ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," executable file properties."),(0,r.kt)("p",null,"Happy migrating \ud83c\udf89\ud83d\udc4c"),(0,r.kt)("h2",{id:"migrations-with-qmake"},"Migrations with qmake"),(0,r.kt)("p",null,"Create a folder for the ",(0,r.kt)("inlineCode",{parentName:"p"},"qmake")," build."),(0,r.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,r.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},"cd "+(0,p.go)(m.Fo)+"/tom\n\nmkdir tom-builds-qmake")),(0,r.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},"cd "+(0,p.go)(m.q5)+"/tom\n\nmkdir tom-builds-qmake"))),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"#source-code"},(0,r.kt)("inlineCode",{parentName:"a"},"source code"))," is the same as for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Migrations with CMake")," console application."),(0,r.kt)("h3",{id:"qmake-project"},"qmake project"),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"tom.pro")," qmake file with the following content."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd tom\nvim tom.pro\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"To paste a source code correctly in ",(0,r.kt)("inlineCode",{parentName:"p"},"vim"),", press ",(0,r.kt)("kbd",null,"Shift")," + ",(0,r.kt)("kbd",null,"p"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qmake"},"QT *= core sql\nQT -= gui\n\nTEMPLATE = app\nTARGET = tom\n\nCONFIG *= console\n\nDEFINES += PROJECT_TOM\n\nSOURCES += $$PWD/main.cpp\n\n# Database migrations\ninclude($$PWD/database/migrations.pri)\n# Database seeders\ninclude($$PWD/database/seeders.pri)\n\n# Configure TinyORM library for the migrations purposes\ninclude($$TINY_MAIN_DIR/TinyORM/qmake/tom.pri)\n\n# vcpkg - range-v3 and tabulate\nwin32-msvc: \\\n    INCLUDEPATH += $$quote($$TINY_VCPKG_INSTALLED/x64-windows/include/)\nmingw: \\\n    QMAKE_CXXFLAGS += -isystem $$shell_quote($$TINY_VCPKG_INSTALLED/x64-mingw-dynamic/include/)\nunix:!macx: \\\n    QMAKE_CXXFLAGS += -isystem $$shell_quote($$TINY_VCPKG_INSTALLED/x64-linux/include/)\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The exact ",(0,r.kt)("a",{parentName:"p",href:"/building/tinyorm#folders-structure"},"folders structure")," is crucial in this example because the paths to the ",(0,r.kt)("inlineCode",{parentName:"p"},"TinyORM")," source and build folders are relative.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"On Linux ",(0,r.kt)("inlineCode",{parentName:"p"},"-isystem")," marks the directory as a system directory, it prevents warnings."),(0,r.kt)("p",{parentName:"admonition"},"On Windows you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"QMAKE_CXXFLAGS_WARN_ON = -external:anglebrackets -external:W0"),", it applies a warning level 0 to the angel bracket includes; ",(0,r.kt)("inlineCode",{parentName:"p"},"#include <file>"),".")),(0,r.kt)("h4",{id:"configure-using-qmakeconf"},"Configure using .qmake.conf"),(0,r.kt)("p",null,"To correctly set a file properties as the version, description, ... you have to provide the path to the ",(0,r.kt)("inlineCode",{parentName:"p"},"TinyORM")," qmake features (",(0,r.kt)("inlineCode",{parentName:"p"},".prf")," files) which handle this correctly, this path is provided by the ",(0,r.kt)("inlineCode",{parentName:"p"},"QMAKEFEATURES")," variable and can be set only in the ",(0,r.kt)("inlineCode",{parentName:"p"},".qmake.conf")," file."),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},".qmake.conf")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," application root folder with the following content."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qmake"},"TINY_MAIN_DIR = $$clean_path($$PWD/../../TinyORM)\n# Name of this qmake variable is crucial\nTINYORM_BUILD_TREE = $$quote($$TINY_MAIN_DIR/TinyOrm-builds-qmake/build-TinyOrm-Desktop_Qt_6_3_1_MSVC2019_64bit-Debug)\n# vcpkg - range-v3 and tabulate\nTINY_VCPKG_INSTALLED = $$clean_path($$PWD/../../../vcpkg/installed)\n\nQMAKEFEATURES *= $$quote($$TINY_MAIN_DIR/TinyORM/qmake/features)\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Configuring with the ",(0,r.kt)("inlineCode",{parentName:"p"},".qmake.conf")," file has one big advantage that is that you do not have to modify the project files.")),(0,r.kt)("h4",{id:"migrations-source-files"},"Migrations source files"),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"database/migrations.pri")," file and paste the following code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qmake"},"INCLUDEPATH += $$PWD\n\nHEADERS += \\\n    $$PWD/migrations/2014_10_12_000000_create_posts_table.hpp \\\n")),(0,r.kt)("h4",{id:"seeders-source-files"},"Seeders source files"),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"database/seeders.pri")," file and paste the following code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qmake"},"INCLUDEPATH += $$PWD\n\nHEADERS += \\\n    $$PWD/seeders/databaseseeder.hpp \\\n")),(0,r.kt)("h3",{id:"build-migrations-qmake"},"Build migrations"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"I recommend creating a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Session")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"QtCreator IDE")," as is described ",(0,r.kt)("a",{parentName:"p",href:"/building/tinyorm#open-qtcreator-ide"},"here"),".")),(0,r.kt)("p",null,"Now you can open the ",(0,r.kt)("inlineCode",{parentName:"p"},"tom.pro")," project in the ",(0,r.kt)("inlineCode",{parentName:"p"},"QtCreator IDE"),"."),(0,r.kt)("p",null,"This will open the ",(0,r.kt)("inlineCode",{parentName:"p"},"Configure Project")," tab, select some kit and update build folder paths to meet our ",(0,r.kt)("a",{parentName:"p",href:"/building/tinyorm#folders-structure"},"folders structure")," or like you want."),(0,r.kt)("img",{src:t(6191).Z,alt:"tom - QtCreator - Configure Project",width:"760"}),(0,r.kt)("p",null,"You are ready to configure build options, hit ",(0,r.kt)("kbd",null,"Ctrl"),"+",(0,r.kt)("kbd",null,"5")," to open ",(0,r.kt)("inlineCode",{parentName:"p"},"Project Settings")," tab and select ",(0,r.kt)("inlineCode",{parentName:"p"},"Build")," in the left sidebar to open the ",(0,r.kt)("inlineCode",{parentName:"p"},"Build Settings"),", it should look similar to the following picture."),(0,r.kt)("img",{src:t(5539).Z,className:"no-blurry",alt:"tom - QtCreator - Build Settings",width:"760"}),(0,r.kt)("p",null,"Disable ",(0,r.kt)("inlineCode",{parentName:"p"},"QML debugging and profiling")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Qt Quick Compiler"),", they are not used."),(0,r.kt)("p",null,"In the left sidebar open ",(0,r.kt)("inlineCode",{parentName:"p"},"Dependencies")," and check ",(0,r.kt)("inlineCode",{parentName:"p"},"TinyOrm")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Synchronize configuration"),", this setting ensures that the current project will be rebuilt correctly when the ",(0,r.kt)("inlineCode",{parentName:"p"},"TinyORM")," library source code changes."),(0,r.kt)("p",null,"Everything is ready to build, you can press ",(0,r.kt)("kbd",null,"Ctrl"),"+",(0,r.kt)("kbd",null,"b")," to build the project."),(0,r.kt)("h3",{id:"execute-migrations-qmake"},"Execute migrations"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"QtCreator")," takes care about all the necessary configuration, sets up the build environment correctly and also prepends dependency libraries on the path on Windows and on the ",(0,r.kt)("inlineCode",{parentName:"p"},"LD_LIBRARY_PATH")," on Linux."),(0,r.kt)("p",null,"Only one thing you might want to change is to run the ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," application in the new terminal window. To do so, hit ",(0,r.kt)("kbd",null,"Ctrl"),"+",(0,r.kt)("kbd",null,"5")," to open the ",(0,r.kt)("inlineCode",{parentName:"p"},"Project Settings")," tab and select ",(0,r.kt)("inlineCode",{parentName:"p"},"Run")," in the left sidebar to open the ",(0,r.kt)("inlineCode",{parentName:"p"},"Run Settings"),", then in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Run")," section select the ",(0,r.kt)("inlineCode",{parentName:"p"},"Run in terminal")," checkbox."),(0,r.kt)("p",null,"You can also set the ",(0,r.kt)("inlineCode",{parentName:"p"},"Command line arguments")," in this ",(0,r.kt)("inlineCode",{parentName:"p"},"Run")," section, eg. the ",(0,r.kt)("inlineCode",{parentName:"p"},"migrate:status"),"."),(0,r.kt)("p",null,"To execute the ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," application press ",(0,r.kt)("kbd",null,"Ctrl")," + ",(0,r.kt)("kbd",null,"r"),"."),(0,r.kt)("p",null,"The output will look something like this."),(0,r.kt)("img",{src:t(3086).Z,alt:"Tom migrations - migrate:status command output",width:"660"}),(0,r.kt)("p",null,"Happy migrating \ud83c\udf89\ud83d\udc4c"),(0,r.kt)("h2",{id:"finish"},"Finish"),(0,r.kt)("p",null,"As the last thing, you can check that all the file properties were correctly set by the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/windows/win32/menurc/resource-compiler"},(0,r.kt)("inlineCode",{parentName:"a"},"rc"))," compiler."),(0,r.kt)("p",null,"Find the ",(0,r.kt)("inlineCode",{parentName:"p"},"tom.exe")," file and press ",(0,r.kt)("kbd",null,"Alt")," + ",(0,r.kt)("kbd",null,"Enter")," to open the file properties. To check the executable manifest you can use eg. the ",(0,r.kt)("a",{parentName:"p",href:"http://www.angusj.com/resourcehacker/"},"Resource Hacker"),"."),(0,r.kt)("img",{src:t(643).Z,alt:"tom.exe file properties detail",width:"440"}))}N.isMDXComponent=!0},5539:function(e,n,t){n.Z=t.p+"assets/images/qmake-build_settings-7ce9fbef0172788275c1081e69fb61cc.png"},6191:function(e,n,t){n.Z=t.p+"assets/images/qmake-configure_project-0612b44b4d612e31bfbeb6496d865289.png"},643:function(e,n,t){n.Z=t.p+"assets/images/tom_file_properties-44abf8fb5495499dd6325a1eb08510dc.png"},3086:function(e,n,t){n.Z=t.p+"assets/images/tom_migrate_status-63c129a10bfe6bffe8d2d5ea280860e5.png"}}]);