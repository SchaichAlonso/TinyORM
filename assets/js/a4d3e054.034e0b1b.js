"use strict";(self.webpackChunktinyorm_github_io=self.webpackChunktinyorm_github_io||[]).push([[454],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return u}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var d=n.createContext({}),l=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=l(e.components);return n.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=l(a),u=i,h=c["".concat(d,".").concat(u)]||c[u]||p[u]||r;return a?n.createElement(h,s(s({ref:t},m),{},{components:a})):n.createElement(h,s({ref:t},m))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,s=new Array(r);s[0]=c;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var l=2;l<r;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},8261:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var n=a(7462),i=a(3366),r=(a(7294),a(3905)),s=["components"],o={sidebar_position:3,sidebar_label:"Seeding",description:"TinyORM includes the ability to seed your database with data using seed classes. The DatabaseSeeder class is considered as the root seeder. From this class, you may use the `call` method to run other seed classes, allowing you to control the seeding order."},d="Database: Seeding",l={unversionedId:"database/seeding",id:"database/seeding",title:"Database: Seeding",description:"TinyORM includes the ability to seed your database with data using seed classes. The DatabaseSeeder class is considered as the root seeder. From this class, you may use the `call` method to run other seed classes, allowing you to control the seeding order.",source:"@site/docs/database/seeding.mdx",sourceDirName:"database",slug:"/database/seeding",permalink:"/database/seeding",draft:!1,editUrl:"https://github.com/silverqx/TinyORM-github.io/edit/main/docs/database/seeding.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Seeding",description:"TinyORM includes the ability to seed your database with data using seed classes. The DatabaseSeeder class is considered as the root seeder. From this class, you may use the `call` method to run other seed classes, allowing you to control the seeding order."},sidebar:"tinyormSidebar",previous:{title:"Migrations",permalink:"/database/migrations"},next:{title:"Getting Started",permalink:"/tinyorm/getting-started"}},m={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Writing Seeders",id:"writing-seeders",level:2},{value:"Calling Additional Seeders",id:"calling-additional-seeders",level:3},{value:"Call with additional arguments",id:"call-with-additional-arguments",level:4},{value:"Running Seeders",id:"running-seeders",level:2},{value:"Forcing Seeders To Run In Production",id:"forcing-seeders-to-run-in-production",level:4}],c={toc:p};function u(e){var t=e.components,a=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"database-seeding"},"Database: Seeding"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#writing-seeders"},"Writing Seeders"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#calling-additional-seeders"},"Calling Additional Seeders")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#running-seeders"},"Running Seeders"))),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"TinyORM includes the ability to seed your database with data using seed classes. All seed classes should be stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"database/seeders")," directory. The ",(0,r.kt)("inlineCode",{parentName:"p"},"DatabaseSeeder")," class is considered as the root seeder. From this class, you may use the ",(0,r.kt)("inlineCode",{parentName:"p"},"call")," method to run other seed classes, allowing you to control the seeding order."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("a",{parentName:"p",href:"/tinyorm/getting-started#mass-assignment"},"Mass assignment protection")," is automatically disabled during database seeding."))),(0,r.kt)("h2",{id:"writing-seeders"},"Writing Seeders"),(0,r.kt)("p",null,"To generate a seeder, execute the ",(0,r.kt)("inlineCode",{parentName:"p"},"make:seeder")," ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," command. A new seeder will be placed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"database/seeders")," directory relative to the current ",(0,r.kt)("abbr",{title:"Current working directory"},"pwd"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tom make:seeder UserSeeder\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You can omit the ",(0,r.kt)("inlineCode",{parentName:"p"},"Seeder")," word in the class name, ",(0,r.kt)("inlineCode",{parentName:"p"},"tom")," appends it for you."))),(0,r.kt)("p",null,"A seeder class only contains one method by default: ",(0,r.kt)("inlineCode",{parentName:"p"},"run"),". This method is called when the ",(0,r.kt)("inlineCode",{parentName:"p"},"db:seed")," tom command is executed. Within the ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," method, you may insert data into your database however you wish. You may use the ",(0,r.kt)("a",{parentName:"p",href:"/database/query-builder#insert-statements"},"query builder")," to manually insert data."),(0,r.kt)("p",null,"As an example, let's modify the default ",(0,r.kt)("inlineCode",{parentName:"p"},"DatabaseSeeder")," class and add a database insert statement to the ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'#pragma once\n\n#include <tom/seeder.hpp>\n\nnamespace Seeders\n{\n\n    /*! Main database seeder. */\n    struct DatabaseSeeder : Seeder\n    {\n        /*! Run the database seeders. */\n        void run() override\n        {\n            DB::table("users")->insert({"name", "email"},\n            {\n                {"1. user", "user1@example.com"},\n                {"2. user", "user2@example.com"},\n            });\n        }\n    };\n\n} // namespace Seeders\n')),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The multi-insert ",(0,r.kt)("a",{parentName:"p",href:"/database/query-builder#multi-insert-overload"},(0,r.kt)("inlineCode",{parentName:"a"},"insert"))," method overload is ideal for seeding data."))),(0,r.kt)("h3",{id:"calling-additional-seeders"},"Calling Additional Seeders"),(0,r.kt)("p",null,"Within the ",(0,r.kt)("inlineCode",{parentName:"p"},"DatabaseSeeder")," class, you may use the ",(0,r.kt)("inlineCode",{parentName:"p"},"call")," method to execute additional seed classes. Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"call")," method allows you to break up your database seeding into multiple files so that no single seeder class becomes too large. The ",(0,r.kt)("inlineCode",{parentName:"p"},"call")," method accepts the template parameter pack of seeder classes that should be executed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/*! Run the database seeders. */\nvoid run() override\n{\n    call<UserSeeder, PostSeeder, CommentSeeder>();\n}\n")),(0,r.kt)("h4",{id:"call-with-additional-arguments"},"Call with additional arguments"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"call")," method allows to pass additional arguments to the seeder/s, but it has additional requirements."),(0,r.kt)("p",null,"If you define a ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," method without parameters then this method is called using the virtual dispatch (polymorphism) and in this case, you should use the ",(0,r.kt)("inlineCode",{parentName:"p"},"override")," specifier."),(0,r.kt)("p",null,"If you define your ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," method eg. like this ",(0,r.kt)("inlineCode",{parentName:"p"},"run(bool shouldSeed)")," or whatever parameters you want, then this method is called using the fold expression (virtual dispatch is not used in this case) so you can't use the ",(0,r.kt)("inlineCode",{parentName:"p"},"override")," specifier and you must call the ",(0,r.kt)("inlineCode",{parentName:"p"},"call<>()")," method with exactly the same arguments like the ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," method was defined with, in our example, it should look like this ",(0,r.kt)("inlineCode",{parentName:"p"},"call<ExampleSeeder>(true)"),"."),(0,r.kt)("p",null,"Let's demonstrate it on a small example, following is the ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," method in the root ",(0,r.kt)("inlineCode",{parentName:"p"},"DatabaseSeeder")," class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/*! Run the database seeders. */\nvoid run() override\n{\n    // This value can be based eg. on data from the database\n    const auto shouldSeed = true;\n\n    call<UserSeeder>(shouldSeed);\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," method in the ",(0,r.kt)("inlineCode",{parentName:"p"},"UserSeeder")," class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'/*! Run the database seeders. */\nvoid run(const bool shouldSeed)\n{\n    if (!shouldSeed)\n        return;\n\n    DB::table("users")->insert({\n        {"name", "1. user"},\n    });\n}\n')),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"call")," method provides two shortcut methods, ",(0,r.kt)("inlineCode",{parentName:"p"},"callWith")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"callSilent")," (no output from seeders)."))),(0,r.kt)("h2",{id:"running-seeders"},"Running Seeders"),(0,r.kt)("p",null,"You may execute the ",(0,r.kt)("inlineCode",{parentName:"p"},"db:seed")," tom command to seed your database. By default, the ",(0,r.kt)("inlineCode",{parentName:"p"},"db:seed")," command runs the ",(0,r.kt)("inlineCode",{parentName:"p"},"Seeders::DatabaseSeeder")," class, which may in turn invoke other seed classes. However, you may use the ",(0,r.kt)("inlineCode",{parentName:"p"},"--class")," option to specify a specific seeder class to run individually:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tom db:seed\n\ntom db:seed --class=UserSeeder\n")),(0,r.kt)("p",null,"You may also seed your database using the ",(0,r.kt)("inlineCode",{parentName:"p"},"migrate"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"migrate:fresh")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"migrate:refresh")," commands in combination with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--seed")," option. For example the ",(0,r.kt)("inlineCode",{parentName:"p"},"migrate:fresh")," command drops all tables and re-run all of your migrations. This command is useful for completely re-building your database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tom migrate:fresh --seed\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You can change the default seeders path as is described in the ",(0,r.kt)("a",{parentName:"p",href:"/building/tinyorm#TINYTOM_SEEDERS_DIR"},(0,r.kt)("inlineCode",{parentName:"a"},"C preprocessor macros")),", CMake provides the ",(0,r.kt)("a",{parentName:"p",href:"/building/tinyorm#TOM_SEEDERS_DIR"},(0,r.kt)("inlineCode",{parentName:"a"},"TOM_SEEDERS_DIR"))," option."))),(0,r.kt)("h4",{id:"forcing-seeders-to-run-in-production"},"Forcing Seeders To Run In Production"),(0,r.kt)("p",null,"Some seeding operations may cause you to alter or lose data. In order to protect you from running seeding commands against your production database, you will be prompted for confirmation before the seeders are executed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"production")," environment. To force the seeders to run without a prompt, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"--force")," flag:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tom db:seed --force\n")))}u.isMDXComponent=!0}}]);