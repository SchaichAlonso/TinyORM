"use strict";(self.webpackChunktinyorm_org=self.webpackChunktinyorm_org||[]).push([[684],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(n),c=i,h=m["".concat(d,".").concat(c)]||m[c]||u[c]||r;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5955:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:0,sidebar_label:"Getting Started",description:"The TinyDrivers library is an underlying SQL database layer for TinyORM. It can be used instead of the QtSql module, can be swapped at compile time, and has 1:1 API as the QtSql module. Swapping is controlled by the qmake and CMake build system options. It was designed to drop the QtSql dependency while maintaining backward compatibility and without the need for any code changes after the swap.",keywords:["c++ orm","database","getting started","tinydrivers","sql drivers"]},l="TinyDrivers: Getting Started",o={unversionedId:"tinydrivers/getting-started",id:"tinydrivers/getting-started",title:"TinyDrivers: Getting Started",description:"The TinyDrivers library is an underlying SQL database layer for TinyORM. It can be used instead of the QtSql module, can be swapped at compile time, and has 1:1 API as the QtSql module. Swapping is controlled by the qmake and CMake build system options. It was designed to drop the QtSql dependency while maintaining backward compatibility and without the need for any code changes after the swap.",source:"@site/docs/tinydrivers/getting-started.mdx",sourceDirName:"tinydrivers",slug:"/tinydrivers/getting-started",permalink:"/tinydrivers/getting-started",draft:!1,editUrl:"https://github.com/silverqx/TinyORM-github.io/edit/main/docs/tinydrivers/getting-started.mdx",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0,sidebar_label:"Getting Started",description:"The TinyDrivers library is an underlying SQL database layer for TinyORM. It can be used instead of the QtSql module, can be swapped at compile time, and has 1:1 API as the QtSql module. Swapping is controlled by the qmake and CMake build system options. It was designed to drop the QtSql dependency while maintaining backward compatibility and without the need for any code changes after the swap.",keywords:["c++ orm","database","getting started","tinydrivers","sql drivers"]},sidebar:"tinyormSidebar",previous:{title:"TinyDrivers",permalink:"/tinydrivers/"},next:{title:"TinyORM",permalink:"/building/tinyorm"}},d={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Features summary",id:"features-summary",level:5},{value:"Differences from QtSql",id:"differences-from-qtsql",level:2},{value:"Naming conventions",id:"naming-conventions",level:5},{value:"MySQL driver",id:"mysql-driver",level:5},{value:"Removed features",id:"removed-features",level:5},{value:"Missing features",id:"missing-features",level:5},{value:"Build system",id:"build-system",level:3},{value:"The <code>Shared</code> library build",id:"the-shared-library-build",level:5},{value:"The <code>Static</code> build",id:"the-static-build",level:5},{value:"The <code>Loadable</code> SQL drivers build",id:"the-loadable-sql-drivers-build",level:5},{value:"<code>CMake</code>/<code>qmake</code> build options",id:"cmakeqmake-build-options",level:4},{value:"For <code>CMake</code>",id:"for-cmake",level:5},{value:"For <code>qmake</code>",id:"for-qmake",level:5},{value:"Performance",id:"performance",level:3},{value:"Internals",id:"internals",level:2},{value:"SqlDatabase",id:"sqldatabase",level:5},{value:"Namespaces",id:"namespaces",level:5},{value:"Documentation",id:"documentation",level:5}],p={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tinydrivers-getting-started"},"TinyDrivers: Getting Started"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#differences-from-qtsql"},"Differences from QtSql"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#build-system"},"Build system")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#performance"},"Performance")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#internals"},"Internals"))),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyDrivers")," library is an underlying SQL database layer for ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyORM"),". It can be used instead of the ",(0,i.kt)("inlineCode",{parentName:"p"},"QtSql")," module, can be ",(0,i.kt)("u",null,(0,i.kt)("strong",{parentName:"p"},"swapped"))," at compile time, and has ",(0,i.kt)("strong",{parentName:"p"},"1:1")," API as the ",(0,i.kt)("inlineCode",{parentName:"p"},"QtSql")," module. \ud83d\ude2e Swapping is controlled by the ",(0,i.kt)("inlineCode",{parentName:"p"},"qmake")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"CMake")," build system options."),(0,i.kt)("p",null,"It was designed to drop the ",(0,i.kt)("inlineCode",{parentName:"p"},"QtSql")," dependency while maintaining backward compatibility and without the need for any code changes after the swap."),(0,i.kt)("h5",{id:"features-summary"},"Features summary"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"both, normal and prepared statements are supported"),(0,i.kt)("li",{parentName:"ul"},"TLS/SSL connections using ",(0,i.kt)("a",{parentName:"li",href:"https://dev.mysql.com/doc/c-api/en/mysql-options.html"},(0,i.kt)("inlineCode",{parentName:"a"},"MYSQL_OPT_SSL_MODE"))," (verify_ca, verify_identity) \ud83d\udd25"),(0,i.kt)("li",{parentName:"ul"},"setting many other connection options (see ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/silverqx/TinyORM/blob/main/drivers/mysql/src/orm/drivers/mysql/mysqldriver_p.cpp"},(0,i.kt)("inlineCode",{parentName:"a"},"mysqldriver_p.cpp")),")"),(0,i.kt)("li",{parentName:"ul"},"building and linking against the ",(0,i.kt)("a",{parentName:"li",href:"https://mariadb.com/kb/en/mariadb-connector-c/"},(0,i.kt)("inlineCode",{parentName:"a"},"MariaDB Connector/C"))),(0,i.kt)("li",{parentName:"ul"},"transactions"),(0,i.kt)("li",{parentName:"ul"},"re-using the current ",(0,i.kt)("inlineCode",{parentName:"li"},"SqlQuery")," instance to re-execute the same or another query"),(0,i.kt)("li",{parentName:"ul"},"detaching from the result set (associated to release memory)"),(0,i.kt)("li",{parentName:"ul"},"query size, number of affected rows, last inserted ID, testing ",(0,i.kt)("inlineCode",{parentName:"li"},"isNull()"),", ..."),(0,i.kt)("li",{parentName:"ul"},"all ",(0,i.kt)("strong",{parentName:"li"},"3366 unit tests")," passed \ud83d\ude2e")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Currently, only the ",(0,i.kt)("inlineCode",{parentName:"p"},"MySQL")," database driver is supported and finished.")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"TinyDrivers")," can only be built with ",(0,i.kt)("inlineCode",{parentName:"p"},"Qt v6"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Qt v5.15")," isn't supported.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"TinyDrivers")," library supports both build systems ",(0,i.kt)("inlineCode",{parentName:"p"},"qmake")," and also ",(0,i.kt)("inlineCode",{parentName:"p"},"CMake"),".")),(0,i.kt)("h2",{id:"differences-from-qtsql"},"Differences from QtSql"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"TinyDrivers")," doesn't return errors the the same way as the ",(0,i.kt)("inlineCode",{parentName:"p"},"QtSql")," module, which means return a ",(0,i.kt)("inlineCode",{parentName:"p"},"bool")," and if it's the result ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," then obtain the ",(0,i.kt)("inlineCode",{parentName:"p"},"SqlError")," instance using the ",(0,i.kt)("inlineCode",{parentName:"p"},"lastError()")," method from ",(0,i.kt)("inlineCode",{parentName:"p"},"SqlDatabase")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"SqlQuery")," instances. Instead, it throws exceptions, and methods returning a ",(0,i.kt)("inlineCode",{parentName:"p"},"bool")," type to report an error state always return ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("h5",{id:"naming-conventions"},"Naming conventions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"QtSql")," ",(0,i.kt)("small",null,"module")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"TinyDrivers")," ",(0,i.kt)("small",null,"library")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"QMYSQL")," ",(0,i.kt)("small",null,"driver")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"TinyMySql")," ",(0,i.kt)("small",null,"driver"))),(0,i.kt)("h5",{id:"mysql-driver"},"MySQL driver"),(0,i.kt)("p",null,"The following describes the differences between ",(0,i.kt)("inlineCode",{parentName:"p"},"QMYSQL")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyMySql")," drivers."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"QMYSQL")," driver doesn't support setting ",(0,i.kt)("inlineCode",{parentName:"p"},"MySQL")," non-flag ",(0,i.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/c-api/en/mysql-options.html"},"connection options")," like ",(0,i.kt)("inlineCode",{parentName:"p"},"MYSQL_OPT_RECONNECT")," without the value, it needs to be defined with value like ",(0,i.kt)("inlineCode",{parentName:"p"},"=1")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"=TRUE")," (case-sensitive), only real flag options like ",(0,i.kt)("inlineCode",{parentName:"p"},"CLIENT_INTERACTIVE")," can be set without the value and ",(0,i.kt)("inlineCode",{parentName:"p"},"=")," character."),(0,i.kt)("p",null,"On the other hand, the ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyMySql")," driver allows setting non-flag ",(0,i.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/c-api/en/mysql-options.html"},"connection options")," options without the value and ",(0,i.kt)("inlineCode",{parentName:"p"},"=")," character, which are considered enabled (ON or TRUE)."),(0,i.kt)("h5",{id:"removed-features"},"Removed features"),(0,i.kt)("p",null,"Simulation of prepared statements while calling ",(0,i.kt)("inlineCode",{parentName:"p"},"SqlQuery::exec(QString)"),", this functionality is useless because you can call regular prepared statements using ",(0,i.kt)("inlineCode",{parentName:"p"},"SqlQuery::prepare(QString)")," and then ",(0,i.kt)("inlineCode",{parentName:"p"},"SqlQuery::exec()"),"."),(0,i.kt)("h5",{id:"missing-features"},"Missing features"),(0,i.kt)("p",null,"Fetching multiple result sets using ",(0,i.kt)("inlineCode",{parentName:"p"},"SqlQuery::nextResult()"),". Multiple statement queries are supported they will be executed correctly (they can return multiple result sets), but only the first result set can be fetched currently. However, destroying multiple result sets is handled correctly."),(0,i.kt)("h3",{id:"build-system"},"Build system"),(0,i.kt)("p",null,"Another difference is that you can build the ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyDrivers")," and its SQL drivers (",(0,i.kt)("inlineCode",{parentName:"p"},"TinyMySql"),") in 3 different ways; ",(0,i.kt)("inlineCode",{parentName:"p"},"Shared"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Static"),", and as a ",(0,i.kt)("inlineCode",{parentName:"p"},"Loadable")," library at runtime using ",(0,i.kt)("inlineCode",{parentName:"p"},"LoadLibrary()")," on Windows or ",(0,i.kt)("inlineCode",{parentName:"p"},"dlopen()")," on Linux."),(0,i.kt)("h5",{id:"the-shared-library-build"},"The ",(0,i.kt)("inlineCode",{parentName:"h5"},"Shared")," library build"),(0,i.kt)("p",null,"It builds two shared libraries, the ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyDrivers")," shared library that contains the core/common code and the ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyMySql")," shared library that contains ",(0,i.kt)("inlineCode",{parentName:"p"},"MySQL")," implementation. The ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyOrm")," links only against the ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyDrivers")," shared library and ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyMySql")," is a private implementation."),(0,i.kt)("h5",{id:"the-static-build"},"The ",(0,i.kt)("inlineCode",{parentName:"h5"},"Static")," build"),(0,i.kt)("p",null,"It builds one ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyDrivers")," static archive that contains the core/common code and SQL drivers (",(0,i.kt)("inlineCode",{parentName:"p"},"TinyMySql"),"). This static library is linked or merged into the ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyOrm")," shared or static library (both variants are supported)."),(0,i.kt)("h5",{id:"the-loadable-sql-drivers-build"},"The ",(0,i.kt)("inlineCode",{parentName:"h5"},"Loadable")," SQL drivers build"),(0,i.kt)("p",null,"It builds two shared libraries, the ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyDrivers")," shared library that contains the core/common code and ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyMySql")," shared library (module) that contains ",(0,i.kt)("inlineCode",{parentName:"p"},"MySQL")," implementation that is loaded at runtime using ",(0,i.kt)("inlineCode",{parentName:"p"},"LoadLibrary()")," on Windows or ",(0,i.kt)("inlineCode",{parentName:"p"},"dlopen()")," on Linux. The SQL driver library loader throws an exception if it cannot find this library at runtime."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyMySql")," links directly against the ",(0,i.kt)("inlineCode",{parentName:"p"},"MySQL C connector")," (",(0,i.kt)("inlineCode",{parentName:"p"},"libmysql")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"mysqlclient")," library).")),(0,i.kt)("h4",{id:"cmakeqmake-build-options"},(0,i.kt)("inlineCode",{parentName:"h4"},"CMake"),"/",(0,i.kt)("inlineCode",{parentName:"h4"},"qmake")," build options"),(0,i.kt)("h5",{id:"for-cmake"},"For ",(0,i.kt)("inlineCode",{parentName:"h5"},"CMake")),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/building/tinyorm#cmake-build-options"},"CMake build options"),", related ",(0,i.kt)("inlineCode",{parentName:"p"},"CMake")," build options are:",(0,i.kt)("br",null),(0,i.kt)("a",{parentName:"p",href:"/building/tinyorm#BUILD_DRIVERS"},(0,i.kt)("inlineCode",{parentName:"a"},"BUILD_DRIVERS")),", ",(0,i.kt)("a",{parentName:"p",href:"/building/tinyorm#BUILD_MYSQL_DRIVER"},(0,i.kt)("inlineCode",{parentName:"a"},"BUILD_MYSQL_DRIVER")),", and ",(0,i.kt)("a",{parentName:"p",href:"/building/tinyorm#DRIVERS_TYPE"},(0,i.kt)("inlineCode",{parentName:"a"},"DRIVERS_TYPE"))),(0,i.kt)("p",null,"To control shared and static build use ",(0,i.kt)("a",{parentName:"p",href:"https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html"},(0,i.kt)("inlineCode",{parentName:"a"},"BUILD_SHARED_LIBS"))," ",(0,i.kt)("inlineCode",{parentName:"p"},"CMake")," configuration option."),(0,i.kt)("h5",{id:"for-qmake"},"For ",(0,i.kt)("inlineCode",{parentName:"h5"},"qmake")),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/building/tinyorm#qmake-build-options"},"qmake build options"),", related ",(0,i.kt)("inlineCode",{parentName:"p"},"qmake")," configuration options are:",(0,i.kt)("br",null),(0,i.kt)("a",{parentName:"p",href:"/building/tinyorm#build_loadable_drivers"},(0,i.kt)("inlineCode",{parentName:"a"},"build_loadable_drivers")),", ",(0,i.kt)("a",{parentName:"p",href:"/building/tinyorm#build_mysql_driver"},(0,i.kt)("inlineCode",{parentName:"a"},"build_mysql_driver")),", ",(0,i.kt)("a",{parentName:"p",href:"/building/tinyorm#build_shared_drivers"},(0,i.kt)("inlineCode",{parentName:"a"},"build_shared_drivers")),", and ",(0,i.kt)("a",{parentName:"p",href:"/building/tinyorm#build_static_drivers"},(0,i.kt)("inlineCode",{parentName:"a"},"build_static_drivers"))),(0,i.kt)("p",null,"To control shared and static build use ",(0,i.kt)("a",{parentName:"p",href:"/building/tinyorm#static"},(0,i.kt)("inlineCode",{parentName:"a"},"static"))," ",(0,i.kt)("inlineCode",{parentName:"p"},"qmake")," ",(0,i.kt)("a",{parentName:"p",href:"https://doc.qt.io/qt/qmake-variable-reference.html#config"},"configuration option"),"."),(0,i.kt)("h3",{id:"performance"},"Performance"),(0,i.kt)("p",null,"Performance is several milliseconds faster compared to ",(0,i.kt)("inlineCode",{parentName:"p"},"QtSql")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"QMYSQL")," driver. It was tuned using the ",(0,i.kt)("inlineCode",{parentName:"p"},"KCacheGrind")," to be so. It's ~40ms faster on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/silverqx/TinyOrmPlayground"},(0,i.kt)("inlineCode",{parentName:"a"},"TinyOrmPlayground"))," project with ",(0,i.kt)("strong",{parentName:"p"},"620")," database queries compiled using ",(0,i.kt)("inlineCode",{parentName:"p"},"GCC v13.2.1")," Debug build on Linux. Similar results can be expected on other platforms but it's not guaranteed."),(0,i.kt)("p",null,"This means performance is very similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"QtSql"),". There is not much to speed up because ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyDrivers")," code is swift and 90% of the time is spent inside the ",(0,i.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/c-api/en/"},(0,i.kt)("inlineCode",{parentName:"a"},"MySQL C API"))," because we always have to wait for the database server, especially when creating database connections using eg. ",(0,i.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/c-api/en/mysql-real-connect.html"},(0,i.kt)("inlineCode",{parentName:"a"},"mysql_real_connect()"))," (this function is king among the slowest functions \ud83d\ude0e, which is understandable of course)."),(0,i.kt)("h2",{id:"internals"},"Internals"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"TinyDrivers")," internal design can be divided into 3 different layers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Driver layer"),(0,i.kt)("li",{parentName:"ul"},"SQL API layer"),(0,i.kt)("li",{parentName:"ul"},"Public API layer")),(0,i.kt)("p",null,"The Driver layer is eg. ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyMySql")," library which is responsible for communicating with the underlying database driver (eg. ",(0,i.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/c-api/en/"},(0,i.kt)("inlineCode",{parentName:"a"},"MySQL C API")),")."),(0,i.kt)("p",null,"The SQL API layer is a semi-layer that glues everything up and sits between the Public interface API and the Driver layer."),(0,i.kt)("p",null,"The Public interface API layer are the end classes like ",(0,i.kt)("inlineCode",{parentName:"p"},"SqlDatabase")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"SqlQuery")," which are exposed to the end user."),(0,i.kt)("h5",{id:"sqldatabase"},"SqlDatabase"),(0,i.kt)("p",null,"One more thing worth mentioning is the ",(0,i.kt)("inlineCode",{parentName:"p"},"SqlDatabase")," API. It's one class that has two responsibilities! All static methods act as the database connection manager and an instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"SqlDatabase")," represents a physical database connection. It's not a good design because it breaks the ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Single_responsibility_principle"},"Single Responsibility principle"),", but it's what it is."),(0,i.kt)("h5",{id:"namespaces"},"Namespaces"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"TinyDrivers")," classes are defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::Drivers")," namespace and ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyMySql")," classes in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Orm::Drivers::MySql")," namespace."),(0,i.kt)("h5",{id:"documentation"},"Documentation"),(0,i.kt)("p",null,"For all other APIs you can follow the ",(0,i.kt)("a",{parentName:"p",href:"https://doc.qt.io/qt/qtsql-index.html"},"QtSql documentation")," as the API is 1:1. The exception is of course the build system, ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyOrm")," has its own build system that doesn't follow the ",(0,i.kt)("inlineCode",{parentName:"p"},"QtSql")," module."))}u.isMDXComponent=!0}}]);