"use strict";(self.webpackChunktinyorm_org=self.webpackChunktinyorm_org||[]).push([[832],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),u=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=u(a),c=n,y=d["".concat(o,".").concat(c)]||d[c]||p[c]||l;return a?r.createElement(y,s(s({ref:t},m),{},{components:a})):r.createElement(y,s({ref:t},m))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,s=new Array(l);s[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var u=2;u<l;u++)s[u]=a[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4716:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=a(7462),n=(a(7294),a(3905));const l={sidebar_position:6,sidebar_label:"\ud83d\udcc4 Features Summary",hide_table_of_contents:!0,description:"List that fastly summarizes all TinyORM features.",keywords:["c++ orm","tinyorm","features","summary","features summary"]},s="Features Summary",i={unversionedId:"features-summary",id:"features-summary",title:"Features Summary",description:"List that fastly summarizes all TinyORM features.",source:"@site/docs/features-summary.mdx",sourceDirName:".",slug:"/features-summary",permalink:"/features-summary",draft:!1,editUrl:"https://github.com/silverqx/TinyORM-github.io/edit/main/docs/features-summary.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,sidebar_label:"\ud83d\udcc4 Features Summary",hide_table_of_contents:!0,description:"List that fastly summarizes all TinyORM features.",keywords:["c++ orm","tinyorm","features","summary","features summary"]},sidebar:"tinyormSidebar",previous:{title:"Migrations",permalink:"/building/migrations"}},o={},u=[{value:"Showcase Images",id:"showcase-images",level:3},{value:"Tom console application",id:"tom-console-application",level:6},{value:"Passed all unit tests \ud83e\udd73",id:"passed-all-unit-tests-",level:6},{value:"TinyOrmPlayground single-threaded",id:"tinyormplayground-single-threaded",level:6},{value:"TinyOrmPlayground multi-threaded",id:"tinyormplayground-multi-threaded",level:6}],m={toc:u};function p(e){let{components:t,...l}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"features-summary"},"Features Summary"),(0,n.kt)("p",null,"The following list fastly summarizes all ",(0,n.kt)("inlineCode",{parentName:"p"},"TinyORM")," features."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"simple database connections management \ud83e\uddec",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"database manager that helps with the database connections management"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Orm::DB")," facade class for nicer and shorter syntax"),(0,n.kt)("li",{parentName:"ul"},"MySQL, SQLite, and PostgreSQL support for all features"),(0,n.kt)("li",{parentName:"ul"},"multi-threading support \ud83d\udc40"))),(0,n.kt)("li",{parentName:"ul"},"overhauled query builder \ud83d\udd27",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"allows passing sub-queries and raw expressions practically everywhere, to column names, values, and to every SQL clause as select, where, joins, group by, having, order by \ud83d\udd25"),(0,n.kt)("li",{parentName:"ul"},"a logical grouping that offers to wrap logical groups in parenthesis"),(0,n.kt)("li",{parentName:"ul"},"chunked results for lower memory footprint \u2728"),(0,n.kt)("li",{parentName:"ul"},"raw methods for all SQL clauses"),(0,n.kt)("li",{parentName:"ul"},"all join types (left, right, cross, inner) and also join where clause support \ud83e\udee4"),(0,n.kt)("li",{parentName:"ul"},"aggregate methods min, max, sum, increment, decrement, ..."),(0,n.kt)("li",{parentName:"ul"},"whereExists and exists methods for an existence queries"),(0,n.kt)("li",{parentName:"ul"},"transactions and pessimistic locking \ud83d\udd12"),(0,n.kt)("li",{parentName:"ul"},"of course, insert, update, and delete SQL clauses support"))),(0,n.kt)("li",{parentName:"ul"},"clever ORM with all relation types support \ud83c\udf89",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"one-to-one, one-to-many, and many-to-many relation types (also inverse relationships)"),(0,n.kt)("li",{parentName:"ul"},"eager and lazy loading with custom select and constraints \ud83d\ude80"),(0,n.kt)("li",{parentName:"ul"},"all query builder methods are proxied to the model instances and also to the relation instances \ud83e\udd2f (everything that can be called on the query builder can also be called on the model and relation instances)"),(0,n.kt)("li",{parentName:"ul"},"clean active record pattern"),(0,n.kt)("li",{parentName:"ul"},"advanced features like timestamps, touching parent timestamps, default models, and default model attributes"),(0,n.kt)("li",{parentName:"ul"},"querying relationships existence/absence using the has, whereHas, and hasNested methods (using dot notation for selecting nested relationships ",(0,n.kt)("em",{parentName:"li"},"users.posts.comments"),")"))),(0,n.kt)("li",{parentName:"ul"},"compiled database migrations and seeders \ud83d\udd7a",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"create, update, drop, and rename database tables"),(0,n.kt)("li",{parentName:"ul"},"create, drop, and rename table columns"),(0,n.kt)("li",{parentName:"ul"},"extensive schema builder that allows creating of all possible columns types"),(0,n.kt)("li",{parentName:"ul"},"terser syntax for creating foreign keys and foreign key constraints"),(0,n.kt)("li",{parentName:"ul"},"supports creating, and dropping column indexes (primary, unique, fulltext, spatial)"))),(0,n.kt)("li",{parentName:"ul"},"the ",(0,n.kt)("inlineCode",{parentName:"li"},"tom")," console application with tab completion for all shells (pwsh, bash, zsh) \ud83e\udd73",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"the scaffolding of models, migrations, and seeders"),(0,n.kt)("li",{parentName:"ul"},"overhauled models scaffolding, every feature that is supported by models can be generated using the ",(0,n.kt)("inlineCode",{parentName:"li"},"tom make:model")," cli command"))),(0,n.kt)("li",{parentName:"ul"},"a huge amount of code is unit tested, currently ",(0,n.kt)("strong",{parentName:"li"},"1270 unit tests")," \ud83e\udd2f"),(0,n.kt)("li",{parentName:"ul"},"C++20 only, with all the latest features used like concepts/constraints, ranges, smart pointers (no ",(0,n.kt)("inlineCode",{parentName:"li"},"new")," keyword in the whole code \ud83d\ude0e), folding expressions"),(0,n.kt)("li",{parentName:"ul"},"qmake and CMake build systems support"),(0,n.kt)("li",{parentName:"ul"},"vcpkg support (also the vcpkg port, currently not committed to the vcpkg repository \u2639\ufe0f)"),(0,n.kt)("li",{parentName:"ul"},"it's really fast, you can run 1000 complex queries in 500ms (heavily DB dependant, the PostgreSQL is by far the fastest) \u231a"),(0,n.kt)("li",{parentName:"ul"},"extensive documentation \ud83d\udcc3"),(0,n.kt)("li",{parentName:"ul"},"...")),(0,n.kt)("h3",{id:"showcase-images"},"Showcase Images"),(0,n.kt)("h6",{id:"tom-console-application"},"Tom console application"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Tom console application",src:a(10).Z,width:"1738",height:"1084"})),(0,n.kt)("h6",{id:"passed-all-unit-tests-"},"Passed all unit tests \ud83e\udd73"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Passed all unit tests",src:a(1259).Z,width:"1055",height:"556"})),(0,n.kt)("h6",{id:"tinyormplayground-single-threaded"},"TinyOrmPlayground single-threaded"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Invoked TinyOrmPlayground single-threaded",src:a(3837).Z,width:"1693",height:"963"})),(0,n.kt)("h6",{id:"tinyormplayground-multi-threaded"},"TinyOrmPlayground multi-threaded"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Invoked TinyOrmPlayground multi-threaded",src:a(8208).Z,width:"1700",height:"963"})))}p.isMDXComponent=!0},1259:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/tinyorm-passed_all_unit_tests-68b4bcda3cb1a73fbfce54e3a27e19cb.png"},8208:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/tinyormplayground-multi-threaded-862fe8c0337cbd7179acbfb67192dfed.png"},3837:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/tinyormplayground-single-threaded-482d5543c1f6f2ac4234453d83f3996f.png"},10:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/tom_cli-38f907bbfca6dce56a3c2e4b9958f305.png"}}]);