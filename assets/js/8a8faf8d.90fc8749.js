"use strict";(self.webpackChunktinyorm_github_io=self.webpackChunktinyorm_github_io||[]).push([[225],{2360:function(e,n,t){t.d(n,{Z:function(){return r}});var a=t(7294),i=t(6010),o="tabItem_OmH5";function r(e){var n=e.children,t=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(o,r),hidden:t},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return u}});var a=t(7462),i=t(7294),o=t(2389),r=t(7392),l=t(7094),s=t(2466),m=t(6010),d="tabList_uSqn",p="tabItem_LplD";function c(e){var n,t,o,c=e.lazy,u=e.block,k=e.defaultValue,h=e.values,g=e.groupId,N=e.className,T=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=h?h:T.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),v=(0,r.l)(b,(function(e,n){return e.value===n.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===k?k:null!=(n=null!=k?k:null==(t=T.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(o=T[0])?void 0:o.props.value;if(null!==f&&!b.some((function(e){return e.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var _=(0,l.U)(),C=_.tabGroupChoices,E=_.setTabGroupChoices,I=(0,i.useState)(f),y=I[0],M=I[1],w=[],R=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var O=C[g];null!=O&&O!==y&&b.some((function(e){return e.value===O}))&&M(O)}var A=function(e){var n=e.currentTarget,t=w.indexOf(n),a=b[t].value;a!==y&&(R(n),M(a),null!=g&&E(g,a))},S=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=w.indexOf(e.currentTarget)+1;t=w[a]||w[0];break;case"ArrowLeft":var i=w.indexOf(e.currentTarget)-1;t=w[i]||w[w.length-1]}null==(n=t)||n.focus()};return i.createElement("div",{className:(0,m.Z)("tabs-container",d)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,m.Z)("tabs",{"tabs--block":u},N)},b.map((function(e){var n=e.value,t=e.label,o=e.attributes;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:y===n?0:-1,"aria-selected":y===n,key:n,ref:function(e){return w.push(e)},onKeyDown:S,onFocus:A,onClick:A},o,{className:(0,m.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":y===n})}),null!=t?t:n)}))),c?(0,i.cloneElement)(T.filter((function(e){return e.props.value===y}))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},T.map((function(e,n){return(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==y})}))))}function u(e){var n=(0,o.Z)();return i.createElement(c,(0,a.Z)({key:String(n)},e))}},2044:function(e,n,t){t.d(n,{C:function(){return s},Fo:function(){return r},IM:function(){return m},IZ:function(){return a},RS:function(){return c},al:function(){return p},jk:function(){return l},q5:function(){return o},qb:function(){return d},wU:function(){return i}});var a="shell",i="application",o="bash",r="pwsh",l="application",s="bash",m="pwsh",d="TestApp",p="$HOME/Code/c/",c="$env:USERPROFILE\\Code\\c\\"},4355:function(e,n,t){t.d(n,{Z:function(){return o}});var a=t(7294),i=t(9482);function o(){var e=(0,a.useContext)(i.Z);if(null!=e)return e;throw new Error("useRootFolderContext is used outside of Layout component.")}},6005:function(e,n,t){t.d(n,{AE:function(){return l},EA:function(){return r},em:function(){return m},go:function(){return s},mT:function(){return d},we:function(){return p}});var a=t(4355),i=t(2389),o=t(2044),r=function(e,n){var t;return void 0===n&&(n=!0),c(null!=(t=(0,a.Z)().rootFolder[e])?t:m(e),e,n)},l=function(){var e;return null!=(e=(0,a.Z)().rootFolder[o.wU])?e:m(o.wU)},s=function(e,n){if(void 0===n&&(n=!0),null==e)throw new Error("The groupId in the applicationFolderPath() can not be empty.");var t=n||e!==o.Fo?"/":"\\";return c(r(e)+t+l(),e,n)};function m(e){if(null==e)throw new Error("The groupId in the folderDefaultValue() can not be empty.");if(!(0,i.Z)())return"";switch(e){case o.Fo:return o.RS;case o.q5:return o.al;case o.wU:return o.qb;default:throw new Error("No default value for '"+e+"' groupId in the folderDefaultValue().")}}function d(e){return e===o.wU}function p(e,n){if(null==n||""===n)return n;var t="$ENV{$1}$2";switch(e){case o.Fo:return k(n).replace(/\$env:(.+?)(\/.*)/,t);case o.q5:return n.replace(/\$(.+?)(\/.*)/,t);default:throw new Error("Unsupported shell type '"+e+"' in the convertToCmakeEnvVariable().")}}function c(e,n,t){if(void 0===t&&(t=!0),null==e||""===e)return e;if(n!==o.Fo)return u(e);var a=u(e);return t?k(a):function(e){return null==e||""===e?e:e.replaceAll(/\/+/g,"\\")}(a)}function u(e){return null==e||""===e?e:e.replace(/[/\\]+$/,"")}function k(e){return null==e||""===e?e:e.replaceAll(/\\+(?! )/g,"/")}},7021:function(e,n,t){t.r(n),t.d(n,{assets:function(){return h},contentTitle:function(){return u},default:function(){return T},frontMatter:function(){return c},metadata:function(){return k},toc:function(){return g}});var a=t(7462),i=t(3366),o=(t(7294),t(3905)),r=t(2258),l=t(2360),s=t(9877),m=t(2044),d=t(6005),p=["components"],c={sidebar_position:3,sidebar_label:"Migrations",description:"How to compile the TinyORM migrations (tom) c++ console application on Windows and Linux."},u="Building: Migrations",k={unversionedId:"building/migrations",id:"building/migrations",title:"Building: Migrations",description:"How to compile the TinyORM migrations (tom) c++ console application on Windows and Linux.",source:"@site/docs/building/migrations.mdx",sourceDirName:"building",slug:"/building/migrations",permalink:"/building/migrations",draft:!1,editUrl:"https://github.com/silverqx/TinyORM-github.io/edit/main/docs/building/migrations.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Migrations",description:"How to compile the TinyORM migrations (tom) c++ console application on Windows and Linux."},sidebar:"tinyormSidebar",previous:{title:"Hello world",permalink:"/building/hello-world"}},h={},g=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"vcpkg.json manifest",id:"vcpkg-json-manifest",level:3},{value:"Source code",id:"source-code",level:2},{value:"Main file",id:"main-file",level:3},{value:"Migrations",id:"migrations",level:3},{value:"Seeders",id:"seeders",level:3},{value:"Migrations with CMake",id:"migrations-with-cmake",level:2},{value:"CMake project",id:"cmake-project",level:3},{value:"Build migrations",id:"build-migrations-cmake",level:3},{value:"Execute migrations",id:"execute-migrations-cmake",level:3},{value:"Migrations with qmake",id:"migrations-with-qmake",level:2},{value:"qmake project",id:"qmake-project",level:3},{value:"Configure using .qmake.conf",id:"configure-using-qmakeconf",level:4},{value:"Migrations source files",id:"migrations-source-files",level:4},{value:"Seeders source files",id:"seeders-source-files",level:4},{value:"Build migrations",id:"build-migrations-qmake",level:3},{value:"Execute migrations",id:"execute-migrations-qmake",level:3},{value:"Finish",id:"finish",level:2}],N={toc:g};function T(e){var n=e.components,c=(0,i.Z)(e,p);return(0,o.kt)("wrapper",(0,a.Z)({},N,c,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"building-migrations"},"Building: Migrations"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#prerequisites"},"Prerequisites"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#vcpkg-json-manifest"},"vcpkg.json manifest")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#source-code"},"Source code"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#main-file"},"Main file")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#migrations"},"Migrations")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#seeders"},"Seeders")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#migrations-with-cmake"},"Migrations with CMake"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#cmake-project"},"CMake project")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#build-migrations-cmake"},"Build migrations")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#execute-migrations-cmake"},"Execute migrations")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#migrations-with-qmake"},"Migrations with qmake"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#qmake-project"},"qmake project")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#build-migrations-qmake"},"Build migrations")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#execute-migrations-qmake"},"Execute migrations")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#finish"},"Finish"))),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"We will try to create a working migrations console application called as ",(0,o.kt)("abbr",{title:"TinyORM migrations"},(0,o.kt)("inlineCode",{parentName:"p"},"tom"))," in the terminal with the ",(0,o.kt)("inlineCode",{parentName:"p"},"CMake")," and in the ",(0,o.kt)("inlineCode",{parentName:"p"},"QtCreator")," IDE with the ",(0,o.kt)("inlineCode",{parentName:"p"},"qmake"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," console application also expects the following ",(0,o.kt)("a",{parentName:"p",href:"/building/tinyorm#folders-structure"},"folders structure"),", let's create them."),(0,o.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,o.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},"cd "+(0,d.go)(m.Fo)+"\nmkdir tom/tom\ncd tom")),(0,o.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},"cd "+(0,d.go)(m.q5)+"\nmkdir -p tom/tom\ncd tom"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"TinyORM")," source tree contains the ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," example application, you can inspire or look at the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/silverqx/TinyORM/tree/main/examples/tom"},"source code"),". Also ",(0,o.kt)("inlineCode",{parentName:"p"},"TinyORM")," unit tests use a ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," migrations internally to create the database structure, internally called as the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/silverqx/TinyORM/tree/main/tests/testdata_tom"},(0,o.kt)("inlineCode",{parentName:"a"},"tom")," migrations for unit tests"),"."),(0,o.kt)("p",null,"All these three console applications the ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," example, ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," migrations for unit tests, and the application described in this tutorial have practically identical source code (the main.cpp file)."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"Working MySQL database server as the ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," migrations currently provides support only for the MySQL database."),(0,o.kt)("p",null,"Install required dependencies and build the ",(0,o.kt)("inlineCode",{parentName:"p"},"TinyORM")," library with the ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," (it's enabled by default) as is described ",(0,o.kt)("a",{parentName:"p",href:"/building/hello-world#install-dependencies"},"here")," and ",(0,o.kt)("a",{parentName:"p",href:"/building/tinyorm"},"here"),"."),(0,o.kt)("h3",{id:"vcpkg-json-manifest"},"vcpkg.json manifest"),(0,o.kt)("p",null,"Whole section about the ",(0,o.kt)("inlineCode",{parentName:"p"},"vcpkg")," dependencies is described in the ",(0,o.kt)("a",{parentName:"p",href:"/building/hello-world#install-dependencies"},"Install dependencies"),"."),(0,o.kt)("p",null,"Create a ",(0,o.kt)("inlineCode",{parentName:"p"},"vcpkg.json")," file with the following content. ",(0,o.kt)("inlineCode",{parentName:"p"},"CMake")," example below uses this method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd tom\nvim vcpkg.json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "https://raw.githubusercontent.com/microsoft/vcpkg/master/scripts/vcpkg.schema.json",\n  "name": "tom",\n  "version-semver": "0.1.0",\n  "description": "Tom console for TinyORM.",\n  "maintainers": "Silver Zachara <silver.zachara@gmail.com>",\n  "supports": "!(uwp | arm | android | emscripten)",\n  "dependencies": [\n    "range-v3",\n    "tabulate"\n  ]\n}\n')),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Only ",(0,o.kt)("inlineCode",{parentName:"p"},"CMake")," via the ",(0,o.kt)("inlineCode",{parentName:"p"},"toolchain file")," supports this method."))),(0,o.kt)("h2",{id:"source-code"},"Source code"),(0,o.kt)("p",null,"Let's start in the ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," project folder."),(0,o.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,o.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},"cd "+(0,d.go)(m.Fo)+"/tom/tom")),(0,o.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},"cd "+(0,d.go)(m.q5)+"/tom/tom"))),(0,o.kt)("h3",{id:"main-file"},"Main file"),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},"main.cpp")," source file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"vim main.cpp\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"To paste a source code correctly in ",(0,o.kt)("inlineCode",{parentName:"p"},"vim"),", press ",(0,o.kt)("kbd",null,"Shift")," + ",(0,o.kt)("kbd",null,"p"),"."))),(0,o.kt)("p",null,"And paste the following code."),(0,o.kt)("a",{id:"string-constants-example"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'#include <orm/db.hpp>\n\n#include <tom/application.hpp>\n\n#include "migrations/2014_10_12_000000_create_posts_table.hpp"\n\n#include "seeders/databaseseeder.hpp"\n\nusing Orm::DatabaseManager;\nusing Orm::DB;\n\nusing TomApplication = Tom::Application;\n\nusing namespace Migrations; // NOLINT(google-build-using-namespace)\nusing namespace Seeders;    // NOLINT(google-build-using-namespace)\n\n/*! Build the database manager instance and add a database connection. */\nstd::shared_ptr<DatabaseManager> setupManager();\n\n/*! c++ main function. */\nint main(int argc, char *argv[])\n{\n    try {\n        // Ownership of the shared_ptr()\n        auto db = setupManager();\n\n        return TomApplication(argc, argv, db, "TOM_MIGRATIONS_ENV")\n                .migrations<CreatePostsTable>()\n                .seeders<DatabaseSeeder>()\n                // Fire it up \ud83d\udd25\ud83d\ude80\u2728\n                .run();\n\n    } catch (const std::exception &e) {\n\n        TomApplication::logException(e);\n    }\n\n    return EXIT_FAILURE;\n}\n\nstd::shared_ptr<DatabaseManager> setupManager()\n{\n    using namespace Orm::Constants; // NOLINT(google-build-using-namespace)\n\n    // Ownership of the shared_ptr()\n    return DB::create({\n        {driver_,         QMYSQL},\n        {host_,           qEnvironmentVariable("DB_MYSQL_HOST", H127001)},\n        {port_,           qEnvironmentVariable("DB_MYSQL_PORT", P3306)},\n        {database_,       qEnvironmentVariable("DB_MYSQL_DATABASE", EMPTY)},\n        {username_,       qEnvironmentVariable("DB_MYSQL_USERNAME", EMPTY)},\n        {password_,       qEnvironmentVariable("DB_MYSQL_PASSWORD", EMPTY)},\n        {charset_,        qEnvironmentVariable("DB_MYSQL_CHARSET", UTF8MB4)},\n        {collation_,      qEnvironmentVariable("DB_MYSQL_COLLATION", UTF8MB40900aici)},\n        {timezone_,       TZ00},\n        {prefix_,         EMPTY},\n        {prefix_indexes,  true},\n        {strict_,         true},\n        {isolation_level, QStringLiteral("REPEATABLE READ")},\n        {engine_,         InnoDB},\n        {options_,        QVariantHash()},\n    },\n        QStringLiteral("tinyorm_tom"));\n}\n')),(0,o.kt)("h3",{id:"migrations"},"Migrations"),(0,o.kt)("p",null,"If you have already built the ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," application then you can generate a migrations using the ",(0,o.kt)("a",{parentName:"p",href:"/database/migrations#generating-migrations"},(0,o.kt)("inlineCode",{parentName:"a"},"make:migration"))," command \ud83d\ude0e."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tom make:migration create_posts_table\n")),(0,o.kt)("p",null,"Below is the expected folders structure for the migrations. The ",(0,o.kt)("a",{parentName:"p",href:"#migrations-source-files"},(0,o.kt)("inlineCode",{parentName:"a"},"migrations.pri"))," file is used only by the ",(0,o.kt)("inlineCode",{parentName:"p"},"qmake")," build system and is not needed with ",(0,o.kt)("inlineCode",{parentName:"p"},"CMake")," builds."),(0,o.kt)("a",{id:"folders-structure"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"tom/\n\u2514\u2500\u2500 database/\n    \u251c\u2500\u2500 migrations/\n    \u251c\u2500\u2500 seeders/\n    \u251c\u2500\u2500 migrations.pri\n    \u2514\u2500\u2500 seeders.pri\n")),(0,o.kt)("p",null,"Let's create the first migration manually."),(0,o.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,o.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},"mkdir database/migrations\n\nvim database/migrations/2014_10_12_000000_create_posts_table.hpp")),(0,o.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},"mkdir -p database/migrations\n\nvim database/migrations/2014_10_12_000000_create_posts_table.hpp"))),(0,o.kt)("p",null,"And paste the following code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'#pragma once\n\n#include <tom/migration.hpp>\n\nnamespace Migrations\n{\n\n    struct CreatePostsTable : Migration\n    {\n        /*! Filename of the migration file. */\n        T_MIGRATION\n\n        /*! Run the migrations. */\n        void up() const override\n        {\n            Schema::create("posts", [](Blueprint &table)\n            {\n                table.id();\n\n                table.string(NAME);\n                table.timestamps();\n            });\n        }\n\n        /*! Reverse the migrations. */\n        void down() const override\n        {\n            Schema::dropIfExists("posts");\n        }\n    };\n\n} // namespace Migrations\n')),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you want, you can also build the ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," application without the migrations, simply comment out the ",(0,o.kt)("inlineCode",{parentName:"p"},"migrations")," method and the corresponding ",(0,o.kt)("inlineCode",{parentName:"p"},'#include "migrations/xyz.hpp"')," files."))),(0,o.kt)("h3",{id:"seeders"},"Seeders"),(0,o.kt)("p",null,"If you have already built the ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," application then you can generate a seeder using the ",(0,o.kt)("a",{parentName:"p",href:"/database/seeding#writing-seeders"},(0,o.kt)("inlineCode",{parentName:"a"},"make:seeder"))," command \ud83d\ude0e."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tom make:seeder PostSeeder\n")),(0,o.kt)("p",null,"The expected folders structure is described a few paragraphs ",(0,o.kt)("a",{parentName:"p",href:"#folders-structure"},"above"),". The ",(0,o.kt)("a",{parentName:"p",href:"#seeders-source-files"},(0,o.kt)("inlineCode",{parentName:"a"},"seeders.pri"))," file is used only by the ",(0,o.kt)("inlineCode",{parentName:"p"},"qmake")," build system and is not needed with ",(0,o.kt)("inlineCode",{parentName:"p"},"CMake")," builds."),(0,o.kt)("p",null,"Let's create the root seeder class manually."),(0,o.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,o.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},"mkdir database/seeders\n\nvim database/seeders/databaseseeder.hpp")),(0,o.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},"mkdir -p database/seeders\n\nvim database/seeders/databaseseeder.hpp"))),(0,o.kt)("p",null,"And paste the following code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'#pragma once\n\n#include <tom/seeder.hpp>\n\nnamespace Seeders\n{\n\n    /*! Main database seeder. */\n    struct DatabaseSeeder : Seeder\n    {\n        /*! Run the database seeders. */\n        void run() override\n        {\n            DB::table("posts")->insert({\n                {{"name", "1. post"}},\n                {{"name", "2. post"}},\n            });\n        }\n    };\n\n} // namespace Seeders\n')),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You can create more seeder classes like this and use the ",(0,o.kt)("inlineCode",{parentName:"p"},"call<>()")," method to invoke them as is described in the ",(0,o.kt)("a",{parentName:"p",href:"/database/seeding#calling-additional-seeders"},"Calling Additional Seeders")," section."))),(0,o.kt)("h2",{id:"migrations-with-cmake"},"Migrations with CMake"),(0,o.kt)("p",null,"Create a folder for the ",(0,o.kt)("inlineCode",{parentName:"p"},"CMake")," build."),(0,o.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,o.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},"cd ..\nmkdir tom-builds-cmake/build-debug\n\ncd tom-builds-cmake/build-debug")),(0,o.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},"cd ..\nmkdir -p tom-builds-cmake/build-debug\n\ncd tom-builds-cmake/build-debug"))),(0,o.kt)("h3",{id:"cmake-project"},"CMake project"),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},"CMakeLists.txt")," file with the following content. I leave the comments in the ",(0,o.kt)("inlineCode",{parentName:"p"},"CMakeLists.txt")," file because it's not as simple as the ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello world")," example; to make it clear what's going on."),(0,o.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,o.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-cmake",mdxType:"CodeBlock"},'cmake_minimum_required(VERSION VERSION 3.20...3.23 FATAL_ERROR)\n\n# Specify the C++ standard\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nset(CMAKE_AUTOMOC ON)\n\n# Tom command-line application\n# ---\n\nset(Tom_ns tom)\nset(Tom_target tom)\n\nfile(REAL_PATH "../../TinyORM" TinyMainDir)\n\nset(TinyOrmSourceDir "${TinyMainDir}/TinyORM")\nset(TinyOrmBuildDir "${TinyMainDir}/TinyORM-builds-cmake/build-debug")\n\n# TinyORM CMake modules (needed to set the executable version and RC file on Windows)\nlist(APPEND CMAKE_MODULE_PATH "${TinyOrmSourceDir}/cmake/CommonModules")\n\n# build tree\nlist(APPEND CMAKE_PREFIX_PATH "${TinyOrmBuildDir}")\n\n# Initialize Project Version\n# ---\n\ninclude(TinyHelpers)\ntiny_read_version(TINY_VERSION\n    TINY_VERSION_MAJOR TINY_VERSION_MINOR TINY_VERSION_PATCH TINY_VERSION_TWEAK\n    VERSION_HEADER "${TinyOrmSourceDir}/tom/include/tom/version.hpp"\n    PREFIX TINYTOM\n    HEADER_FOR "${Tom_ns}"\n)\n\n# Basic project\n# ---\n\nproject(${Tom_ns}\n    DESCRIPTION "Tom console for TinyORM"\n    HOMEPAGE_URL "https://www.tinyorm.org"\n    LANGUAGES CXX\n    VERSION ${TINY_VERSION}\n)\n\n# Tom command-line application\n# ---\n\nadd_executable(${Tom_target}\n    main.cpp\n)\nadd_executable(${Tom_ns}::${Tom_target} ALIAS ${Tom_target})\n\n# Tom command-line application specific configuration\n# ---\n\nset_target_properties(${Tom_target}\n    PROPERTIES\n        C_VISIBILITY_PRESET "hidden"\n        CXX_VISIBILITY_PRESET "hidden"\n        VISIBILITY_INLINES_HIDDEN YES\n        VERSION ${PROJECT_VERSION}\n)\n\ntarget_include_directories(${Tom_target} PRIVATE\n    "$<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/database>"\n)\n\n# Tom command-line application defines\n# ---\n\ntarget_compile_definitions(${Tom_target}\n    PRIVATE\n        PROJECT_TOM\n)\n\n# Windows resource and manifest files\n# ---\n\n# Find icons, tom/version.hpp, and Windows manifest file for MinGW\nif(CMAKE_SYSTEM_NAME STREQUAL "Windows")\n    tiny_set_rc_flags("-I \\"${TinyOrmSourceDir}/tom/resources\\"")\nendif()\n\ninclude(TinyResourceAndManifest)\ntiny_resource_and_manifest(${Tom_target}\n    OUTPUT_DIR "${TINY_BUILD_GENDIR}/tmp/"\n    RESOURCES_DIR "${TinyOrmSourceDir}/tom/resources"\n)\n\n# Resolve and link dependencies\n# ---\n\nfind_package(QT NAMES Qt6 Qt5 COMPONENTS Core REQUIRED)\nfind_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)\nfind_package(TinyOrm 0.2.0 CONFIG REQUIRED)\n\n# Unconditional dependencies\ntarget_link_libraries(${Tom_target}\n    PRIVATE\n        Qt${QT_VERSION_MAJOR}::Core\n        TinyOrm::TinyOrm\n)')),(0,o.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-cmake",mdxType:"CodeBlock"},'cmake_minimum_required(VERSION VERSION 3.20...3.23 FATAL_ERROR)\n\n# Specify the C++ standard\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nset(CMAKE_AUTOMOC ON)\n\n# Tom command-line application\n# ---\n\nset(Tom_ns tom)\nset(Tom_target tom)\n\nfile(REAL_PATH "../../TinyORM" TinyMainDir)\n\nset(TinyOrmSourceDir "${TinyMainDir}/TinyORM")\nset(TinyOrmBuildDir "${TinyMainDir}/TinyORM-builds-cmake/build-debug")\n\n# TinyORM CMake modules (needed to set the executable version and RC file on Windows)\nlist(APPEND CMAKE_MODULE_PATH "${TinyOrmSourceDir}/cmake/CommonModules")\n\n# build tree\nlist(APPEND CMAKE_PREFIX_PATH "${TinyOrmBuildDir}")\n\n# Initialize Project Version\n# ---\n\ninclude(TinyHelpers)\ntiny_read_version(TINY_VERSION\n    TINY_VERSION_MAJOR TINY_VERSION_MINOR TINY_VERSION_PATCH TINY_VERSION_TWEAK\n    VERSION_HEADER "${TinyOrmSourceDir}/tom/include/tom/version.hpp"\n    PREFIX TINYTOM\n    HEADER_FOR "${Tom_ns}"\n)\n\n# Basic project\n# ---\n\nproject(${Tom_ns}\n    DESCRIPTION "Tom console for TinyORM"\n    HOMEPAGE_URL "https://www.tinyorm.org"\n    LANGUAGES CXX\n    VERSION ${TINY_VERSION}\n)\n\n# Tom command-line application\n# ---\n\nadd_executable(${Tom_target}\n    main.cpp\n)\nadd_executable(${Tom_ns}::${Tom_target} ALIAS ${Tom_target})\n\n# Tom command-line application specific configuration\n# ---\n\nset_target_properties(${Tom_target}\n    PROPERTIES\n        C_VISIBILITY_PRESET "hidden"\n        CXX_VISIBILITY_PRESET "hidden"\n        VISIBILITY_INLINES_HIDDEN YES\n        VERSION ${PROJECT_VERSION}\n)\n\ntarget_include_directories(${Tom_target} PRIVATE\n    "$<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/database>"\n)\n\n# Tom command-line application defines\n# ---\n\ntarget_compile_definitions(${Tom_target}\n    PRIVATE\n        PROJECT_TOM\n)\n\n# Windows resource and manifest files\n# ---\n\n# Find icons, tom/version.hpp, and Windows manifest file for MinGW\nif(CMAKE_SYSTEM_NAME STREQUAL "Windows")\n    tiny_set_rc_flags("-I \\"${TinyOrmSourceDir}/tom/resources\\"")\nendif()\n\ninclude(TinyResourceAndManifest)\ntiny_resource_and_manifest(${Tom_target}\n    OUTPUT_DIR "${TINY_BUILD_GENDIR}/tmp/"\n    RESOURCES_DIR "${TinyOrmSourceDir}/tom/resources"\n)\n\n# Resolve and link dependencies\n# ---\n\nfind_package(QT NAMES Qt6 Qt5 COMPONENTS Core REQUIRED)\nfind_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)\nfind_package(TinyOrm 0.2.0 CONFIG REQUIRED)\n\n# Unconditional dependencies\ntarget_link_libraries(${Tom_target}\n    PRIVATE\n        Qt${QT_VERSION_MAJOR}::Core\n        TinyOrm::TinyOrm\n)'))),(0,o.kt)("h3",{id:"build-migrations-cmake"},"Build migrations"),(0,o.kt)("p",null,"Now you are ready to configure ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," ",(0,o.kt)("inlineCode",{parentName:"p"},"CMake")," application. Don't forget to prepare the build environment with the ",(0,o.kt)("a",{parentName:"p",href:"/building/tinyorm#windows-prerequisites"},(0,o.kt)("inlineCode",{parentName:"a"},"qtenv6.ps1"))," command if you are building with the ",(0,o.kt)("inlineCode",{parentName:"p"},"msvc"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ../tom-builds-cmake/build-debug\n")),(0,o.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,o.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},'cmake.exe `\n-S "'+(0,d.go)(m.Fo)+'/tom/tom" `\n-B "'+(0,d.go)(m.Fo)+"/tom/tom-builds-cmake/build-debug\" `\n-G 'Ninja' `\n-D CMAKE_BUILD_TYPE:STRING='Debug' `\n-D CMAKE_TOOLCHAIN_FILE:FILEPATH=\""+(0,d.EA)(m.Fo)+'/vcpkg/scripts/buildsystems/vcpkg.cmake" `\n-D CMAKE_INSTALL_PREFIX:PATH="'+(0,d.EA)(m.Fo)+'/tmp/tom"')),(0,o.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'cmake \\\n-S "'+(0,d.go)(m.q5)+'/tom/tom" \\\n-B "'+(0,d.go)(m.q5)+"/tom/tom-builds-cmake/build-debug\" \\\n-G 'Ninja' \\\n-D CMAKE_BUILD_TYPE:STRING='Debug' \\\n-D CMAKE_TOOLCHAIN_FILE:FILEPATH=\""+(0,d.EA)(m.q5)+'/vcpkg/scripts/buildsystems/vcpkg.cmake" \\\n-D CMAKE_INSTALL_PREFIX:PATH="'+(0,d.EA)(m.q5)+'/tmp/tom"'))),(0,o.kt)("p",null,"And build."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cmake --build . --target all\n")),(0,o.kt)("h3",{id:"execute-migrations-cmake"},"Execute migrations"),(0,o.kt)("p",null,"Do not forget to add ",(0,o.kt)("inlineCode",{parentName:"p"},"TinyOrm0d.dll")," on the path on Windows and on the ",(0,o.kt)("inlineCode",{parentName:"p"},"LD_LIBRARY_PATH")," on Linux, so ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," application can find it during execution, as is described ",(0,o.kt)("a",{parentName:"p",href:"/building/tinyorm#tinyorm-on-path-cmake"},"here"),"."),(0,o.kt)(s.Z,{groupId:m.IZ,name:"tinyorm-on-path",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},'$env:Path = "'+(0,d.go)(m.Fo,!1)+'\\TinyORM\\TinyORM-builds-cmake\\build-debug;" + $env:Path')),(0,o.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},"export LD_LIBRARY_PATH="+(0,d.go)(m.q5)+"/TinyORM/TinyORM-builds-cmake/build-debug${PATH:+:}$PATH"))),(0,o.kt)("p",null,"Execute ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," application."),(0,o.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,o.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-powershell"},".\\tom.exe migrate:status\n"))),(0,o.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./tom migrate:status\n")))),(0,o.kt)("p",null,"The output will look something like this."),(0,o.kt)("img",{src:t(3086).Z,alt:"Tom migrations - migrate:status command output",width:"660"}),(0,o.kt)("p",null,"See also the ",(0,o.kt)("a",{parentName:"p",href:"#finish"},"final thoughts")," on how to verify the ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," executable file properties."),(0,o.kt)("p",null,"Happy migrating \ud83c\udf89\ud83d\udc4c"),(0,o.kt)("h2",{id:"migrations-with-qmake"},"Migrations with qmake"),(0,o.kt)("p",null,"Create a folder for the ",(0,o.kt)("inlineCode",{parentName:"p"},"qmake")," build."),(0,o.kt)(s.Z,{groupId:m.IZ,mdxType:"Tabs"},(0,o.kt)(l.Z,{value:m.Fo,label:m.IM,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},"cd "+(0,d.go)(m.Fo)+"/tom\n\nmkdir tom-builds-qmake")),(0,o.kt)(l.Z,{value:m.q5,label:m.C,mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},"cd "+(0,d.go)(m.q5)+"/tom\n\nmkdir tom-builds-qmake"))),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"#source-code"},(0,o.kt)("inlineCode",{parentName:"a"},"source code"))," is the same as for the ",(0,o.kt)("inlineCode",{parentName:"p"},"Migrations with CMake")," console application."),(0,o.kt)("h3",{id:"qmake-project"},"qmake project"),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},"tom.pro")," qmake file with the following content."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd tom\nvim tom.pro\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"To paste a source code correctly in ",(0,o.kt)("inlineCode",{parentName:"p"},"vim"),", press ",(0,o.kt)("kbd",null,"Shift")," + ",(0,o.kt)("kbd",null,"p"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-qmake"},"QT *= core sql\nQT -= gui\n\nTEMPLATE = app\nTARGET = tom\n\nCONFIG *= console\n\nDEFINES += PROJECT_TOM\n\nSOURCES += $$PWD/main.cpp\n\n# Database migrations\ninclude($$PWD/database/migrations.pri)\n# Database seeders\ninclude($$PWD/database/seeders.pri)\n\n# Configure TinyORM library for the migrations purposes\ninclude($$TINY_MAIN_DIR/TinyORM/qmake/tom.pri)\n\n# vcpkg - range-v3 and tabulate\nwin32-msvc: \\\n    INCLUDEPATH += $$quote($$TINY_VCPKG_INSTALLED/x64-windows/include/)\nmingw: \\\n    QMAKE_CXXFLAGS += -isystem $$shell_quote($$TINY_VCPKG_INSTALLED/x64-mingw-dynamic/include/)\nunix:!macx: \\\n    QMAKE_CXXFLAGS += -isystem $$shell_quote($$TINY_VCPKG_INSTALLED/x64-linux/include/)\n")),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The exact ",(0,o.kt)("a",{parentName:"p",href:"/building/tinyorm#folders-structure"},"folders structure")," is crucial in this example because the paths to the ",(0,o.kt)("inlineCode",{parentName:"p"},"TinyORM")," source and build folders are relative."))),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"On Linux ",(0,o.kt)("inlineCode",{parentName:"p"},"-isystem")," marks the directory as a system directory, it prevents warnings."),(0,o.kt)("p",{parentName:"div"},"On Windows you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"QMAKE_CXXFLAGS_WARN_ON = -external:anglebrackets -external:W0"),", it applies a warning level 0 to the angel bracket includes; ",(0,o.kt)("inlineCode",{parentName:"p"},"#include <file>"),"."))),(0,o.kt)("h4",{id:"configure-using-qmakeconf"},"Configure using .qmake.conf"),(0,o.kt)("p",null,"To correctly set a file properties as the version, description, ... you have to provide the path to the ",(0,o.kt)("inlineCode",{parentName:"p"},"TinyORM")," qmake features (",(0,o.kt)("inlineCode",{parentName:"p"},".prf")," files) which handle this correctly, this path is provided by the ",(0,o.kt)("inlineCode",{parentName:"p"},"QMAKEFEATURES")," variable and can be set only in the ",(0,o.kt)("inlineCode",{parentName:"p"},".qmake.conf")," file."),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},".qmake.conf")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," application root folder with the following content."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-qmake"},"TINY_MAIN_DIR = $$clean_path($$PWD/../../TinyORM)\n# Name of this qmake variable is crucial\nTINYORM_BUILD_TREE = $$quote($$TINY_MAIN_DIR/TinyOrm-builds-qmake/build-TinyOrm-Desktop_Qt_6_2_4_MSVC2019_64bit-Debug)\n# vcpkg - range-v3 and tabulate\nTINY_VCPKG_INSTALLED = $$clean_path($$PWD/../../../vcpkg/installed)\n\nQMAKEFEATURES *= $$quote($$TINY_MAIN_DIR/TinyORM/qmake/features)\n")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Configuring with the ",(0,o.kt)("inlineCode",{parentName:"p"},".qmake.conf")," file has one big advantage that is that you do not have to modify the project files."))),(0,o.kt)("h4",{id:"migrations-source-files"},"Migrations source files"),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},"database/migrations.pri")," file and paste the following code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-qmake"},"INCLUDEPATH += $$PWD\n\nHEADERS += \\\n    $$PWD/migrations/2014_10_12_000000_create_posts_table.hpp \\\n")),(0,o.kt)("h4",{id:"seeders-source-files"},"Seeders source files"),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},"database/seeders.pri")," file and paste the following code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-qmake"},"INCLUDEPATH += $$PWD\n\nHEADERS += \\\n    $$PWD/seeders/databaseseeder.hpp \\\n")),(0,o.kt)("h3",{id:"build-migrations-qmake"},"Build migrations"),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"I recommend creating a new ",(0,o.kt)("inlineCode",{parentName:"p"},"Session")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"QtCreator IDE")," as is described ",(0,o.kt)("a",{parentName:"p",href:"/building/tinyorm#open-qtcreator-ide"},"here"),"."))),(0,o.kt)("p",null,"Now you can open the ",(0,o.kt)("inlineCode",{parentName:"p"},"tom.pro")," project in the ",(0,o.kt)("inlineCode",{parentName:"p"},"QtCreator IDE"),"."),(0,o.kt)("p",null,"This will open the ",(0,o.kt)("inlineCode",{parentName:"p"},"Configure Project")," tab, select some kit and update build folder paths to meet our ",(0,o.kt)("a",{parentName:"p",href:"/building/tinyorm#folders-structure"},"folders structure")," or like you want."),(0,o.kt)("img",{src:t(6191).Z,alt:"tom - QtCreator - Configure Project",width:"760"}),(0,o.kt)("p",null,"You are ready to configure build options, hit ",(0,o.kt)("kbd",null,"Ctrl"),"+",(0,o.kt)("kbd",null,"5")," to open ",(0,o.kt)("inlineCode",{parentName:"p"},"Project Settings")," tab and select ",(0,o.kt)("inlineCode",{parentName:"p"},"Build")," in the left sidebar to open the ",(0,o.kt)("inlineCode",{parentName:"p"},"Build Settings"),", it should look similar to the following picture."),(0,o.kt)("p",null,"Disable ",(0,o.kt)("inlineCode",{parentName:"p"},"QML debugging and profiling")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Qt Quick Compiler"),", they are not used."),(0,o.kt)("img",{src:t(5539).Z,className:"no-blurry",alt:"tom - QtCreator - Build Settings",width:"760"}),(0,o.kt)("p",null,"Everything is ready to build, you can press ",(0,o.kt)("kbd",null,"Ctrl"),"+",(0,o.kt)("kbd",null,"b")," to build the project."),(0,o.kt)("h3",{id:"execute-migrations-qmake"},"Execute migrations"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"QtCreator")," takes care about all the necessary configuration, sets up the build environment correctly and also prepends dependency libraries on the path on Windows and on the ",(0,o.kt)("inlineCode",{parentName:"p"},"LD_LIBRARY_PATH")," on Linux."),(0,o.kt)("p",null,"Only one thing you might want to change is to run the ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," application in the new terminal window. To do so, hit ",(0,o.kt)("kbd",null,"Ctrl"),"+",(0,o.kt)("kbd",null,"5")," to open the ",(0,o.kt)("inlineCode",{parentName:"p"},"Project Settings")," tab and select ",(0,o.kt)("inlineCode",{parentName:"p"},"Run")," in the left sidebar to open the ",(0,o.kt)("inlineCode",{parentName:"p"},"Run Settings"),", then in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Run")," section select the ",(0,o.kt)("inlineCode",{parentName:"p"},"Run in terminal")," checkbox."),(0,o.kt)("p",null,"You can also set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Command line arguments")," in this ",(0,o.kt)("inlineCode",{parentName:"p"},"Run")," section, eg. the ",(0,o.kt)("inlineCode",{parentName:"p"},"migrate:status"),"."),(0,o.kt)("p",null,"To execute the ",(0,o.kt)("inlineCode",{parentName:"p"},"tom")," application press ",(0,o.kt)("kbd",null,"Ctrl")," + ",(0,o.kt)("kbd",null,"r"),"."),(0,o.kt)("p",null,"The output will look something like this."),(0,o.kt)("img",{src:t(3086).Z,alt:"Tom migrations - migrate:status command output",width:"660"}),(0,o.kt)("p",null,"Happy migrating \ud83c\udf89\ud83d\udc4c"),(0,o.kt)("h2",{id:"finish"},"Finish"),(0,o.kt)("p",null,"As the last thing, you can check that all the file properties were correctly set by the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/windows/win32/menurc/resource-compiler"},(0,o.kt)("inlineCode",{parentName:"a"},"rc"))," compiler."),(0,o.kt)("p",null,"Find the ",(0,o.kt)("inlineCode",{parentName:"p"},"tom.exe")," file and press ",(0,o.kt)("kbd",null,"Alt")," + ",(0,o.kt)("kbd",null,"Enter")," to open the file properties. To check the executable manifest you can use eg. the ",(0,o.kt)("a",{parentName:"p",href:"http://www.angusj.com/resourcehacker/"},"Resource Hacker"),"."),(0,o.kt)("img",{src:t(643).Z,alt:"tom.exe file properties detail",width:"440"}))}T.isMDXComponent=!0},5539:function(e,n,t){n.Z=t.p+"assets/images/qmake-build_settings-7ce9fbef0172788275c1081e69fb61cc.png"},6191:function(e,n,t){n.Z=t.p+"assets/images/qmake-configure_project-0612b44b4d612e31bfbeb6496d865289.png"},643:function(e,n,t){n.Z=t.p+"assets/images/tom_file_properties-44abf8fb5495499dd6325a1eb08510dc.png"},3086:function(e,n,t){n.Z=t.p+"assets/images/tom_migrate_status-63c129a10bfe6bffe8d2d5ea280860e5.png"}}]);