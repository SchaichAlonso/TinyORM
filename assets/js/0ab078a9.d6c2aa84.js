"use strict";(self.webpackChunktinyorm_org=self.webpackChunktinyorm_org||[]).push([[969],{5162:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294),i=n(6010);const l={tabItem:"tabItem_Ymn6"};function r(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(l.tabItem,r),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>f});var a=n(7462),i=n(7294),l=n(6010),r=n(2466),o=n(6550),d=n(1980),p=n(7392),m=n(12);function s(e){return function(e){return i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:i}}=e;return{value:t,label:n,attributes:a,default:i}}))}function u(e){const{values:t,children:n}=e;return(0,i.useMemo)((()=>{const e=t??s(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function k(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function N(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,d._X)(l),(0,i.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function c(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=u(e),[r,o]=(0,i.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!k({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[d,p]=N({queryString:n,groupId:a}),[s,c]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,m.Nk)(n);return[a,(0,i.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),h=(()=>{const e=d??s;return k({value:e,tabValues:l})?e:null})();(0,i.useLayoutEffect)((()=>{h&&o(h)}),[h]);return{selectedValue:r,selectValue:(0,i.useCallback)((e=>{if(!k({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),c(e)}),[p,c,l]),tabValues:l}}var h=n(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:n,selectedValue:o,selectValue:d,tabValues:p}=e;const m=[],{blockElementScrollPositionUntilNextRender:s}=(0,r.o5)(),u=e=>{const t=e.currentTarget,n=m.indexOf(t),a=p[n].value;a!==o&&(s(t),d(a))},k=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=m.indexOf(e.currentTarget)+1;t=m[n]??m[0];break}case"ArrowLeft":{const n=m.indexOf(e.currentTarget)-1;t=m[n]??m[m.length-1];break}}t?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:r}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>m.push(e),onKeyDown:k,onClick:u},r,{className:(0,l.Z)("tabs__item",b.tabItem,r?.className,{"tabs__item--active":o===t})}),n??t)})))}function C(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=c(e);return i.createElement("div",{className:(0,l.Z)("tabs-container",b.tabList)},i.createElement(g,(0,a.Z)({},e,t)),i.createElement(C,(0,a.Z)({},e,t)))}function f(e){const t=(0,h.Z)();return i.createElement(y,(0,a.Z)({key:String(t)},e))}},5178:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),i=n(6550);const l={apiTable:"apiTable_flxF"};const r=(0,a.forwardRef)(((e,t)=>{let{name:n,children:l}=e;const r=function(e){let t=e;for(;(0,a.isValidElement)(t);)[t]=a.Children.toArray(t.props.children);return t}(l),o=n?`#${n}-${r}`:`#${r}`,d=(0,i.k6)();return a.createElement("tr",{id:r,tabIndex:0,ref:d.location.hash===o?t:void 0,onClick:()=>{d.push(o)},onKeyDown:e=>{"Enter"===e.key&&d.push(o)}},l.props.children)}));function o(e){let{children:t,name:n}=e;const[i,o]=a.Children.toArray(t.props.children),d=(0,a.useRef)(null);(0,a.useEffect)((()=>{d.current?.focus()}),[d]);const p=a.Children.map(o.props.children,(e=>a.createElement(r,{name:n,ref:d},e)));return a.createElement("table",{className:l.apiTable},i,a.createElement("tbody",null,p))}},2044:(e,t,n)=>{n.d(t,{$t:()=>s,Ae:()=>h,C:()=>N,DK:()=>b,Fo:()=>o,Fs:()=>i,IM:()=>c,IZ:()=>a,RS:()=>_,VE:()=>g,Wg:()=>y,_A:()=>p,al:()=>T,jk:()=>k,js:()=>d,of:()=>m,q5:()=>r,qb:()=>f,vk:()=>u,wU:()=>l,zg:()=>C});const a="shell",i="database",l="application",r="bash",o="pwsh",d="zsh",p="maria",m="mysql",s="postgres",u="sqlite",k="application",N="bash",c="pwsh",h="zsh",b="MariaDB",g="MySQL",C="PostgreSQL",y="SQLite",f="tinyorm.org",T="$HOME/Code/c/",_="$env:USERPROFILE\\Code\\c\\"},4355:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),i=n(9482);function l(){const e=(0,a.useContext)(i.Z);if(null!=e)return e;throw new Error("useRootFolderContext is used outside of Layout component.")}},6005:(e,t,n)=>{n.d(t,{AE:()=>o,EA:()=>r,em:()=>p,go:()=>d,mT:()=>m,we:()=>s});var a=n(4355),i=n(2389),l=n(2044);const r=function(e,t){return void 0===t&&(t=!0),u((0,a.Z)().rootFolder[e]??p(e),e,t)},o=()=>(0,a.Z)().rootFolder[l.wU]??p(l.wU),d=function(e,t){if(void 0===t&&(t=!0),null==e)throw new Error("The groupId in the applicationFolderPath() can not be empty.");const n=t||e!==l.Fo?"/":"\\";return u(r(e)+n+o(),e,t)};function p(e){if(null==e)throw new Error("The groupId in the folderDefaultValue() can not be empty.");if(!(0,i.Z)())return"";switch(e){case l.Fo:return l.RS;case l.q5:return l.al;case l.wU:return l.qb;default:throw new Error(`No default value for '${e}' groupId in the folderDefaultValue().`)}}function m(e){return e===l.wU}function s(e,t){if(null==t||""===t)return t;const n="$ENV{$1}$2";switch(e){case l.Fo:return N(t).replace(/\$env:(.+?)(\/.*)/,n);case l.q5:return t.replace(/\$(.+?)(\/.*)/,n);default:throw new Error(`Unsupported shell type '${e}' in the convertToCmakeEnvVariable().`)}}function u(e,t,n){if(void 0===n&&(n=!0),null==e||""===e)return e;if(t!==l.Fo)return k(e);const a=k(e);return n?N(a):function(e){return null==e||""===e?e:e.replaceAll(/\/+/g,"\\")}(a)}function k(e){return null==e||""===e?e:e.replace(/[/\\]+$/,"")}function N(e){return null==e||""===e?e:e.replaceAll(/\\+(?! )/g,"/")}},4040:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>v,contentTitle:()=>T,default:()=>R,frontMatter:()=>f,metadata:()=>_,toc:()=>O});var a=n(7462),i=n(7294),l=n(3905),r=n(5178),o=n(7693),d=n(5162),p=n(4866),m=n(5697),s=n.n(m),u=n(6005);function k(e){let{groupId:t}=e;return i.createElement("span",null,(0,u.go)(t))}k.propTypes={groupId:s().string.isRequired};const N=k;var c=n(6010),h=n(4355);const b={rootFolderInput:"rootFolderInput_ottS",input:"input_OR7e",application:"application_fjej"};function g(e){let{groupId:t,label:n}=e;const{rootFolder:a,setRootFolder:l}=(0,h.Z)(),r=(0,u.mT)(t),o=r?"application":"root",d=r?"\nThis folder name is common for all shells (eg. pwsh, bash, ...)":"";return i.createElement("form",{name:"tinyorm-root-folder-form",className:(0,c.Z)(b.rootFolderInput,b[t],t),onSubmit:e=>{e.preventDefault(),e.stopPropagation()}},i.createElement("input",{name:"tinyorm-root-folder-input",className:(0,c.Z)(b.input,b[t],t),placeholder:`Enter ${o} folder...`,title:`This ${o} folder will be used in all ${n} examples at tinyorm.org${d}`,onChange:e=>{l(t,e.target.value)},value:a[t]??(0,u.em)(t)}))}g.propTypes={groupId:s().string.isRequired,label:s().string.isRequired};const C=g;var y=n(2044);const f={sidebar_position:0,sidebar_label:"TinyORM",hide_table_of_contents:!0,description:"How to compile the TinyORM C++ library on Windows and Linux.",keywords:["c++ orm","building","tinyorm"]},T="Building: TinyORM",_={unversionedId:"building/tinyorm",id:"building/tinyorm",title:"Building: TinyORM",description:"How to compile the TinyORM C++ library on Windows and Linux.",source:"@site/docs/building/tinyorm.mdx",sourceDirName:"building",slug:"/building/tinyorm",permalink:"/building/tinyorm",draft:!1,editUrl:"https://github.com/silverqx/TinyORM-github.io/edit/main/docs/building/tinyorm.mdx",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0,sidebar_label:"TinyORM",hide_table_of_contents:!0,description:"How to compile the TinyORM C++ library on Windows and Linux.",keywords:["c++ orm","building","tinyorm"]},sidebar:"tinyormSidebar",previous:{title:"Serialization",permalink:"/tinyorm/serialization"},next:{title:"Hello world",permalink:"/building/hello-world"}},v={},O=[{value:"Introduction",id:"introduction",level:2},{value:"Common Prerequisites",id:"common-prerequisites",level:4},{value:"Windows Prerequisites",id:"windows-prerequisites",level:4},{value:"Build environment scripts",id:"build-environment-scripts",level:5},{value:"Allow symbolic links unprivileged",id:"allow-symbolic-links-unprivileged",level:5},{value:"Folders structure",id:"folders-structure",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"vcpkg",id:"vcpkg",level:2},{value:"Set up <code>vcpkg</code> environment",id:"set-up-vcpkg-environment",level:4},{value:"C preprocessor macros",id:"c-preprocessor-macros",level:2},{value:"Building with CMake",id:"building-with-cmake",level:2},{value:"Configure &amp; Build <small>(cmake)</small>",id:"configure-and-build-cmake",level:3},{value:"CMake <code>STRICT_MODE</code> option",id:"cmake-strict_mode-option",level:5},{value:"Build TinyORM",id:"build-tinyorm",level:4},{value:"CMake build options",id:"cmake-build-options",level:3},{value:"Consume TinyOrm library <small>(cmake)</small>",id:"consume-tinyorm-library-cmake",level:3},{value:"Building with qmake",id:"building-with-qmake",level:2},{value:"Install dependencies",id:"install-dependencies",level:3},{value:"Configure &amp; Build <small>(qmake)</small>",id:"configure-and-build-qmake",level:3},{value:"Open QtCreator IDE",id:"open-qtcreator-ide",level:4},{value:"Configure TinyORM",id:"configure-tinyorm",level:4},{value:"Auto-configuration and tiny_dotenv",id:"auto-configuration-and-tiny_dotenv",level:5},{value:"Manual configuration (conf.pri)",id:"manual-configuration-confpri",level:5},{value:"Opening TinyORM.pro (main project file)",id:"opening-tinyormpro-main-project-file",level:5},{value:"Build TinyORM",id:"build-tinyorm-1",level:4},{value:"qmake build options",id:"qmake-build-options",level:3},{value:"Consume TinyOrm library <small>(qmake)</small>",id:"consume-tinyorm-library-qmake",level:3},{value:"Requirements",id:"requirements",level:4},{value:"<code>QMAKEFEATURES</code>",id:"qmakefeatures",level:5},{value:"Variables affecting <code>TinyOrm.pri</code>",id:"variables-affecting-tinyormpri",level:5},{value:"Manual configuration examples",id:"manual-configuration-examples",level:5},{value:"Auto-configuration internals",id:"auto-configuration-internals",level:3},{value:"Environment files",id:"environment-files",level:4},{value:"Partial guessing of the <code>TINYORM_BUILD_TREE</code>",id:"partial-guessing-of-the-tinyorm_build_tree",level:4},{value:"Manual configuration internals",id:"manual-configuration-internals",level:3},{value:"Ccache support",id:"ccache-support",level:2}],I={toc:O},M="wrapper";function R(e){let{components:t,...i}=e;return(0,l.kt)(M,(0,a.Z)({},I,i,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"building-tinyorm"},"Building: TinyORM"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#introduction"},"Introduction"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#common-prerequisites"},"Common Prerequisites")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#windows-prerequisites"},"Windows Prerequisites")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#folders-structure"},"Folders structure")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#getting-started"},"Getting started")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#vcpkg"},"vcpkg")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#c-preprocessor-macros"},"C preprocessor macros")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#building-with-cmake"},"Building with CMake"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#configure-and-build-cmake"},"Configure & Build")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#cmake-build-options"},"CMake build options")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#consume-tinyorm-library-cmake"},"Consume TinyOrm library")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#building-with-qmake"},"Building with qmake"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#install-dependencies"},"Install dependencies")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#configure-and-build-qmake"},"Configure & Build")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#qmake-build-options"},"qmake build options")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#consume-tinyorm-library-qmake"},"Consume TinyOrm library")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#auto-configuration-internals"},"Auto-configuration internals"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#environment-files"},"Environment files")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#manual-configuration-internals"},"Manual configuration internals")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#ccache-support"},"Ccache support"))),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"The build systems supported out of the box are ",(0,l.kt)("inlineCode",{parentName:"p"},"CMake")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake"),"."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"All examples below assume that ",(0,l.kt)("inlineCode",{parentName:"p"},"pwsh")," runs on ",(0,l.kt)("inlineCode",{parentName:"p"},"Windows")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"bash")," runs on ",(0,l.kt)("inlineCode",{parentName:"p"},"Linux"),".")),(0,l.kt)("h4",{id:"common-prerequisites"},"Common Prerequisites"),(0,l.kt)("p",null,"Install the required ",(0,l.kt)("a",{parentName:"p",href:"/dependencies"},"dependencies")," before starting."),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"QSqlDatabase")," depends on ",(0,l.kt)("inlineCode",{parentName:"p"},"QCoreApplication")," from ",(0,l.kt)("inlineCode",{parentName:"p"},"Qt v6.5.3")," so you must create the ",(0,l.kt)("inlineCode",{parentName:"p"},"QCoreApplication")," instance before you will call anything from the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library. \ud83e\udee4 The change was made ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/qt/qtbase/commit/8d2bdc9cd5482eace12ba7e45304857bd24db0e6#diff-1d355c25c0b0eddec2be48253407780c4dc510d986739aec61e1ec892ccaf86e"},"here"),".")),(0,l.kt)("h4",{id:"windows-prerequisites"},"Windows Prerequisites"),(0,l.kt)("h5",{id:"build-environment-scripts"},"Build environment scripts"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Visual Studio")," does not provide ",(0,l.kt)("inlineCode",{parentName:"p"},"vcvars")," scripts for ",(0,l.kt)("inlineCode",{parentName:"p"},"pwsh"),", you can use ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/silverqx/TinyORM/tree/main/tools/vcvars64.ps1"},(0,l.kt)("inlineCode",{parentName:"a"},"vcvars64.ps1"))," provided by ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," in the ",(0,l.kt)("inlineCode",{parentName:"p"},"tools/")," folder. Place them on the ",(0,l.kt)("inlineCode",{parentName:"p"},"$env:Path")," user/system path and they will be available system-wide."),(0,l.kt)("p",null,"The same is true for the ",(0,l.kt)("inlineCode",{parentName:"p"},"Qt Framework"),", it doesn't provide ",(0,l.kt)("inlineCode",{parentName:"p"},"qtenv")," scripts for ",(0,l.kt)("inlineCode",{parentName:"p"},"pwsh")," too. You can create your own script, place it on the ",(0,l.kt)("inlineCode",{parentName:"p"},"$env:Path")," user/system path and it will be available system-wide."),(0,l.kt)("p",null,"Here is one simple example for ",(0,l.kt)("inlineCode",{parentName:"p"},"pwsh"),"."),(0,l.kt)(p.Z,{groupId:y.IZ,mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"qtenv6.ps1",label:"qtenv6.ps1",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-powershell"},"Write-Host 'Setting up environment for Qt 6.5.3 usage...' -ForegroundColor Magenta\n$env:Path = 'C:\\Qt\\6.5.3\\msvc2019_64\\bin;' + $env:Path\n. E:\\dotfiles\\bin\\vcvars64.ps1\n"))),(0,l.kt)(d.Z,{value:"qtenv5.ps1",label:"qtenv5.ps1",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-powershell"},"Write-Host 'Setting up environment for Qt 5.15.2 usage...' -ForegroundColor Magenta\n$env:Path = 'C:\\Qt\\5.15.2\\msvc2019_64\\bin;' + $env:Path\n. E:\\dotfiles\\bin\\vcvars64.ps1\n")))),(0,l.kt)("p",null,"And here for ",(0,l.kt)("inlineCode",{parentName:"p"},"Linux"),"."),(0,l.kt)(p.Z,{groupId:y.IZ,mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"qtenv6",label:"qtenv6",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'Setting up environment for Qt 6.5.3 usage...'\n\nexport PATH=/opt/Qt/6.5.3/gcc_64/bin${PATH:+:}$PATH\nexport LD_LIBRARY_PATH=/opt/Qt/6.5.3/gcc_64/lib${LD_LIBRARY_PATH:+:}$LD_LIBRARY_PATH\n"))),(0,l.kt)(d.Z,{value:"qtenv5",label:"qtenv5",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'Setting up environment for Qt 5.15.2 usage...'\n\nexport PATH=/opt/Qt/5.15.2/gcc_64/bin${PATH:+:}$PATH\nexport LD_LIBRARY_PATH=/opt/Qt/5.15.2/gcc_64/lib${LD_LIBRARY_PATH:+:}$LD_LIBRARY_PATH\n")))),(0,l.kt)("h5",{id:"allow-symbolic-links-unprivileged"},"Allow symbolic links unprivileged"),(0,l.kt)("p",null,"Open ",(0,l.kt)("inlineCode",{parentName:"p"},"Local Security Policy"),", go to ",(0,l.kt)("inlineCode",{parentName:"p"},"Local Policies - User Rights Assignment"),", open ",(0,l.kt)("inlineCode",{parentName:"p"},"Create symbolic links")," and add your user account or user group, restart when it doesn't apply immediately."),(0,l.kt)("h2",{id:"folders-structure"},"Folders structure"),(0,l.kt)("p",null,"All ",(0,l.kt)("inlineCode",{parentName:"p"},"tinyorm.org")," examples are based on the following folders structure. The ",(0,l.kt)("inlineCode",{parentName:"p"},"tom")," folder will contain a ",(0,l.kt)("a",{parentName:"p",href:"/building/migrations"},"migrations console application"),"."),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"You can set the root and application folder paths in the form below and they will be used across the whole ",(0,l.kt)("a",{parentName:"p",href:"http://www.tinyorm.org"},"www.tinyorm.org")," website. \ud83e\udd73 The pwsh shell is supposed to use on Windows and the bash shell on Linux, but it is not a requirement.")),(0,l.kt)(p.Z,{groupId:y.IZ,mdxType:"Tabs"},(0,l.kt)(d.Z,{value:y.Fo,label:y.IM,className:"tiny-tree",mdxType:"TabItem"},(0,l.kt)("div",{className:"tiny-root-folder-info-wrapper"},(0,l.kt)("span",{className:"tiny-root-folder-info-prefix"},"Current pwsh path"),"\xa0",(0,l.kt)(N,{groupId:y.Fo,mdxType:"RootFolder"})),(0,l.kt)(C,{groupId:y.Fo,label:y.IM,mdxType:"RootFolderInput"}),(0,l.kt)(C,{groupId:y.wU,label:y.jk,mdxType:"RootFolderInput"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\n\n\n\u251c\u2500\u2500\n\u2502   \u251c\u2500\u2500 HelloWorld/\n\u2502   |   \u251c\u2500\u2500 HelloWorld/\n\u2502   |   \u251c\u2500\u2500 HelloWorld-builds-cmake/\n\u2502   |   |   \u2514\u2500\u2500 build-debug/\n\u2502   |   \u2514\u2500\u2500 HelloWorld-builds-qmake/\n\u2502   |       \u2514\u2500\u2500 build-debug/\n\u2502   \u251c\u2500\u2500 TinyORM/\n\u2502   |   \u251c\u2500\u2500 TinyORM/\n\u2502   |   \u251c\u2500\u2500 TinyORM-builds-cmake/\n\u2502   |   \u2502   \u251c\u2500\u2500 build-gcc-debug/\n\u2502   |   \u2502   \u251c\u2500\u2500 build-gcc-release/\n\u2502   |   \u2502   \u2514\u2500\u2500 build-clang-debug/\n\u2502   |   \u2514\u2500\u2500 TinyORM-builds-qmake/\n\u2502   |       \u251c\u2500\u2500 build-debug/\n\u2502   |       \u251c\u2500\u2500 build-TinyORM-Desktop_Qt_5_15_2_MSVC2019_64bit-Debug/\n\u2502   |       \u2514\u2500\u2500 build-TinyORM-Desktop_Qt_5_15_2_MSYS2_UCRT64_64bit-Release/\n\u2502   \u2514\u2500\u2500 tom/\n\u2502       \u251c\u2500\u2500 tom/\n\u2502       \u2502   \u2514\u2500\u2500 database/\n\u2502       \u2502       \u251c\u2500\u2500 migrations/\n\u2502       \u2502       \u251c\u2500\u2500 seeders/\n\u2502       \u2502       \u251c\u2500\u2500 migrations.pri\n\u2502       \u2502       \u2514\u2500\u2500 seeders.pri\n\u2502       \u251c\u2500\u2500 tom-builds-cmake/\n\u2502       \u2502   \u2514\u2500\u2500 build-TinyORM-Desktop_Qt_6_5_3_MSVC2019_64bit-Debug/\n\u2502       \u2514\u2500\u2500 tom-builds-qmake/\n\u2502           \u251c\u2500\u2500 build-TinyORM-Desktop_Qt_5_15_3_MSYS2_UCRT64_64bit-Release/\n\u2502           \u2514\u2500\u2500 build-TinyORM-Desktop_Qt_6_5_3_MSVC2019_64bit-Debug/\n\u251c\u2500\u2500 tmp/\n\u2514\u2500\u2500 vcpkg/\n"))),(0,l.kt)(d.Z,{value:y.q5,label:y.C,className:"tiny-tree",mdxType:"TabItem"},(0,l.kt)("div",{className:"tiny-root-folder-info-wrapper"},(0,l.kt)("span",{className:"tiny-root-folder-info-prefix"},"Current bash path"),"\xa0",(0,l.kt)(N,{groupId:y.q5,mdxType:"RootFolder"})),(0,l.kt)(C,{groupId:y.q5,label:y.C,mdxType:"RootFolderInput"}),(0,l.kt)(C,{groupId:y.wU,label:y.wU,mdxType:"RootFolderInput"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\n\n\n\u251c\u2500\u2500\n\u2502   \u251c\u2500\u2500 HelloWorld/\n\u2502   |   \u251c\u2500\u2500 HelloWorld/\n\u2502   |   \u251c\u2500\u2500 HelloWorld-builds-cmake/\n\u2502   |   |   \u2514\u2500\u2500 build-debug/\n\u2502   |   \u2514\u2500\u2500 HelloWorld-builds-qmake/\n\u2502   |       \u2514\u2500\u2500 build-debug/\n\u2502   \u251c\u2500\u2500 TinyORM/\n\u2502   |   \u251c\u2500\u2500 TinyORM/\n\u2502   |   \u251c\u2500\u2500 TinyORM-builds-cmake/\n\u2502   |   \u2502   \u251c\u2500\u2500 build-gcc-debug/\n\u2502   |   \u2502   \u251c\u2500\u2500 build-gcc-release/\n\u2502   |   \u2502   \u2514\u2500\u2500 build-clang-debug/\n\u2502   |   \u2514\u2500\u2500 TinyORM-builds-qmake/\n\u2502   |       \u251c\u2500\u2500 build-debug/\n\u2502   |       \u251c\u2500\u2500 build-TinyORM-Desktop_Qt_5_15_2_GCC_64bit-Debug/\n\u2502   |       \u2514\u2500\u2500 build-TinyORM-Desktop_Qt_5_15_2_clang13_64bit_ccache-Release/\n\u2502   \u2514\u2500\u2500 tom/\n\u2502       \u251c\u2500\u2500 tom/\n\u2502       \u2502   \u2514\u2500\u2500 database/\n\u2502       \u2502       \u251c\u2500\u2500 migrations/\n\u2502       \u2502       \u251c\u2500\u2500 seeders/\n\u2502       \u2502       \u251c\u2500\u2500 migrations.pri\n\u2502       \u2502       \u2514\u2500\u2500 seeders.pri\n\u2502       \u251c\u2500\u2500 tom-builds-cmake/\n\u2502       \u2502   \u2514\u2500\u2500 build-TinyORM-Desktop_Qt_6_5_3_clang14_64bit_ccache-Debug/\n\u2502       \u2514\u2500\u2500 tom-builds-qmake/\n\u2502           \u251c\u2500\u2500 build-TinyORM-Desktop_Qt_6_5_3_GCC_64bit-Debug/\n\u2502           \u2514\u2500\u2500 build-TinyORM-Desktop_Qt_6_5_3_clang14_64bit_ccache-Release/\n\u251c\u2500\u2500 tmp/\n\u2514\u2500\u2500 vcpkg/\n")))),(0,l.kt)("admonition",{type:"danger"},(0,l.kt)("p",{parentName:"admonition"},"Avoid paths with spaces with the ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," build system, it will not compile.")),(0,l.kt)("a",{id:"qtcreator-default-build-directory"}),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"You can force the ",(0,l.kt)("inlineCode",{parentName:"p"},"QtCreator")," to generate a build folders structure as is described above."),(0,l.kt)("p",{parentName:"admonition"},"To generate the required folders structure set the ",(0,l.kt)("inlineCode",{parentName:"p"},"Settings")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"Build & Run")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"Default Build Properties")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"Default build directory")," to:",(0,l.kt)("br",null),"\n",(0,l.kt)("inlineCode",{parentName:"p"},'../%{Project:Name}-builds-%{BuildSystem:Name}/%{JS: Util.asciify("build-%{Project:Name}-%{Kit:FileSystemName}-%{BuildConfig:Name}")}'))),(0,l.kt)("h2",{id:"getting-started"},"Getting started"),(0,l.kt)("p",null,"Prepare compilation environment, we need to put the Qt Framework and Visual Studio MSVC compiler on the path on Windows. The compiler is already on the path on Linux and you can export ",(0,l.kt)("inlineCode",{parentName:"p"},"PATH")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"LD_LIBRARY_PATH")," for Qt Framework, or use our ",(0,l.kt)("inlineCode",{parentName:"p"},"qtenvX")," scripts described above."),(0,l.kt)(p.Z,{groupId:y.IZ,mdxType:"Tabs"},(0,l.kt)(d.Z,{value:y.Fo,label:y.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},`mkdir ${(0,u.EA)(y.Fo)}\ncd ${(0,u.EA)(y.Fo)}\n$env:Path = 'C:\\Qt\\6.5.3\\msvc2019_64\\bin;' + $env:Path\nvcvars64.ps1`)),(0,l.kt)(d.Z,{value:y.q5,label:y.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},`mkdir -p ${(0,u.EA)(y.q5)}\ncd ${(0,u.EA)(y.q5)}\nexport PATH=/opt/Qt/6.5.3/gcc_64/bin\${PATH:+:}$PATH\nexport LD_LIBRARY_PATH=/opt/Qt/6.5.3/gcc_64/lib\${LD_LIBRARY_PATH:+:}$LD_LIBRARY_PATH`))),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"You can also use the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/silverqx/TinyORM/blob/main/tools/Add-FolderOnPath.ps1"},(0,l.kt)("inlineCode",{parentName:"a"},"tools/Add-FolderOnPath.ps1"))," pwsh script to fastly prepend a path or ",(0,l.kt)("abbr",{title:"Current working directory"},"pwd")," on the system ",(0,l.kt)("inlineCode",{parentName:"p"},"PATH"),".")),(0,l.kt)("h2",{id:"vcpkg"},"vcpkg"),(0,l.kt)("p",null,"Installing the ",(0,l.kt)("inlineCode",{parentName:"p"},"vcpkg")," is highly recommended, it simplifies installation of the ",(0,l.kt)("inlineCode",{parentName:"p"},"range-v3")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"tabulate")," dependencies."),(0,l.kt)(p.Z,{groupId:y.IZ,mdxType:"Tabs"},(0,l.kt)(d.Z,{value:y.Fo,label:y.IM,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-powershell"},"git clone git@github.com:microsoft/vcpkg.git\ncd vcpkg\n.\\bootstrap-vcpkg.bat\n"))),(0,l.kt)(d.Z,{value:y.q5,label:y.C,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"git clone git@github.com:microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n")))),(0,l.kt)("p",null,"Add ",(0,l.kt)("inlineCode",{parentName:"p"},"vcpkg")," on the system path, add the following to the ",(0,l.kt)("inlineCode",{parentName:"p"},".bashrc")," or ",(0,l.kt)("inlineCode",{parentName:"p"},".zshrc")," on Linux."),(0,l.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},`export PATH=${(0,u.EA)(y.q5)}/vcpkg\${PATH:+:}$PATH`),(0,l.kt)("p",null,"On Windows, open the ",(0,l.kt)("inlineCode",{parentName:"p"},"Environment variables")," dialog and add ",(0,l.kt)("inlineCode",{parentName:"p"},"vcpkg")," on the user ",(0,l.kt)("inlineCode",{parentName:"p"},"PATH"),"."),(0,l.kt)("p",null,"Or you can export it for the current session only."),(0,l.kt)(p.Z,{groupId:y.IZ,mdxType:"Tabs"},(0,l.kt)(d.Z,{value:y.Fo,label:y.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},`$env:Path = "${(0,u.EA)(y.Fo,!1)}\\vcpkg;" + $env:Path`)),(0,l.kt)(d.Z,{value:y.q5,label:y.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},`export PATH=${(0,u.EA)(y.q5)}/vcpkg\${PATH:+:}$PATH`))),(0,l.kt)("h4",{id:"set-up-vcpkg-environment"},"Set up ",(0,l.kt)("inlineCode",{parentName:"h4"},"vcpkg")," environment"),(0,l.kt)("p",null,"To export ",(0,l.kt)("inlineCode",{parentName:"p"},"vcpkg")," environment variables globally, add it to the ",(0,l.kt)("inlineCode",{parentName:"p"},".bashrc")," or ",(0,l.kt)("inlineCode",{parentName:"p"},".zshrc")," on Linux, and you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"Environment variables")," dialog on Windows."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title='Linux'",title:"'Linux'"},'export VCPKG_DEFAULT_TRIPLET=x64-linux\n#export VCPKG_DEFAULT_HOST_TRIPLET=x64-linux\nexport VCPKG_MAX_CONCURRENCY=11\nexport VCPKG_OVERLAY_PORTS="$HOME/.local/share/vcpkg/ports"\nexport VCPKG_OVERLAY_TRIPLETS="$HOME/.local/share/vcpkg/triplets"\nexport VCPKG_ROOT="$HOME/Code/c/vcpkg"\n')),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"It is recommended to define these variables globally because the ",(0,l.kt)("inlineCode",{parentName:"p"},"CMake")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," build system are able to detect the ",(0,l.kt)("inlineCode",{parentName:"p"},"vcpkg")," installation from them so you don't have to configure them manually to detect the ",(0,l.kt)("inlineCode",{parentName:"p"},"vcpkg")," installation.")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"On Windows, it's always better to create these types of variables as user variables instead of system variables in the ",(0,l.kt)("inlineCode",{parentName:"p"},"Environment variables")," dialog.")),(0,l.kt)("h2",{id:"c-preprocessor-macros"},"C preprocessor macros"),(0,l.kt)("p",null,"The following table summarizes all the C preprocessor macros defined in the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library. These C macros are configured by ",(0,l.kt)("inlineCode",{parentName:"p"},"CMake")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," build systems. They are not sorted alphabetically, but they are sorted by how significant they are."),(0,l.kt)("p",null,"In the ",(0,l.kt)("inlineCode",{parentName:"p"},"CMake")," build system, all the C macros are auto-detected / auto-configured or controlled by ",(0,l.kt)("a",{parentName:"p",href:"#cmake-build-options"},(0,l.kt)("inlineCode",{parentName:"a"},"CMake build options")),", so you don't have to care too much about them."),(0,l.kt)("p",null,"In the ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," build is important whether you are building ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library or you are building your application and linking against ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library. When you are building the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library, all the C macros are auto-detected / auto-configured or controlled by ",(0,l.kt)("a",{parentName:"p",href:"#qmake-build-options"},(0,l.kt)("inlineCode",{parentName:"a"},"qmake build options")),", so you don't have to care too much about them."),(0,l.kt)("p",null,"But a special situation is when you are building your application / library and you are linking against ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library. In this particular case, you must configure all these C macros manually! For this reason, the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/silverqx/TinyORM/blob/main/qmake/TinyOrm.pri"},(0,l.kt)("inlineCode",{parentName:"a"},"TinyOrm.pri"))," has been created, so that's not a big deal either. Little more info ",(0,l.kt)("a",{parentName:"p",href:"#consume-tinyorm-library-qmake"},"here"),"."),(0,l.kt)("div",{id:"apitable-c-macros"},(0,l.kt)(r.Z,{mdxType:"APITable"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"C Macro Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINYORM_LINKING_SHARED")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("u",null,(0,l.kt)("strong",{parentName:"td"},"Must"))," be defined when you are linking against ",(0,l.kt)("inlineCode",{parentName:"td"},"TinyORM")," shared build (",(0,l.kt)("inlineCode",{parentName:"td"},"dll")," library), exported classes and functions will be tagged with ",(0,l.kt)("inlineCode",{parentName:"td"},"__declspec(dllimport)")," on ",(0,l.kt)("inlineCode",{parentName:"td"},"msvc")," and ",(0,l.kt)("inlineCode",{parentName:"td"},'visibility("default")')," on ",(0,l.kt)("inlineCode",{parentName:"td"},"GCC >= 4"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINYORM_BUILDING_SHARED")),(0,l.kt)("td",{parentName:"tr",align:null},"Defined when ",(0,l.kt)("inlineCode",{parentName:"td"},"TinyORM")," is built as a ",(0,l.kt)("inlineCode",{parentName:"td"},"dll")," library (shared build).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINYORM_DEBUG")),(0,l.kt)("td",{parentName:"tr",align:null},"Defined in the debug build.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINYORM_NO_DEBUG")),(0,l.kt)("td",{parentName:"tr",align:null},"Defined in the release build.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINYORM_DEBUG_SQL")),(0,l.kt)("td",{parentName:"tr",align:null},"Defined in the debug build.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINYORM_NO_DEBUG_SQL")),(0,l.kt)("td",{parentName:"tr",align:null},"Defined in the release build.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINYORM_MYSQL_PING")),(0,l.kt)("td",{parentName:"tr",align:null},"Enable ",(0,l.kt)("inlineCode",{parentName:"td"},"Orm::MySqlConnection::pingDatabase()")," method.",(0,l.kt)("br",null),(0,l.kt)("small",null,"Defined when ",(0,l.kt)("a",{parentName:"td",href:"#mysql_ping"},(0,l.kt)("inlineCode",{parentName:"a"},"mysql_ping"))," ",(0,l.kt)("small",null,"(qmake)")," / ",(0,l.kt)("a",{parentName:"td",href:"#MYSQL_PING"},(0,l.kt)("inlineCode",{parentName:"a"},"MYSQL_PING"))," ",(0,l.kt)("small",null,"(cmake)")," configuration ",(0,l.kt)("inlineCode",{parentName:"td"},"build option")," is enabled."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINYORM_DISABLE_ORM")),(0,l.kt)("td",{parentName:"tr",align:null},"Controls the compilation of all ",(0,l.kt)("inlineCode",{parentName:"td"},"ORM-related")," source code, when this macro  is ",(0,l.kt)("inlineCode",{parentName:"td"},"defined"),", then only the ",(0,l.kt)("inlineCode",{parentName:"td"},"query builder")," without ",(0,l.kt)("inlineCode",{parentName:"td"},"ORM")," is compiled. Also excludes ",(0,l.kt)("inlineCode",{parentName:"td"},"ORM-related")," unit tests.",(0,l.kt)("br",null),(0,l.kt)("small",null,"Defined when ",(0,l.kt)("a",{parentName:"td",href:"#disable_orm"},(0,l.kt)("inlineCode",{parentName:"a"},"disable_orm"))," ",(0,l.kt)("small",null,"(qmake)")," / ",(0,l.kt)("a",{parentName:"td",href:"#ORM"},(0,l.kt)("inlineCode",{parentName:"a"},"ORM"))," ",(0,l.kt)("small",null,"(cmake)")," configuration ",(0,l.kt)("inlineCode",{parentName:"td"},"build option")," is enabled ",(0,l.kt)("small",null,"(qmake)")," / disabled ",(0,l.kt)("small",null,"(cmake)"),"."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINYORM_EXTERN_CONSTANTS")),(0,l.kt)("td",{parentName:"tr",align:null},"Defined when extern constants are used. Extern constants are enabled by default for shared builds and disabled for static builds.",(0,l.kt)("br",null),(0,l.kt)("small",null,"Described at ",(0,l.kt)("a",{parentName:"td",href:"#extern_constants"},(0,l.kt)("inlineCode",{parentName:"a"},"qmake"))," / ",(0,l.kt)("a",{parentName:"td",href:"#INLINE_CONSTANTS"},(0,l.kt)("inlineCode",{parentName:"a"},"CMake"))," how it works."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINYORM_INLINE_CONSTANTS")),(0,l.kt)("td",{parentName:"tr",align:null},"Defined when global inline constants are used.",(0,l.kt)("br",null),(0,l.kt)("small",null,"Defined when ",(0,l.kt)("a",{parentName:"td",href:"#inline_constants"},(0,l.kt)("inlineCode",{parentName:"a"},"inline_constants"))," ",(0,l.kt)("small",null,"(qmake)")," / ",(0,l.kt)("a",{parentName:"td",href:"#INLINE_CONSTANTS"},(0,l.kt)("inlineCode",{parentName:"a"},"INLINE_CONSTANTS"))," ",(0,l.kt)("small",null,"(cmake)")," configuration ",(0,l.kt)("inlineCode",{parentName:"td"},"build option")," is enabled."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINYORM_TESTS_CODE")),(0,l.kt)("td",{parentName:"tr",align:null},"Enable code needed by unit tests, eg. connection overriding in the ",(0,l.kt)("inlineCode",{parentName:"td"},"Orm::Tiny::Model"),".",(0,l.kt)("br",null),(0,l.kt)("small",null,"Defined when ",(0,l.kt)("a",{parentName:"td",href:"#build_tests"},(0,l.kt)("inlineCode",{parentName:"a"},"build_tests"))," ",(0,l.kt)("small",null,"(qmake)")," / ",(0,l.kt)("a",{parentName:"td",href:"#BUILD_TESTS"},(0,l.kt)("inlineCode",{parentName:"a"},"BUILD_TESTS"))," ",(0,l.kt)("small",null,"(cmake)")," configuration ",(0,l.kt)("inlineCode",{parentName:"td"},"build option")," is enabled."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINYORM_DISABLE_THREAD_LOCAL")),(0,l.kt)("td",{parentName:"tr",align:null},"Remove all ",(0,l.kt)("a",{parentName:"td",href:"https://en.cppreference.com/w/c/language/storage_duration"},(0,l.kt)("inlineCode",{parentName:"a"},"thread_local"))," storage duration specifiers, it disables multi-threading support.",(0,l.kt)("br",null),(0,l.kt)("small",null,"Defined when ",(0,l.kt)("a",{parentName:"td",href:"#disable_thread_local"},(0,l.kt)("inlineCode",{parentName:"a"},"disable_thread_local"))," ",(0,l.kt)("small",null,"(qmake)")," / ",(0,l.kt)("a",{parentName:"td",href:"#DISABLE_THREAD_LOCAL"},(0,l.kt)("inlineCode",{parentName:"a"},"DISABLE_THREAD_LOCAL"))," ",(0,l.kt)("small",null,"(cmake)")," configuration ",(0,l.kt)("inlineCode",{parentName:"td"},"build option")," is enabled."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINYTOM_MIGRATIONS_DIR")),(0,l.kt)("td",{parentName:"tr",align:null},"Default migrations path for the ",(0,l.kt)("inlineCode",{parentName:"td"},"make:migration")," command, can be an absolute or relative path (to the ",(0,l.kt)("abbr",{title:"Current working directory"},"pwd"),").",(0,l.kt)("br",null),(0,l.kt)("small",null,"Default value: ",(0,l.kt)("inlineCode",{parentName:"td"},"database/migrations")," ",(0,l.kt)("small",null,"(relative to the pwd)")),(0,l.kt)("br",null),(0,l.kt)("small",null,"Defined by ",(0,l.kt)("a",{parentName:"td",href:"#TOM_MIGRATIONS_DIR"},(0,l.kt)("inlineCode",{parentName:"a"},"TOM_MIGRATIONS_DIR"))," ",(0,l.kt)("small",null,"(cmake)")," configuration build option.",(0,l.kt)("br",null),(0,l.kt)("small",null,"(qmake note) You can use ",(0,l.kt)("inlineCode",{parentName:"td"},'DEFINES += TINYTOM_MIGRATIONS_DIR="\\"database/migrations\\""')," on the command-line or set it in the ",(0,l.kt)("strong",{parentName:"td"},"main")," ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/silverqx/TinyORM/blob/main/conf.pri.example#L65-L70"},(0,l.kt)("inlineCode",{parentName:"a"},"conf.pri"))," file.")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINYTOM_MODELS_DIR")),(0,l.kt)("td",{parentName:"tr",align:null},"Default models path for the ",(0,l.kt)("inlineCode",{parentName:"td"},"make:model")," command, can be an absolute or relative path (to the ",(0,l.kt)("abbr",{title:"Current working directory"},"pwd"),").",(0,l.kt)("br",null),(0,l.kt)("small",null,"Default value: ",(0,l.kt)("inlineCode",{parentName:"td"},"database/models")," ",(0,l.kt)("small",null,"(relative to the pwd)")),(0,l.kt)("br",null),(0,l.kt)("small",null,"Defined by ",(0,l.kt)("a",{parentName:"td",href:"#TOM_MODELS_DIR"},(0,l.kt)("inlineCode",{parentName:"a"},"TOM_MODELS_DIR"))," ",(0,l.kt)("small",null,"(cmake)")," configuration build option.",(0,l.kt)("br",null),(0,l.kt)("small",null,"(qmake note) You can use ",(0,l.kt)("inlineCode",{parentName:"td"},'DEFINES += TINYTOM_MODELS_DIR="\\"database/models\\""')," on the command-line or set it in the ",(0,l.kt)("strong",{parentName:"td"},"main")," ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/silverqx/TinyORM/blob/main/conf.pri.example#L72-L73"},(0,l.kt)("inlineCode",{parentName:"a"},"conf.pri"))," file.")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINYTOM_SEEDERS_DIR")),(0,l.kt)("td",{parentName:"tr",align:null},"Default seeders path for the ",(0,l.kt)("inlineCode",{parentName:"td"},"make:seeder")," command, can be an absolute or relative path (to the ",(0,l.kt)("abbr",{title:"Current working directory"},"pwd"),").",(0,l.kt)("br",null),(0,l.kt)("small",null,"Default value: ",(0,l.kt)("inlineCode",{parentName:"td"},"database/seeders")," ",(0,l.kt)("small",null,"(relative to the pwd)")),(0,l.kt)("br",null),(0,l.kt)("small",null,"Defined by ",(0,l.kt)("a",{parentName:"td",href:"#TOM_SEEDERS_DIR"},(0,l.kt)("inlineCode",{parentName:"a"},"TOM_SEEDERS_DIR"))," ",(0,l.kt)("small",null,"(cmake)")," configuration build option.",(0,l.kt)("br",null),(0,l.kt)("small",null,"(qmake note) You can use ",(0,l.kt)("inlineCode",{parentName:"td"},'DEFINES += TINYTOM_SEEDERS_DIR="\\"database/seeders\\""')," on the command-line or set it in the ",(0,l.kt)("strong",{parentName:"td"},"main")," ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/silverqx/TinyORM/blob/main/conf.pri.example#L75-L76"},(0,l.kt)("inlineCode",{parentName:"a"},"conf.pri"))," file.")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINYORM_USING_PCH")),(0,l.kt)("td",{parentName:"tr",align:null},"Defined if building with precompiled headers.",(0,l.kt)("br",null),(0,l.kt)("small",null,"Controlled by ",(0,l.kt)("a",{parentName:"td",href:"#precompile_header"},(0,l.kt)("inlineCode",{parentName:"a"},"qmake"))," / ",(0,l.kt)("a",{parentName:"td",href:"#CMAKE_DISABLE_PRECOMPILE_HEADERS"},(0,l.kt)("inlineCode",{parentName:"a"},"CMake")),"."))))))),(0,l.kt)("h2",{id:"building-with-cmake"},"Building with CMake"),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"If something is not clear, you can still look at GitHub Action ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/silverqx/TinyORM/tree/main/.github/workflows"},(0,l.kt)("inlineCode",{parentName:"a"},"workflows"))," how a building is done.")),(0,l.kt)("p",null,"First, create a basic folder structure and then clone the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," project."),(0,l.kt)(p.Z,{groupId:y.IZ,mdxType:"Tabs"},(0,l.kt)(d.Z,{value:y.Fo,label:y.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},`cd ${(0,u.EA)(y.Fo)}\nmkdir ${(0,u.AE)()}/TinyORM/TinyORM-builds-cmake/build-debug\n\ncd ${(0,u.AE)()}/TinyORM\ngit clone git@github.com:silverqx/TinyORM.git`)),(0,l.kt)(d.Z,{value:y.q5,label:y.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},`cd ${(0,u.EA)(y.q5)}\nmkdir -p ${(0,u.AE)()}/TinyORM/TinyORM-builds-cmake/build-debug\n\ncd ${(0,u.AE)()}/TinyORM\ngit clone git@github.com:silverqx/TinyORM.git`))),(0,l.kt)("h3",{id:"configure-and-build-cmake"},"Configure & Build ",(0,l.kt)("small",null,"(cmake)")),(0,l.kt)("p",null,"Now you are ready to configure the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd TinyORM-builds-cmake/build-debug\n")),(0,l.kt)(p.Z,{groupId:y.IZ,mdxType:"Tabs"},(0,l.kt)(d.Z,{value:y.Fo,label:y.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},`cmake.exe \`\n-S "${(0,u.go)(y.Fo)}/TinyORM/TinyORM" \`\n-B "${(0,u.go)(y.Fo)}/TinyORM/TinyORM-builds-cmake/build-debug" \`\n-G 'Ninja' \`\n-D CMAKE_BUILD_TYPE:STRING='Debug' \`\n-D CMAKE_TOOLCHAIN_FILE:FILEPATH="${(0,u.EA)(y.Fo)}/vcpkg/scripts/buildsystems/vcpkg.cmake" \`\n-D CMAKE_INSTALL_PREFIX:PATH="${(0,u.EA)(y.Fo)}/tmp/TinyORM" \`\n-D BUILD_TESTS:BOOL=OFF \`\n-D MATCH_EQUAL_EXPORTED_BUILDTREE:BOOL=ON \`\n-D MYSQL_PING:BOOL=OFF \`\n-D TOM:BOOL=ON \`\n-D TOM_EXAMPLE:BOOL=OFF \`\n-D VERBOSE_CONFIGURE:BOOL=ON`)),(0,l.kt)(d.Z,{value:y.q5,label:y.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},`cmake \\\n-S "${(0,u.go)(y.q5)}/TinyORM/TinyORM" \\\n-B "${(0,u.go)(y.q5)}/TinyORM/TinyORM-builds-cmake/build-debug" \\\n-G 'Ninja' \\\n-D CMAKE_BUILD_TYPE:STRING='Debug' \\\n-D CMAKE_TOOLCHAIN_FILE:FILEPATH="${(0,u.EA)(y.q5)}/vcpkg/scripts/buildsystems/vcpkg.cmake" \\\n-D CMAKE_INSTALL_PREFIX:PATH="${(0,u.EA)(y.q5)}/tmp/TinyORM" \\\n-D VERBOSE_CONFIGURE:BOOL=ON \\\n-D BUILD_TESTS:BOOL=OFF \\\n-D MYSQL_PING:BOOL=OFF \\\n-D TOM:BOOL=ON \\\n-D TOM_EXAMPLE:BOOL=OFF \\\n-D MATCH_EQUAL_EXPORTED_BUILDTREE:BOOL=ON`))),(0,l.kt)("h5",{id:"cmake-strict_mode-option"},"CMake ",(0,l.kt)("inlineCode",{parentName:"h5"},"STRICT_MODE")," option"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"STRICT_MODE")," ",(0,l.kt)("inlineCode",{parentName:"p"},"CMake")," configuration option was added in ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," ",(0,l.kt)("inlineCode",{parentName:"p"},"v0.36.4"),". This option was added to avoid the propagation of aggressive strict warning compiler/linker options and Qt definitions from the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library to user code through the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/silverqx/TinyORM/blob/main/cmake/CommonModules/TinyCommon.cmake"},(0,l.kt)("inlineCode",{parentName:"a"},"TinyOrm::CommonConfig"))," interface library."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," uses the strictest warning level options, virtually anything that can be enabled is enabled to produce a better code. I highly recommend enabling this option to produce better code and to follow good practices. It also helps to follow the ",(0,l.kt)("inlineCode",{parentName:"p"},"ISOCPP")," ",(0,l.kt)("a",{parentName:"p",href:"https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines"},"C++ Core Guidelines")," standards."),(0,l.kt)("p",null,"If you want to enable these strict warning options in your code, you can enable the ",(0,l.kt)("inlineCode",{parentName:"p"},"STRICT_MODE")," ",(0,l.kt)("inlineCode",{parentName:"p"},"CMake")," configuration option and they will be propagated to your code. You can also enabled it globally using the ",(0,l.kt)("inlineCode",{parentName:"p"},"TINYORM_STRICT_MODE")," environment variable, and the value of this environment variable will be picked up during initial CMake configuration as the default value for the ",(0,l.kt)("inlineCode",{parentName:"p"},"STRICT_MODE")," ",(0,l.kt)("inlineCode",{parentName:"p"},"CMake")," configuration option."),(0,l.kt)("p",null,"You can achieve the same result by manually linking against the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyOrm::CommonConfig")," interface library when the ",(0,l.kt)("inlineCode",{parentName:"p"},"STRICT_MODE")," is set to ",(0,l.kt)("inlineCode",{parentName:"p"},"OFF"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cmake"},"target_link_libraries(<target> PRIVATE TinyOrm::CommonConfig)\n")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"The recommended way is to set the ",(0,l.kt)("inlineCode",{parentName:"p"},"TINYORM_STRICT_MODE")," environment variable to ",(0,l.kt)("inlineCode",{parentName:"p"},"1")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"ON"),".")),(0,l.kt)("h4",{id:"build-tinyorm"},"Build TinyORM"),(0,l.kt)("p",null,"And build. You don't have to install it, you can use the build tree directly if you want."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cmake --build . --target all\ncmake --install .\n")),(0,l.kt)("p",null,"Or build and install in one step."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cmake --build . --target install\n")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"CMake multi-config generators like ",(0,l.kt)("inlineCode",{parentName:"p"},"Ninja Multi-Config")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"Visual Studio 16 2019")," are also supported.")),(0,l.kt)("h3",{id:"cmake-build-options"},"CMake build options"),(0,l.kt)("div",{className:"apitable-build-options"},(0,l.kt)(r.Z,{mdxType:"APITable"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"BUILD_SHARED_LIBS")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ON")),(0,l.kt)("td",{parentName:"tr",align:null},"Build as a shared/static library.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"BUILD_TESTS")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Build TinyORM unit tests.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INLINE_CONSTANTS")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Use inline constants instead of extern constants in the ",(0,l.kt)("inlineCode",{parentName:"td"},"shared build"),".",(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},"OFF")," is highly recommended for the ",(0,l.kt)("inlineCode",{parentName:"td"},"shared build"),";",(0,l.kt)("br",null),"is always ",(0,l.kt)("inlineCode",{parentName:"td"},"ON")," for the ",(0,l.kt)("inlineCode",{parentName:"td"},"static build"),".",(0,l.kt)("br",null),(0,l.kt)("small",null,"Available when: ",(0,l.kt)("inlineCode",{parentName:"td"},"BUILD_SHARED_LIBS")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MSVC_RUNTIME_DYNAMIC")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ON")),(0,l.kt)("td",{parentName:"tr",align:null},"Use MSVC dynamic runtime library (",(0,l.kt)("inlineCode",{parentName:"td"},"-MD"),") instead of static (",(0,l.kt)("inlineCode",{parentName:"td"},"-MT"),"), also considers a Debug configuration (",(0,l.kt)("inlineCode",{parentName:"td"},"-MTd"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"-MDd"),").",(0,l.kt)("br",null),(0,l.kt)("small",null,"Available when: ",(0,l.kt)("inlineCode",{parentName:"td"},"MSVC AND NOT DEFINED CMAKE_MSVC_RUNTIME_LIBRARY")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MYSQL_PING")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Enable ",(0,l.kt)("inlineCode",{parentName:"td"},"Orm::MySqlConnection::pingDatabase()")," method.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ORM")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ON")),(0,l.kt)("td",{parentName:"tr",align:null},"Controls the compilation of all ",(0,l.kt)("inlineCode",{parentName:"td"},"ORM-related")," source code, when this option is ",(0,l.kt)("inlineCode",{parentName:"td"},"disabled"),", then only the ",(0,l.kt)("inlineCode",{parentName:"td"},"query builder")," without ",(0,l.kt)("inlineCode",{parentName:"td"},"ORM")," is compiled. Also excludes ",(0,l.kt)("inlineCode",{parentName:"td"},"ORM-related")," unit tests.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"STRICT_MODE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Controls propagation of strict compiler/linker options and Qt definitions using the ",(0,l.kt)("inlineCode",{parentName:"td"},"TinyOrm::CommonConfig")," interface library to the user code.",(0,l.kt)("br",null),(0,l.kt)("small",null,"(highly recommended; can also be set with the ",(0,l.kt)("inlineCode",{parentName:"td"},"TINYORM_STRICT_MODE")," environment variable; described ",(0,l.kt)("a",{parentName:"td",href:"#cmake-strict_mode-option"},"here"),")"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TOM")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ON")),(0,l.kt)("td",{parentName:"tr",align:null},"Controls the compilation of all ",(0,l.kt)("inlineCode",{parentName:"td"},"Tom-related")," source code, when this option is ",(0,l.kt)("inlineCode",{parentName:"td"},"disabled"),", then it also excludes ",(0,l.kt)("inlineCode",{parentName:"td"},"Tom-related")," unit tests.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TOM_EXAMPLE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Build the ",(0,l.kt)("abbr",{title:"TinyORM Migrations"},(0,l.kt)("inlineCode",{parentName:"td"},"tom"))," console application example.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TOM_MIGRATIONS_DIR")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-")),(0,l.kt)("td",{parentName:"tr",align:null},"Default migrations path for the ",(0,l.kt)("inlineCode",{parentName:"td"},"make:migration")," command, can be an absolute or relative path (to the ",(0,l.kt)("abbr",{title:"Current working directory"},"pwd"),").",(0,l.kt)("br",null),(0,l.kt)("small",null,"Default value: ",(0,l.kt)("inlineCode",{parentName:"td"},"database/migrations")," ",(0,l.kt)("small",null,"(relative to the pwd)")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TOM_MODELS_DIR")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-")),(0,l.kt)("td",{parentName:"tr",align:null},"Default models path for the ",(0,l.kt)("inlineCode",{parentName:"td"},"make:model")," command, can be an absolute or relative path (to the ",(0,l.kt)("abbr",{title:"Current working directory"},"pwd"),").",(0,l.kt)("br",null),(0,l.kt)("small",null,"Default value: ",(0,l.kt)("inlineCode",{parentName:"td"},"database/models")," ",(0,l.kt)("small",null,"(relative to the pwd)")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TOM_SEEDERS_DIR")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-")),(0,l.kt)("td",{parentName:"tr",align:null},"Default seeders path for the ",(0,l.kt)("inlineCode",{parentName:"td"},"make:seeder")," command, can be an absolute or relative path (to the ",(0,l.kt)("abbr",{title:"Current working directory"},"pwd"),").",(0,l.kt)("br",null),(0,l.kt)("small",null,"Default value: ",(0,l.kt)("inlineCode",{parentName:"td"},"database/seeders")," ",(0,l.kt)("small",null,"(relative to the pwd)")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"VERBOSE_CONFIGURE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Show information about ",(0,l.kt)("inlineCode",{parentName:"td"},"PACKAGES_FOUND")," / ",(0,l.kt)("inlineCode",{parentName:"td"},"PACKAGES_NOT_FOUND")," in the CMake configure output.")))))),(0,l.kt)("p",null,"Advanced ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," options."),(0,l.kt)("div",{className:"apitable-build-options"},(0,l.kt)(r.Z,{mdxType:"APITable"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DISABLE_THREAD_LOCAL")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Remove all ",(0,l.kt)("a",{parentName:"td",href:"https://en.cppreference.com/w/c/language/storage_duration"},(0,l.kt)("inlineCode",{parentName:"a"},"thread_local"))," storage duration specifiers, it disables multi-threading support.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("small",null,(0,l.kt)("inlineCode",{parentName:"td"},"MATCH_EQUAL_EXPORTED_BUILDTREE"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Exported package configuration from the build tree is considered to match only when ",(0,l.kt)("inlineCode",{parentName:"td"},"the build type")," of application/library that is linking against the TinyORM library ",(0,l.kt)("strong",{parentName:"td"},"is equal"),".",(0,l.kt)("br",null),(0,l.kt)("small",null,"Available when:",(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},"CMAKE_EXPORT_PACKAGE_REGISTRY AND NOT TINY_IS_MULTI_CONFIG")))))))),(0,l.kt)("p",null,"Important ",(0,l.kt)("inlineCode",{parentName:"p"},"CMake")," options."),(0,l.kt)("div",{className:"apitable-build-options"},(0,l.kt)(r.Z,{mdxType:"APITable"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"CMAKE_DISABLE_PRECOMPILE_HEADERS")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Disable precompiled headers.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"CMAKE_CXX_COMPILER")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"auto")),(0,l.kt)("td",{parentName:"tr",align:null},"The full path to the ",(0,l.kt)("inlineCode",{parentName:"td"},"C++")," compiler.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"CMAKE_CXX_COMPILER_LAUNCHER")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-")),(0,l.kt)("td",{parentName:"tr",align:null},"Default compiler launcher to use for the ",(0,l.kt)("inlineCode",{parentName:"td"},"C++")," compiler.",(0,l.kt)("br",null),"Can be used to enable ",(0,l.kt)("inlineCode",{parentName:"td"},"ccache"),", eg. ",(0,l.kt)("inlineCode",{parentName:"td"},"ccache.exe")," on ",(0,l.kt)("inlineCode",{parentName:"td"},"MinGW")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"/usr/bin/ccache")," on ",(0,l.kt)("inlineCode",{parentName:"td"},"Linux"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"CMAKE_EXPORT_PACKAGE_REGISTRY")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ON")),(0,l.kt)("td",{parentName:"tr",align:null},"Enable the ",(0,l.kt)("inlineCode",{parentName:"td"},"export(TinyOrm)")," command.",(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},"TinyORM")," sets this variable to ",(0,l.kt)("inlineCode",{parentName:"td"},"ON")," by default.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"CMAKE_VERBOSE_MAKEFILE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Enable verbose output from Makefile builds.")))))),(0,l.kt)("h3",{id:"consume-tinyorm-library-cmake"},"Consume TinyOrm library ",(0,l.kt)("small",null,"(cmake)")),(0,l.kt)("p",null,"In your application or library ",(0,l.kt)("inlineCode",{parentName:"p"},"CMakeLists.txt")," file add following ",(0,l.kt)("inlineCode",{parentName:"p"},"find_package()")," call."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cmake",metastring:"title='CMakeLists.txt'",title:"'CMakeLists.txt'"},"find_package(TinyOrm 0.36.4 CONFIG REQUIRED)\n")),(0,l.kt)("p",null,"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," build tree is not exported to the CMake's ",(0,l.kt)("a",{parentName:"p",href:"https://cmake.org/cmake/help/latest/manual/cmake-packages.7.html#user-package-registry"},(0,l.kt)("inlineCode",{parentName:"a"},"User Package Registry"))," then also add the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," build tree or ",(0,l.kt)("inlineCode",{parentName:"p"},"CMAKE_INSTALL_PREFIX")," folder to the ",(0,l.kt)("inlineCode",{parentName:"p"},"CMAKE_PREFIX_PATH"),", so CMake can find TinyORM's package configuration file during ",(0,l.kt)("inlineCode",{parentName:"p"},"find_package(TinyOrm)")," call."),(0,l.kt)(p.Z,{groupId:y.IZ,mdxType:"Tabs"},(0,l.kt)(d.Z,{value:y.Fo,label:`cmake (${y.Fo})`,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-cmake",mdxType:"CodeBlock"},`# build tree\nlist(APPEND CMAKE_PREFIX_PATH "${(0,u.we)(y.Fo,(0,u.go)(y.Fo))}/TinyORM/TinyORM-builds-cmake/build-debug")\n\n# installation folder - CMAKE_INSTALL_PREFIX\nlist(APPEND CMAKE_PREFIX_PATH "${(0,u.we)(y.Fo,(0,u.EA)(y.Fo))}/tmp/TinyORM")`)),(0,l.kt)(d.Z,{value:y.q5,label:`cmake (${y.q5})`,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-cmake",mdxType:"CodeBlock"},`# build tree\nlist(APPEND CMAKE_PREFIX_PATH "${(0,u.we)(y.q5,(0,u.go)(y.q5))}/TinyORM/TinyORM-builds-cmake/build-debug")\n\n# installation folder - CMAKE_INSTALL_PREFIX\nlist(APPEND CMAKE_PREFIX_PATH "${(0,u.we)(y.q5,(0,u.EA)(y.q5))}/tmp/TinyORM")`))),(0,l.kt)("p",null,"Or as an alternative, you can set ",(0,l.kt)("inlineCode",{parentName:"p"},"CMAKE_PREFIX_PATH")," environment variable."),(0,l.kt)("a",{id:"tinyorm-on-path-cmake"}),(0,l.kt)("p",null,"As the last thing, do not forget to add ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyOrm0d.dll")," on the path on Windows and on the ",(0,l.kt)("inlineCode",{parentName:"p"},"LD_LIBRARY_PATH")," on Linux, so your application can find it during execution."),(0,l.kt)(p.Z,{groupId:y.IZ,name:"tinyorm-on-path",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:y.Fo,label:y.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},`$env:Path = "${(0,u.go)(y.Fo,!1)}\\TinyORM\\TinyORM-builds-cmake\\build-debug;" + $env:Path`)),(0,l.kt)(d.Z,{value:y.q5,label:y.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},`export LD_LIBRARY_PATH=${(0,u.go)(y.q5)}/TinyORM/TinyORM-builds-cmake/build-debug\${PATH:+:}$PATH`))),(0,l.kt)("p",null,"Now you can try the ",(0,l.kt)("a",{parentName:"p",href:"/building/hello-world#hello-world-with-cmake"},(0,l.kt)("inlineCode",{parentName:"a"},"HelloWorld CMake"))," example."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"You can also try the ",(0,l.kt)("a",{parentName:"p",href:"/building/hello-world#fetchcontent"},(0,l.kt)("inlineCode",{parentName:"a"},"FetchContent"))," method to fastly link against the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library.")),(0,l.kt)("h2",{id:"building-with-qmake"},"Building with qmake"),(0,l.kt)("p",null,"First, create a basic folder structure and then clone the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," project."),(0,l.kt)(p.Z,{groupId:y.IZ,mdxType:"Tabs"},(0,l.kt)(d.Z,{value:y.Fo,label:y.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},`cd ${(0,u.EA)(y.Fo)}\nmkdir ${(0,u.AE)()}/TinyORM/TinyORM-builds-qmake\n\ncd ${(0,u.AE)()}/TinyORM\ngit clone git@github.com:silverqx/TinyORM.git`)),(0,l.kt)(d.Z,{value:y.q5,label:y.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},`cd ${(0,u.EA)(y.q5)}\nmkdir -p ${(0,u.AE)()}/TinyORM/TinyORM-builds-qmake\n\ncd ${(0,u.AE)()}/TinyORM\ngit clone git@github.com:silverqx/TinyORM.git`))),(0,l.kt)("h3",{id:"install-dependencies"},"Install dependencies"),(0,l.kt)("p",null,"With the ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," build system, you have to install ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," dependencies manually. We will use the ",(0,l.kt)("inlineCode",{parentName:"p"},"vcpkg")," package manager."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd ../../vcpkg\n\nvcpkg search range-v3\nvcpkg search tabulate\nvcpkg install range-v3 tabulate\nvcpkg list\n")),(0,l.kt)("p",null,"On ",(0,l.kt)("inlineCode",{parentName:"p"},"Linux"),", you can install the ",(0,l.kt)("inlineCode",{parentName:"p"},"range-v3")," library and some other ",(0,l.kt)("a",{parentName:"p",href:"/dependencies#install-dependencies"},"dependencies")," with the package manager."),(0,l.kt)("h3",{id:"configure-and-build-qmake"},"Configure & Build ",(0,l.kt)("small",null,"(qmake)")),(0,l.kt)("h4",{id:"open-qtcreator-ide"},"Open QtCreator IDE"),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"I recommend creating a new ",(0,l.kt)("a",{parentName:"p",href:"https://doc.qt.io/qtcreator/creator-project-managing-sessions.html"},(0,l.kt)("inlineCode",{parentName:"a"},"Session"))," in the ",(0,l.kt)("inlineCode",{parentName:"p"},"QtCreator"),", this way you will have all the examples in one place and as a bonus, everything will be in the same place when you close and reopen ",(0,l.kt)("inlineCode",{parentName:"p"},"QtCreator IDE"),". You can name it ",(0,l.kt)("inlineCode",{parentName:"p"},"tinyorm.org")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM examples"),", it is up to you.")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"If you are using sessions, you can use a single ",(0,l.kt)("inlineCode",{parentName:"p"},"clangd")," instance for all projects in this session in the ",(0,l.kt)("inlineCode",{parentName:"p"},"QtCreator IDE"),". One significant advantage of this method is that the ",(0,l.kt)("inlineCode",{parentName:"p"},".qtc_clangd/")," folder will not be created in the build folder, but will be stored globally in the Roaming profile. You can enable it in the ",(0,l.kt)("inlineCode",{parentName:"p"},"Settings")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"C++")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"Clangd")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"Sessions with a single clangd instance"),".")),(0,l.kt)("h4",{id:"configure-tinyorm"},"Configure TinyORM"),(0,l.kt)("p",null,"Now you are ready to configure the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library. There are two ways how to configure the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library and it's the new ",(0,l.kt)("inlineCode",{parentName:"p"},"Auto-configure")," feature added in ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," ",(0,l.kt)("inlineCode",{parentName:"p"},"v0.34.0")," using the ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," files and the old way using the ",(0,l.kt)("inlineCode",{parentName:"p"},"conf.pri")," files."),(0,l.kt)("h5",{id:"auto-configuration-and-tiny_dotenv"},"Auto-configuration and tiny_dotenv"),(0,l.kt)("p",null,"This is the new recommended method to auto-configure TinyORM's ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," build system and also the dependencies, it was added in ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," ",(0,l.kt)("inlineCode",{parentName:"p"},"v0.34.0"),". You need to copy the prepared ",(0,l.kt)("inlineCode",{parentName:"p"},".env.(win32|unix|mingw).example")," file to the ",(0,l.kt)("inlineCode",{parentName:"p"},".env.(win32|unix|mingw)"),". One ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," example file is prepared for each supported platform."),(0,l.kt)("p",null,"All prepared ",(0,l.kt)("inlineCode",{parentName:"p"},".env.(win32|unix|mingw).example")," files are simple and clear. You can also create a common ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," file that is included before the platform-specific ",(0,l.kt)("inlineCode",{parentName:"p"},".env.(win32|unix|mingw)")," files."),(0,l.kt)(p.Z,{groupId:y.IZ,mdxType:"Tabs"},(0,l.kt)(d.Z,{value:y.Fo,label:y.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},`cd ${(0,u.go)(y.Fo)}/TinyORM/TinyORM\n\ncp .env.win32.example .env.win32`)),(0,l.kt)(d.Z,{value:y.q5,label:y.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},`cd ${(0,u.go)(y.q5)}/TinyORM/TinyORM\n\ncp .env.unix.example .env.unix`))),(0,l.kt)("p",null,"And that is all, if you have correctly set all ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," variables in this ",(0,l.kt)("inlineCode",{parentName:"p"},".env.(win32|unix|mingw)")," file or you have correctly set environment variables, then the ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," build system should be able to ",(0,l.kt)("inlineCode",{parentName:"p"},"auto-detect")," all dependencies . \ud83d\udd25"),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("a",{parentName:"p",href:"#auto-configuration-internals"},(0,l.kt)("inlineCode",{parentName:"a"},"Auto-configuration"))," and ",(0,l.kt)("a",{parentName:"p",href:"#environment-files"},(0,l.kt)("inlineCode",{parentName:"a"},"Environment files"))," internals are described at the end to make this section more clear.")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Auto-configuration")," feature can be turned off using the ",(0,l.kt)("a",{parentName:"p",href:"#disable_autoconf"},(0,l.kt)("inlineCode",{parentName:"a"},"disable_autoconf"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," configuration option (eg. ",(0,l.kt)("inlineCode",{parentName:"p"},"CONFIG*=disable_autoconf"),").")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"tiny_dotenv")," feature can be turned off using the ",(0,l.kt)("a",{parentName:"p",href:"#disable_dotenv"},(0,l.kt)("inlineCode",{parentName:"a"},"disable_dotenv"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," configuration option (eg. ",(0,l.kt)("inlineCode",{parentName:"p"},"CONFIG*=disable_dotenv"),").")),(0,l.kt)("h5",{id:"manual-configuration-confpri"},"Manual configuration (conf.pri)"),(0,l.kt)("p",null,"This is the old method used before ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," ",(0,l.kt)("inlineCode",{parentName:"p"},"v0.34.0"),". You need to copy the ",(0,l.kt)("inlineCode",{parentName:"p"},"conf.pri.example")," files to ",(0,l.kt)("inlineCode",{parentName:"p"},"conf.pri")," (there are four, one for every project or sub-project) and manually update the ",(0,l.kt)("inlineCode",{parentName:"p"},"INCLUDEPATH")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"LIBS")," to configure TinyORM's ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," build dependencies. This way you can override any ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," build options or variables."),(0,l.kt)("p",null,"To disable the ",(0,l.kt)("a",{parentName:"p",href:"#auto-configuration-internals"},(0,l.kt)("inlineCode",{parentName:"a"},"Auto-configuration"))," feature you must define the ",(0,l.kt)("a",{parentName:"p",href:"#disable_autoconf"},(0,l.kt)("inlineCode",{parentName:"a"},"disable_autoconf"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," configuration option (eg. ",(0,l.kt)("inlineCode",{parentName:"p"},"CONFIG*=disable_autoconf"),") because from ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," ",(0,l.kt)("inlineCode",{parentName:"p"},"v0.34.0")," is the ",(0,l.kt)("inlineCode",{parentName:"p"},"Auto-configuration")," feature enabled by default."),(0,l.kt)("p",null,"You can also remove all ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," files or turn off the ",(0,l.kt)("inlineCode",{parentName:"p"},"tiny_dotenv")," feature using ",(0,l.kt)("inlineCode",{parentName:"p"},"CONFIG*=disable_dotenv"),". You can use them all at once if you want, ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," and also ",(0,l.kt)("inlineCode",{parentName:"p"},"conf.pri")," files."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"conf.pri")," files are nicely commented on, so you can see what needs to be modified."),(0,l.kt)(p.Z,{groupId:y.IZ,mdxType:"Tabs"},(0,l.kt)(d.Z,{value:y.Fo,label:y.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},`cd ${(0,u.go)(y.Fo)}/TinyORM/TinyORM\n\ncp conf.pri.example conf.pri\ncp tests/conf.pri.example tests/conf.pri\ncp tests/testdata_tom/conf.pri.example tests/testdata_tom/conf.pri\ncp examples/tom/conf.pri.example examples/tom/conf.pri`)),(0,l.kt)(d.Z,{value:y.q5,label:y.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},`cd ${(0,u.go)(y.q5)}/TinyORM/TinyORM\n\ncp conf.pri.example conf.pri\ncp tests/conf.pri.example tests/conf.pri\ncp tests/testdata_tom/conf.pri.example tests/testdata_tom/conf.pri\ncp examples/tom/conf.pri.example examples/tom/conf.pri`))),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("a",{parentName:"p",href:"#manual-configuration-internals"},(0,l.kt)("inlineCode",{parentName:"a"},"Manual configuration"))," internals are described at the end to make this section more clear.")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Manual configuration")," is still relevant if you have any non-standard installation of the ",(0,l.kt)("inlineCode",{parentName:"p"},"vcpkg")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"MySQL")," and the ",(0,l.kt)("inlineCode",{parentName:"p"},"Auto-configuration")," feature fails.")),(0,l.kt)("h5",{id:"opening-tinyormpro-main-project-file"},"Opening TinyORM.pro (main project file)"),(0,l.kt)("p",null,"Now you can open the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM.pro")," project in the ",(0,l.kt)("inlineCode",{parentName:"p"},"QtCreator IDE"),"."),(0,l.kt)("p",null,"This will open the ",(0,l.kt)("inlineCode",{parentName:"p"},"Configure Project")," tab, select some kit and update build folder paths to meet our ",(0,l.kt)("a",{parentName:"p",href:"#folders-structure"},"folders structure")," or like you want."),(0,l.kt)("img",{src:n(6874).Z,alt:"TinyORM - QtCreator - Configure Project",width:"760"}),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"You can force the ",(0,l.kt)("inlineCode",{parentName:"p"},"QtCreator")," to generate a build folders structure as is described ",(0,l.kt)("a",{parentName:"p",href:"#qtcreator-default-build-directory"},"above"),".")),(0,l.kt)("p",null,"You are ready to configure build options, hit ",(0,l.kt)("kbd",null,"Ctrl"),"+",(0,l.kt)("kbd",null,"5")," to open ",(0,l.kt)("inlineCode",{parentName:"p"},"Project Settings")," tab and select ",(0,l.kt)("inlineCode",{parentName:"p"},"Build")," in the left sidebar to open the ",(0,l.kt)("inlineCode",{parentName:"p"},"Build Settings"),", it should look similar to the following picture."),(0,l.kt)("p",null,"Disable ",(0,l.kt)("inlineCode",{parentName:"p"},"QML debugging and profiling")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Qt Quick Compiler"),", they are not used."),(0,l.kt)("img",{src:n(7066).Z,alt:"TinyORM - QtCreator - Build Settings",width:"760"}),(0,l.kt)("p",null,"If you want to change some ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," build options, you can pass them to the ",(0,l.kt)("inlineCode",{parentName:"p"},"Build Steps")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake TinyORM.pro")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"Additional arguments")," input field. It can look like this."),(0,l.kt)("img",{src:n(5705).Z,alt:"TinyORM - QtCreator - Build Settings - Additional arguments",width:"660"}),(0,l.kt)("h4",{id:"build-tinyorm-1"},"Build TinyORM"),(0,l.kt)("p",null,"Everything is ready for build, you can press ",(0,l.kt)("kbd",null,"Ctrl"),"+",(0,l.kt)("kbd",null,"b")," to build the project."),(0,l.kt)("h3",{id:"qmake-build-options"},"qmake build options"),(0,l.kt)("div",{className:"apitable-build-options"},(0,l.kt)(r.Z,{mdxType:"APITable"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"CONFIG")," ",(0,l.kt)("small",null,"Option Name")),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"build_tests")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Build TinyORM unit tests.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"disable_autoconf")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Disable the ",(0,l.kt)("a",{parentName:"td",href:"#auto-configuration-internals"},(0,l.kt)("inlineCode",{parentName:"a"},"Auto-configuration"))," feature ",(0,l.kt)("small",null,"(auto-configuration is enabled by default from ",(0,l.kt)("inlineCode",{parentName:"td"},"TinyORM")," ",(0,l.kt)("inlineCode",{parentName:"td"},"v0.34.0"),")"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"disable_dotenv")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Disable the ",(0,l.kt)("a",{parentName:"td",href:"#environment-files"},(0,l.kt)("inlineCode",{parentName:"a"},"tiny_dotenv"))," feature ",(0,l.kt)("small",null,"(environment files are enabled by default from ",(0,l.kt)("inlineCode",{parentName:"td"},"TinyORM")," ",(0,l.kt)("inlineCode",{parentName:"td"},"v0.34.0"),")"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"disable_thread_local")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Remove all ",(0,l.kt)("a",{parentName:"td",href:"https://en.cppreference.com/w/c/language/storage_duration"},(0,l.kt)("inlineCode",{parentName:"a"},"thread_local"))," storage duration specifiers, it disables multi-threading support.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"disable_orm")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Controls the compilation of all ",(0,l.kt)("inlineCode",{parentName:"td"},"ORM-related")," source code, when this option is ",(0,l.kt)("inlineCode",{parentName:"td"},"enabled"),", then only the ",(0,l.kt)("inlineCode",{parentName:"td"},"query builder")," without ",(0,l.kt)("inlineCode",{parentName:"td"},"ORM")," is compiled. Also excludes ",(0,l.kt)("inlineCode",{parentName:"td"},"ORM-related")," unit tests.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"disable_tom")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Controls the compilation of all ",(0,l.kt)("inlineCode",{parentName:"td"},"Tom-related")," source code, when this option is ",(0,l.kt)("inlineCode",{parentName:"td"},"disabled"),", then it also excludes ",(0,l.kt)("inlineCode",{parentName:"td"},"Tom-related")," unit tests.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"extern_constants")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ON")),(0,l.kt)("td",{parentName:"tr",align:null},"Use ",(0,l.kt)("inlineCode",{parentName:"td"},"extern")," constants instead of ",(0,l.kt)("inlineCode",{parentName:"td"},"inline")," constants in the ",(0,l.kt)("inlineCode",{parentName:"td"},"shared build"),".",(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},"ON")," is highly recommended for the ",(0,l.kt)("inlineCode",{parentName:"td"},"shared build")," ",(0,l.kt)("small",null,"(by default)"),";",(0,l.kt)("br",null),"is always ",(0,l.kt)("inlineCode",{parentName:"td"},"OFF")," for the ",(0,l.kt)("inlineCode",{parentName:"td"},"static build"),".",(0,l.kt)("br",null),(0,l.kt)("small",null,"Available when: ",(0,l.kt)("code",null,"CONFIG(shared","|","dll):!inline_constants")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"inline_constants")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Use ",(0,l.kt)("inlineCode",{parentName:"td"},"inline")," constants instead of ",(0,l.kt)("inlineCode",{parentName:"td"},"extern")," constants in the ",(0,l.kt)("inlineCode",{parentName:"td"},"shared build"),".",(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},"OFF")," is highly recommended for the ",(0,l.kt)("inlineCode",{parentName:"td"},"shared build"),";",(0,l.kt)("br",null),"is always ",(0,l.kt)("inlineCode",{parentName:"td"},"ON")," for the ",(0,l.kt)("inlineCode",{parentName:"td"},"static build"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"link_pkgconfig_off")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Link against ",(0,l.kt)("inlineCode",{parentName:"td"},"mysqlclient")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"libmariadb")," with ",(0,l.kt)("inlineCode",{parentName:"td"},"PKGCONFIG"),".",(0,l.kt)("br",null),"Used only in the ",(0,l.kt)("inlineCode",{parentName:"td"},"Unix")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"MinGW")," ",(0,l.kt)("strong",{parentName:"td"},"shared")," build ",(0,l.kt)("small",null,"(exactly ",(0,l.kt)("code",null,"win32-g++","|","win32-clang-g++"),")")," and when ",(0,l.kt)("inlineCode",{parentName:"td"},"mysql_ping")," is also defined to link against ",(0,l.kt)("inlineCode",{parentName:"td"},"mysqlclient")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"libmariadb"),", ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/silverqx/TinyORM/blob/main/conf.pri.example#L132"},"source code"),".",(0,l.kt)("br",null),(0,l.kt)("small",null,"Available when: ",(0,l.kt)("inlineCode",{parentName:"td"},"unix:mysql_ping")," or ",(0,l.kt)("code",null,"(win32-g++","|","win32-clang-g++):mysql_ping:!static:!staticlib")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"mysql_ping")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Enable ",(0,l.kt)("inlineCode",{parentName:"td"},"Orm::MySqlConnection::pingDatabase()")," method.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"tiny_ccache_win32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ON")),(0,l.kt)("td",{parentName:"tr",align:null},"Enable compiler cache. ",(0,l.kt)("a",{parentName:"td",href:"https://ccache.dev/"},"Homepage"),(0,l.kt)("br",null),(0,l.kt)("small",null,"It works only on Windows systems. It works well with the MSYS2 ",(0,l.kt)("inlineCode",{parentName:"td"},"g++"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"clang++"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"msvc"),", and ",(0,l.kt)("inlineCode",{parentName:"td"},"clang-cl")," with ",(0,l.kt)("inlineCode",{parentName:"td"},"msvc"),". It disables ",(0,l.kt)("inlineCode",{parentName:"td"},"precompile_header")," as they are not supported on Windows and changes the ",(0,l.kt)("inlineCode",{parentName:"td"},"-Zi")," compiler option to the ",(0,l.kt)("inlineCode",{parentName:"td"},"-Z7")," for debug builds as the ",(0,l.kt)("inlineCode",{parentName:"td"},"-Zi")," compiler option is not supported (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/ccache/ccache/issues/1040"},"link")," to the issue)."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"tom_example")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Build the ",(0,l.kt)("abbr",{title:"TinyORM Migrations"},(0,l.kt)("inlineCode",{parentName:"td"},"tom"))," console application example.")))))),(0,l.kt)("p",null,"Advanced ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," options."),(0,l.kt)("div",{className:"apitable-build-options"},(0,l.kt)(r.Z,{mdxType:"APITable"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ubsan")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Allows to enable ",(0,l.kt)("a",{parentName:"td",href:"https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html"},"UBSan")," sanitizer (Clang only).")))))),(0,l.kt)("p",null,"Important ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," options."),(0,l.kt)("div",{className:"apitable-build-options"},(0,l.kt)(r.Z,{mdxType:"APITable"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"CONFIG")," ",(0,l.kt)("small",null,"Option Name")),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ccache")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Enable compiler cache. ",(0,l.kt)("a",{parentName:"td",href:"https://ccache.dev/"},"Homepage"),(0,l.kt)("br",null),(0,l.kt)("small",null,"It works only on the Unix systems. It works well with the ",(0,l.kt)("inlineCode",{parentName:"td"},"g++")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"clang++")," and also supports precompiled headers."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"precompile_header")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-")),(0,l.kt)("td",{parentName:"tr",align:null},"Enable precompiled headers, you can disable them with:",(0,l.kt)("br",null)," ",(0,l.kt)("inlineCode",{parentName:"td"},"CONFIG-=precompile_header"),".",(0,l.kt)("br",null),(0,l.kt)("small",null,"The ",(0,l.kt)("inlineCode",{parentName:"td"},"precompile_header")," is enabled by default on ",(0,l.kt)("inlineCode",{parentName:"td"},"msvc"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"g++"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"clang++"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"clang-cl")," on ",(0,l.kt)("inlineCode",{parentName:"td"},"Windows")," and disabled by default on ",(0,l.kt)("inlineCode",{parentName:"td"},"linux"),"."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"static"),(0,l.kt)("br",null),(0,l.kt)("inlineCode",{parentName:"td"},"staticlib")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Build as a ",(0,l.kt)("inlineCode",{parentName:"td"},"static")," library (lib only).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"static_runtime")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OFF")),(0,l.kt)("td",{parentName:"tr",align:null},"Link against the ",(0,l.kt)("inlineCode",{parentName:"td"},"shared")," (dynamic) or ",(0,l.kt)("inlineCode",{parentName:"td"},"static")," run-time library.",(0,l.kt)("br",null),(0,l.kt)("small",null,"The ",(0,l.kt)("inlineCode",{parentName:"td"},"-MD")," becomes ",(0,l.kt)("inlineCode",{parentName:"td"},"-MT")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"-MDd")," becomes ",(0,l.kt)("inlineCode",{parentName:"td"},"-MTd"),". It works only on ",(0,l.kt)("inlineCode",{parentName:"td"},"MSVC")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"MinGW")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"MSYS2"),".",(0,l.kt)("br",null),"Please ",(0,l.kt)("u",null,"don't use")," this option.",(0,l.kt)("br",null),"Available when: ",(0,l.kt)("inlineCode",{parentName:"td"},"msvc")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"mingw")))))))),(0,l.kt)("h3",{id:"consume-tinyorm-library-qmake"},"Consume TinyOrm library ",(0,l.kt)("small",null,"(qmake)")),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/silverqx/TinyORM/blob/main/qmake/TinyOrm.pri"},(0,l.kt)("inlineCode",{parentName:"a"},"TinyOrm.pri"))," file is available to simplify the integration of the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library into your application. It sets up and configures the ",(0,l.kt)("inlineCode",{parentName:"p"},"CONFIG")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"DEFINES")," qmake variables, adds the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM"),", ",(0,l.kt)("abbr",{title:"TinyORM Migrations"},(0,l.kt)("inlineCode",{parentName:"p"},"tom")),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"vcpkg")," header files on the system ",(0,l.kt)("inlineCode",{parentName:"p"},"INCLUDEPATH")," (cross-platform using the ",(0,l.kt)("inlineCode",{parentName:"p"},"-isystem")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"-imsvc"),"), links against the TinyORM ",(0,l.kt)("inlineCode",{parentName:"p"},"shared")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"static")," library using the ",(0,l.kt)("inlineCode",{parentName:"p"},"LIBS"),"."),(0,l.kt)("p",null,"You can use it to configure the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library when you are linking against it. It does a very similar thing like the CMake's ",(0,l.kt)("inlineCode",{parentName:"p"},"Find Modules")," feature."),(0,l.kt)("h4",{id:"requirements"},"Requirements"),(0,l.kt)("p",null,"It has a few requirements, you need to:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"specify path to the ",(0,l.kt)("inlineCode",{parentName:"li"},"TinyORM")," qmake features (",(0,l.kt)("inlineCode",{parentName:"li"},".prf")," files) using the ",(0,l.kt)("inlineCode",{parentName:"li"},"QMAKEFEATURES")," variable that can only be set in the ",(0,l.kt)("inlineCode",{parentName:"li"},".qmake.conf")," file"),(0,l.kt)("li",{parentName:"ul"},"specify ",(0,l.kt)("inlineCode",{parentName:"li"},"qmake")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"environment")," variables to find the ",(0,l.kt)("inlineCode",{parentName:"li"},"vcpkg")," installation ",(0,l.kt)("small",null,"(",(0,l.kt)("inlineCode",{parentName:"li"},"TINY_VCPKG_ROOT")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"TINY_VCPKG_TRIPLET"),")")),(0,l.kt)("li",{parentName:"ul"},"specify path to the ",(0,l.kt)("inlineCode",{parentName:"li"},"TinyORM")," build folder ",(0,l.kt)("small",null,"(",(0,l.kt)("inlineCode",{parentName:"li"},"TINYORM_BUILD_TREE"),")"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"you can specify it ",(0,l.kt)("strong",{parentName:"li"},"manually")),(0,l.kt)("li",{parentName:"ul"},"or you can use ",(0,l.kt)("a",{parentName:"li",href:"#partial-guessing-of-the-tinyorm_build_tree"},"Partial guessing of the ",(0,l.kt)("inlineCode",{parentName:"a"},"TINYORM_BUILD_TREE"))))),(0,l.kt)("li",{parentName:"ul"},"build your application with the same ",(0,l.kt)("inlineCode",{parentName:"li"},"CONFIG")," ",(0,l.kt)("inlineCode",{parentName:"li"},"qmake")," variables that were used  when building the ",(0,l.kt)("inlineCode",{parentName:"li"},"TinyORM")," library")),(0,l.kt)("p",null,"Let's explain one by one."),(0,l.kt)("h5",{id:"qmakefeatures"},(0,l.kt)("inlineCode",{parentName:"h5"},"QMAKEFEATURES")),(0,l.kt)("p",null,"Create the ",(0,l.kt)("inlineCode",{parentName:"p"},".qmake.conf")," file in your application root folder with the following content."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qmake",metastring:"title='.qmake.conf'",title:"'.qmake.conf'"},"# Path to the PARENT folder of the TinyORM source folder\nTINY_MAIN_DIR = $$clean_path(<your_path>)\n# To find .env and .env.$$QMAKE_PLATFORM files in YOUR project\nTINY_DOTENV_ROOT = $$PWD\n\n# Path to the TinyORM build folder (specified manually)\nTINYORM_BUILD_TREE = $$quote($$TINY_MAIN_DIR/TinyORM-builds-qmake/build-TinyORM-Desktop_Qt_6_5_3_MSVC2019_64bit-Debug/)\n# vcpkg - range-v3 and tabulate\nTINY_VCPKG_ROOT = $$quote(<your_path>/vcpkg/)\n#TINY_VCPKG_TRIPLET = x64-windows\n\n# To find .prf files, needed by eg. CONFIG += tiny_system_headers inline/extern_constants\nQMAKEFEATURES *= $$quote($$TINY_MAIN_DIR/TinyORM/qmake/features)\n")),(0,l.kt)("p",null,"You can move all ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," variables that are part of the ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," configuration process to the ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," file if you want (recommended), this is possible because the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyOrm.pri")," enables the ",(0,l.kt)("a",{parentName:"p",href:"#environment-files"},(0,l.kt)("inlineCode",{parentName:"a"},"Environment files"))," feature by default."),(0,l.kt)("p",null,"You can look at the ",(0,l.kt)("a",{parentName:"p",href:"/building/hello-world#auto-configure-using-qmake_conf-and-env"},"Auto-configure using .qmake.conf and .env")," example for ",(0,l.kt)("inlineCode",{parentName:"p"},"Hello world")," project of what must stay in the ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake.conf")," file and what can be moved to the ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," files."),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"You can use the ",(0,l.kt)("a",{parentName:"p",href:"#partial-guessing-of-the-tinyorm_build_tree"},"Partial guessing of the ",(0,l.kt)("inlineCode",{parentName:"a"},"TINYORM_BUILD_TREE"))," if you don't like to specify it manually.")),(0,l.kt)("h5",{id:"variables-affecting-tinyormpri"},"Variables affecting ",(0,l.kt)("inlineCode",{parentName:"h5"},"TinyOrm.pri")),(0,l.kt)("p",null,"You must define the following variables before the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyOrm.pri")," is included:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Variable Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINYORM_BUILD_TREE")),(0,l.kt)("td",{parentName:"tr",align:null},"Path to the ",(0,l.kt)("inlineCode",{parentName:"td"},"TinyORM")," build folder.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINY_VCPKG_ROOT")),(0,l.kt)("td",{parentName:"tr",align:null},"Path to the ",(0,l.kt)("inlineCode",{parentName:"td"},"vcpkg")," installation folder.",(0,l.kt)("br",null),"If not defined, then it tries to use the ",(0,l.kt)("inlineCode",{parentName:"td"},"VCPKG_ROOT")," environment variable.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINY_VCPKG_TRIPLET")),(0,l.kt)("td",{parentName:"tr",align:null},"The ",(0,l.kt)("inlineCode",{parentName:"td"},"vcpkg")," ",(0,l.kt)("inlineCode",{parentName:"td"},"triplet")," to use ",(0,l.kt)("small",null,"(vcpkg/installed/$$TINY_VCPKG_TRIPLET/)"),".",(0,l.kt)("br",null),"If not defined, then it tries to guess the ",(0,l.kt)("inlineCode",{parentName:"td"},"vcpkg")," ",(0,l.kt)("inlineCode",{parentName:"td"},"triplet")," based on the current compiler and OS (based on the ",(0,l.kt)("inlineCode",{parentName:"td"},"QMAKESPEC"),"), and as the last thing, it tries to use the ",(0,l.kt)("inlineCode",{parentName:"td"},"VCPKG_DEFAULT_TRIPLET")," environment variable.")))),(0,l.kt)("p",null,"These variables will be set after the configuration is done:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Variable Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINY_BUILD_SUBFOLDER")),(0,l.kt)("td",{parentName:"tr",align:null},"Folder by release type if ",(0,l.kt)("inlineCode",{parentName:"td"},"CONFIG+=debug_and_release")," is defined ",(0,l.kt)("small",null,"(/debug, /release, or an empty string)"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINY_CCACHE_BUILD")),(0,l.kt)("td",{parentName:"tr",align:null},"To correctly link ",(0,l.kt)("inlineCode",{parentName:"td"},"ccache")," build against a ",(0,l.kt)("inlineCode",{parentName:"td"},"ccache")," build ",(0,l.kt)("small",null,"(_ccache or an empty string)"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINY_MSVC_VERSION")),(0,l.kt)("td",{parentName:"tr",align:null},"The ",(0,l.kt)("inlineCode",{parentName:"td"},"msvc")," compiler string ",(0,l.kt)("small",null,"(MSVC2022 or MSVC2019)"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINY_QT_VERSION_UNDERSCORED")),(0,l.kt)("td",{parentName:"tr",align:null},"Underscored ",(0,l.kt)("inlineCode",{parentName:"td"},"Qt")," version ",(0,l.kt)("small",null,"(eg. 6_5_3)"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINY_RELEASE_TYPE_CAMEL")),(0,l.kt)("td",{parentName:"tr",align:null},"Build type string ",(0,l.kt)("small",null,"(Debug, Profile, or Release)"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINY_VCPKG_INCLUDE")),(0,l.kt)("td",{parentName:"tr",align:null},"Path to the ",(0,l.kt)("inlineCode",{parentName:"td"},"vcpkg")," ",(0,l.kt)("inlineCode",{parentName:"td"},"include")," folder ",(0,l.kt)("small",null,"(vcpkg/installed/","<","triplet",">","/include/)"),".")))),(0,l.kt)("p",null,"Then you simply include the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyOrm.pri")," in your project file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qmake",metastring:"title='AnyProject.pro'",title:"'AnyProject.pro'"},"include($$TINY_MAIN_DIR/TinyORM/qmake/TinyOrm.pri)\n")),(0,l.kt)("p",null,"And that is all, now you should be able to link against the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library. \ud83d\udc4c"),(0,l.kt)("h5",{id:"manual-configuration-examples"},"Manual configuration examples"),(0,l.kt)("p",null,"Frankly, there is no reason to use the Manual configuration (define the variables described below before the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyOrm.pri")," inclusion), the only reason to use it is when you want more control over this process or want to define everything yourself. I'll leave this section here to show how things work."),(0,l.kt)("p",null,"You will have to link against the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," library manually if you don't set the ",(0,l.kt)("inlineCode",{parentName:"p"},"TINYORM_BUILD_TREE")," ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," variable before the inclusion of the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyOrm.pri")," file. The ",(0,l.kt)("inlineCode",{parentName:"p"},"INCLUDEPATH")," is auto-detected every time."),(0,l.kt)(p.Z,{groupId:y.IZ,mdxType:"Tabs"},(0,l.kt)(d.Z,{value:y.Fo,label:y.IM,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qmake",metastring:"{9}","{9}":!0},"# Link against TinyORM library\n# ---\nTINY_MAIN_DIR = $$clean_path(<your_path>)\n\n# Configure TinyORM library\ninclude($$TINY_MAIN_DIR/TinyORM/qmake/TinyOrm.pri)\n\n# TinyORM library path\nTINYORM_BUILD_TREE = $$quote($$TINY_MAIN_DIR/TinyORM-builds-qmake)\nLIBS += $$quote(-L$$TINYORM_BUILD_TREE/build-TinyORM-Desktop_Qt_6_5_3_MSVC2019_64bit-Debug/src$${TINY_BUILD_SUBFOLDER}/)\nLIBS += -lTinyOrm\n"))),(0,l.kt)(d.Z,{value:y.q5,label:y.C,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qmake",metastring:"{9}","{9}":!0},"# Link against TinyORM library\n# ---\nTINY_MAIN_DIR = $$clean_path(<your_path>)\n\n# Configure TinyORM library\ninclude($$TINY_MAIN_DIR/TinyORM/qmake/TinyOrm.pri)\n\n# TinyORM library path\nTINYORM_BUILD_TREE = $$quote($$TINY_MAIN_DIR/TinyORM-builds-qmake)\nLIBS += $$quote(-L$$TINYORM_BUILD_TREE/build-TinyORM-Desktop_Qt_6_5_3_GCC_64bit-Debug/src$${TINY_BUILD_SUBFOLDER}/)\nLIBS += -lTinyOrm\n")))),(0,l.kt)("p",null,"The same is true for the ",(0,l.kt)("inlineCode",{parentName:"p"},"vcpkg")," include path. If you don't set the ",(0,l.kt)("inlineCode",{parentName:"p"},"TINY_VCPKG_ROOT")," or have not defined the ",(0,l.kt)("inlineCode",{parentName:"p"},"VCPKG_ROOT")," environment variable, then you need to set up the ",(0,l.kt)("inlineCode",{parentName:"p"},"INCLUDEPATH")," for the ",(0,l.kt)("inlineCode",{parentName:"p"},"vcpkg")," that provides the ",(0,l.kt)("inlineCode",{parentName:"p"},"range-v3")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"tabulate")," header files."),(0,l.kt)(p.Z,{groupId:y.IZ,mdxType:"Tabs"},(0,l.kt)(d.Z,{value:y.Fo,label:y.IM,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qmake"},"# vcpkg - range-v3 and tabulate\n# ---\nINCLUDEPATH += $$quote(<your_path>/vcpkg/installed/x64-windows/include/)\n"))),(0,l.kt)(d.Z,{value:y.q5,label:y.C,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qmake"},"# vcpkg - range-v3 and tabulate\n# ---\nQMAKE_CXXFLAGS += -isystem $$shell_quote(<your_path>/vcpkg/installed/x64-linux/include/)\n")))),(0,l.kt)("p",null,"You can also use TinyORM's ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," function ",(0,l.kt)("inlineCode",{parentName:"p"},"tiny_add_system_includepath()")," which handles ",(0,l.kt)("inlineCode",{parentName:"p"},"INCLUDEPATH")," in a cross-platform way."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qmake"},"# vcpkg - range-v3 and tabulate\n# ---\ntiny_add_system_includepath(<your_path>/vcpkg/installed/x64-linux/include/)\n")),(0,l.kt)("p",null,"Do not forget to add ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyOrm0.dll")," on the path on Windows and on the ",(0,l.kt)("inlineCode",{parentName:"p"},"LD_LIBRARY_PATH")," on Linux, so your application can find it during execution."),(0,l.kt)(p.Z,{groupId:y.IZ,name:"tinyorm-on-path",mdxType:"Tabs"},(0,l.kt)(d.Z,{value:y.Fo,label:y.IM,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-powershell",mdxType:"CodeBlock"},`$env:Path = "${(0,u.go)(y.Fo,!1)}\\TinyORM\\TinyORM-builds-qmake\\build-debug;" + $env:Path`)),(0,l.kt)(d.Z,{value:y.q5,label:y.C,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},`export LD_LIBRARY_PATH=${(0,u.go)(y.q5)}/TinyORM/TinyORM-builds-qmake/build-debug\${PATH:+:}$PATH`))),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"On Linux ",(0,l.kt)("inlineCode",{parentName:"p"},"-isystem")," marks the directory as a system directory, it prevents warnings."),(0,l.kt)("p",{parentName:"admonition"},"On Windows you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"QMAKE_CXXFLAGS_WARN_ON = -external:anglebrackets -external:W0"),", it applies a warning level 0 to the angel bracket includes; ",(0,l.kt)("inlineCode",{parentName:"p"},"#include <file>"),"."),(0,l.kt)("p",{parentName:"admonition"},"With the ",(0,l.kt)("inlineCode",{parentName:"p"},"clang-cl")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"MSVC")," you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"-imsvc"),".")),(0,l.kt)("h3",{id:"auto-configuration-internals"},"Auto-configuration internals"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," build system does not support ",(0,l.kt)("inlineCode",{parentName:"p"},"auto-configuration")," of dependencies out of the box but ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," from ",(0,l.kt)("inlineCode",{parentName:"p"},"v0.34.0")," added its own ",(0,l.kt)("inlineCode",{parentName:"p"},"Auto-configuration")," feature along with the ",(0,l.kt)("inlineCode",{parentName:"p"},"tiny_dotenv")," qmake feature. These new features allow us to ",(0,l.kt)("inlineCode",{parentName:"p"},"auto-configure")," ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," project, and with their help, the ",(0,l.kt)("inlineCode",{parentName:"p"},"conf.pri")," files can be ",(0,l.kt)("u",null,"skipped entirely"),"."),(0,l.kt)("p",null,"While it adds additional complexity to the ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," configuration process, the benefits are significant."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Auto-configuration")," feature is designed to find the ",(0,l.kt)("inlineCode",{parentName:"p"},"vcpkg")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"MySQL")," installations, and ",(0,l.kt)("inlineCode",{parentName:"p"},"tiny_dotenv")," to include the ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," and ",(0,l.kt)("inlineCode",{parentName:"p"},".env.(win32|unix|mingw)")," files in the project's root folder. These new features can be configured using ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"environment")," variables, and they also contain some guessing logic if these variables are not defined."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Auto-configuration")," feature can be turned off using the ",(0,l.kt)("a",{parentName:"p",href:"#disable_autoconf"},(0,l.kt)("inlineCode",{parentName:"a"},"disable_autoconf"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," configuration option (eg. ",(0,l.kt)("inlineCode",{parentName:"p"},"CONFIG*=disable_autoconf"),")."),(0,l.kt)("p",null,"These are ",(0,l.kt)("u",null,(0,l.kt)("inlineCode",{parentName:"p"},"qmake"))," and ",(0,l.kt)("u",null,(0,l.kt)("inlineCode",{parentName:"p"},"environment"))," variables that affect the ",(0,l.kt)("inlineCode",{parentName:"p"},"Auto-configuration")," feature:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Variable Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINY_VCPKG_ROOT")),(0,l.kt)("td",{parentName:"tr",align:null},"Path to the ",(0,l.kt)("inlineCode",{parentName:"td"},"vcpkg")," installation folder.",(0,l.kt)("br",null),"If not defined, then it tries to use the ",(0,l.kt)("inlineCode",{parentName:"td"},"VCPKG_ROOT")," environment variable.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINY_VCPKG_TRIPLET")),(0,l.kt)("td",{parentName:"tr",align:null},"The ",(0,l.kt)("inlineCode",{parentName:"td"},"vcpkg")," ",(0,l.kt)("inlineCode",{parentName:"td"},"triplet")," to use ",(0,l.kt)("small",null,"(vcpkg/installed/$$TINY_VCPKG_TRIPLET/)"),".",(0,l.kt)("br",null),"If not defined, then it tries to guess the ",(0,l.kt)("inlineCode",{parentName:"td"},"vcpkg")," ",(0,l.kt)("inlineCode",{parentName:"td"},"triplet")," based on the current compiler and OS (based on the ",(0,l.kt)("inlineCode",{parentName:"td"},"QMAKESPEC"),"), and as the last thing, it tries to use the ",(0,l.kt)("inlineCode",{parentName:"td"},"VCPKG_DEFAULT_TRIPLET")," environment variable.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINY_MYSQL_ROOT")),(0,l.kt)("td",{parentName:"tr",align:null},"Path to the ",(0,l.kt)("inlineCode",{parentName:"td"},"MySQL")," installation folder.",(0,l.kt)("br",null),"If not defined, then it tries to guess the ",(0,l.kt)("inlineCode",{parentName:"td"},"MySQL")," installation folder (",(0,l.kt)("inlineCode",{parentName:"td"},"win32")," only): ",(0,l.kt)("code",null,"$$(ProgramFiles)/MySQL/MySQL Server (8.1","|","8.0","|","5.7)/"))))),(0,l.kt)("p",null,"You can set these variables in the ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," (recommended) or ",(0,l.kt)("inlineCode",{parentName:"p"},"conf.pri")," files, in the ",(0,l.kt)("inlineCode",{parentName:"p"},".qmake.conf")," file (or wherever you want), or as environment variables."),(0,l.kt)("p",null,"These variables will be set after ",(0,l.kt)("inlineCode",{parentName:"p"},"auto-configuration")," is done:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Variable Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINY_VCPKG_INCLUDE")),(0,l.kt)("td",{parentName:"tr",align:null},"Path to the ",(0,l.kt)("inlineCode",{parentName:"td"},"vcpkg")," ",(0,l.kt)("inlineCode",{parentName:"td"},"include")," folder ",(0,l.kt)("small",null,"(vcpkg/installed/","<","triplet",">","/include/)"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINY_MYSQL_INCLUDE")),(0,l.kt)("td",{parentName:"tr",align:null},"Path to the ",(0,l.kt)("inlineCode",{parentName:"td"},"MySQL")," ",(0,l.kt)("inlineCode",{parentName:"td"},"include")," folder ",(0,l.kt)("small",null,"(MySQL Server 8.1/include/)"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINY_MYSQL_LIB")),(0,l.kt)("td",{parentName:"tr",align:null},"Path to the ",(0,l.kt)("inlineCode",{parentName:"td"},"MySQL")," ",(0,l.kt)("inlineCode",{parentName:"td"},"lib")," folder ",(0,l.kt)("small",null,"(MySQL Server 8.1/lib/)"),".")))),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"TINY_MYSQL_INCLUDE")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"TINY_MYSQL_LIB")," are only set on ",(0,l.kt)("inlineCode",{parentName:"p"},"win32")," platform except ",(0,l.kt)("inlineCode",{parentName:"p"},"mingw"),"."),(0,l.kt)("h4",{id:"environment-files"},"Environment files"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"tiny_dotenv")," feature allows us to define the ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," and ",(0,l.kt)("inlineCode",{parentName:"p"},".env.$$TINY_DOTENV_PLATFORM")," files in the project's root folder. These files are loaded as early as possible so you can affect the ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," configuration process. On the other hand, the ",(0,l.kt)("inlineCode",{parentName:"p"},"conf.pri")," files are loaded as late as possible, and they can be used to override the ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," configuration."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," file is included ",(0,l.kt)("u",null,"first")," and is included on all platforms."),(0,l.kt)("p",null,"There is only one requirement for this feature to work correctly, and that is to set the ",(0,l.kt)("inlineCode",{parentName:"p"},"TINY_DOTENV_ROOT")," ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," variable to the project's root folder. This variable is ",(0,l.kt)("strong",{parentName:"p"},"already")," set in the ",(0,l.kt)("inlineCode",{parentName:"p"},".qmake.conf")," file for the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," project."),(0,l.kt)("p",null,"Then the following names are taken into account: .env, .env.win32, .env.unix, .env.mingw"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qmake",metastring:"title='.qmake.conf'",title:"'.qmake.conf'"},"# To find .env and .env.$$QMAKE_PLATFORM files\nTINY_DOTENV_ROOT = $$PWD\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"tiny_dotenv")," feature can be turned off using the ",(0,l.kt)("a",{parentName:"p",href:"#disable_dotenv"},(0,l.kt)("inlineCode",{parentName:"a"},"disable_dotenv"))," ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," configuration option (eg. ",(0,l.kt)("inlineCode",{parentName:"p"},"CONFIG*=disable_dotenv"),")."),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"Environment files")," don't work in the ",(0,l.kt)("inlineCode",{parentName:"p"},"CMake")," builds.")),(0,l.kt)("h4",{id:"partial-guessing-of-the-tinyorm_build_tree"},"Partial guessing of the ",(0,l.kt)("inlineCode",{parentName:"h4"},"TINYORM_BUILD_TREE")),(0,l.kt)("p",null,"You don't have to manually define the ",(0,l.kt)("inlineCode",{parentName:"p"},"TINYORM_BUILD_TREE")," in ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," or ",(0,l.kt)("inlineCode",{parentName:"p"},".qmake.conf")," files. The ",(0,l.kt)("inlineCode",{parentName:"p"},"TINYORM_BUILD_TREE")," absolute path can be put together for you (this is happening inside the ",(0,l.kt)("inlineCode",{parentName:"p"},"variables.pri")," file) and ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," build folder name can be guessed for you too."),(0,l.kt)("p",null,"You must define the following variables before the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyOrm.pri")," will be included to make this real (set them in the ",(0,l.kt)("inlineCode",{parentName:"p"},".qmake.conf"),"):"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Variable Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINY_MAIN_DIR")),(0,l.kt)("td",{parentName:"tr",align:null},"Path to the ",(0,l.kt)("strong",{parentName:"td"},"PARENT")," folder of the ",(0,l.kt)("inlineCode",{parentName:"td"},"TinyORM")," source folder.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TINY_BUILD_TREE")),(0,l.kt)("td",{parentName:"tr",align:null},"Path to the ",(0,l.kt)("strong",{parentName:"td"},"current")," build tree - ",(0,l.kt)("inlineCode",{parentName:"td"},"TINY_BUILD_TREE = $$shadowed($$PWD)"),".")))),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"TINY_MAIN_DIR")," is required for another features anyway (so it should already be set) and all that's left is to set the ",(0,l.kt)("inlineCode",{parentName:"p"},"TINY_BUILD_TREE"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qmake",metastring:"title='.qmake.conf'",title:"'.qmake.conf'"},"# Path to the current build tree (used to guess the TinyORM build tree)\nTINY_BUILD_TREE = $$shadowed($$PWD)\n")),(0,l.kt)("p",null,"If you will follow this pattern or logic then you can switch ",(0,l.kt)("inlineCode",{parentName:"p"},"QtCreator Kits")," and the ",(0,l.kt)("inlineCode",{parentName:"p"},"TINYORM_BUILD_TREE")," will be ",(0,l.kt)("strong",{parentName:"p"},"auto-generated")," correctly and will always point to the correct ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," build tree."),(0,l.kt)("p",null,"It works this way, all is happening inside the ",(0,l.kt)("inlineCode",{parentName:"p"},"variables.pri"),", it takes a build folder name for the ",(0,l.kt)("strong",{parentName:"p"},"current")," project eg. ",(0,l.kt)("inlineCode",{parentName:"p"},"build-HelloWorld-Desktop_Qt_6_5_3_MSVC2022_64bit-Debug"),", replaces the ",(0,l.kt)("inlineCode",{parentName:"p"},"HelloWorld")," with the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," and as we already know the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," build folder location we can simply concatenate these paths like ",(0,l.kt)("inlineCode",{parentName:"p"},"$$TINY_MAIN_DIR/TinyORM-builds-qmake/build-TinyORM-Desktop_Qt_6_5_3_MSVC2022_64bit-Debug"),"."),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"This will only work if you follow the recommended ",(0,l.kt)("a",{parentName:"p",href:"#folders-structure"},(0,l.kt)("inlineCode",{parentName:"a"},"Folders structure")),".")),(0,l.kt)("h3",{id:"manual-configuration-internals"},"Manual configuration internals"),(0,l.kt)("p",null,"There is not much to say about the ",(0,l.kt)("inlineCode",{parentName:"p"},"Manual configuration")," feature. It uses ",(0,l.kt)("inlineCode",{parentName:"p"},"conf.pri")," files (there are four, one for every project or sub-project), and every project has prepared its own ",(0,l.kt)("inlineCode",{parentName:"p"},"conf.pri.example")," file for faster initial configuration."),(0,l.kt)("p",null,"These ",(0,l.kt)("inlineCode",{parentName:"p"},"conf.pri.example")," files are nicely commented on, so you can see what needs to be modified. The ",(0,l.kt)("inlineCode",{parentName:"p"},"conf.pri")," files are loaded as late as possible, and they can be used to override the ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," configuration."),(0,l.kt)("p",null,"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"Auto-configuration")," feature is disabled and there are no ",(0,l.kt)("inlineCode",{parentName:"p"},"conf.pri")," files, then the ",(0,l.kt)("inlineCode",{parentName:"p"},"TinyORM")," ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," configuration or build will fail at 100%."),(0,l.kt)("p",null,"These ",(0,l.kt)("inlineCode",{parentName:"p"},"conf.pri")," files are intended for configuring qmake's ",(0,l.kt)("inlineCode",{parentName:"p"},"INCLUDEPATH")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"LIBS"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"CONFIG")," or eg. ",(0,l.kt)("inlineCode",{parentName:"p"},"QMAKE_LFLAGS"),", or any other ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake")," options or variables."),(0,l.kt)("h2",{id:"ccache-support"},"Ccache support"),(0,l.kt)("p",null,"The TinyORM supports the ",(0,l.kt)("a",{parentName:"p",href:"https://ccache.dev/"},(0,l.kt)("inlineCode",{parentName:"a"},"ccache"))," out of the box for all ",(0,l.kt)("a",{parentName:"p",href:"/supported-compilers"},"supported compilers"),". For qmake you can enable it using the ",(0,l.kt)("inlineCode",{parentName:"p"},"CONFIG+=ccache")," on Linux or ",(0,l.kt)("inlineCode",{parentName:"p"},"CONFIG+=tiny_ccache_win32")," on Windows. For CMake you can set the ",(0,l.kt)("inlineCode",{parentName:"p"},"CMAKE_CXX_COMPILER_LAUNCHER=ccache"),"."),(0,l.kt)("p",null,"On ",(0,l.kt)("inlineCode",{parentName:"p"},"Linux")," it's clear, the ccache is fully supported and works also with the ",(0,l.kt)("inlineCode",{parentName:"p"},"precompiled headers"),". But was necessary to add some workarounds to the ",(0,l.kt)("inlineCode",{parentName:"p"},"qmake"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"CMake")," build systems to make out of the box support on ",(0,l.kt)("inlineCode",{parentName:"p"},"Windows"),". When you enable the ",(0,l.kt)("inlineCode",{parentName:"p"},"ccache")," on ",(0,l.kt)("inlineCode",{parentName:"p"},"Windows")," then the build system disables ",(0,l.kt)("inlineCode",{parentName:"p"},"precompiled headers")," and replaces the ",(0,l.kt)("inlineCode",{parentName:"p"},"-Zi")," compiler option with the ",(0,l.kt)("inlineCode",{parentName:"p"},"-Z7")," (link to the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ccache/ccache/issues/1040"},"issue"),")."),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"You can install the ccache using the ",(0,l.kt)("inlineCode",{parentName:"p"},"scoop install ccache")," command on Windows.")))}R.isMDXComponent=!0},5705:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/qmake-additional_arguments-14d3b6b82ad6d28db5b999a462500a6a.png"},7066:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/qmake-build_settings-7caa6d7c86232484b82acb24b5a3a6a7.png"},6874:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/qmake-configure_project-0b6821ea0523567dab9f21b3215055a3.png"}}]);