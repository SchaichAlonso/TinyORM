"use strict";(self.webpackChunktinyorm_org=self.webpackChunktinyorm_org||[]).push([[153],{3392:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var t=i(4848),s=i(8453);const o={sidebar_position:4,sidebar_label:"Serialization",description:"TinyORM models serialization allows you to serialize models and collection of models including all nested relations to JSON. It also supports converting to vectors or maps and allows controlling a custom date format during serialization.",keywords:["c++ orm","orm","serialization","json","toJson","serializing models","serializing relations","serializing collections","converting","toVector","toMap"]},r="TinyORM: Serialization",a={id:"tinyorm/serialization",title:"TinyORM: Serialization",description:"TinyORM models serialization allows you to serialize models and collection of models including all nested relations to JSON. It also supports converting to vectors or maps and allows controlling a custom date format during serialization.",source:"@site/docs/tinyorm/serialization.mdx",sourceDirName:"tinyorm",slug:"/tinyorm/serialization",permalink:"/tinyorm/serialization",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_label:"Serialization",description:"TinyORM models serialization allows you to serialize models and collection of models including all nested relations to JSON. It also supports converting to vectors or maps and allows controlling a custom date format during serialization.",keywords:["c++ orm","orm","serialization","json","toJson","serializing models","serializing relations","serializing collections","converting","toVector","toMap"]},sidebar:"tinyormSidebar",previous:{title:"Casts",permalink:"/tinyorm/casts"},next:{title:"Getting Started",permalink:"/tinydrivers/getting-started"}},l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Serializing Models &amp; Collections",id:"serializing-models-and-collections",level:2},{value:"Serializing To Vectors &amp; Maps",id:"serializing-to-vectors-and-maps",level:3},{value:"Serializing To JSON",id:"serializing-to-json",level:3},{value:"Relationships",id:"relationships",level:4},{value:"Hiding Attributes From JSON",id:"hiding-attributes-from-json",level:2},{value:"Temporarily Modifying Attribute Visibility",id:"temporarily-modifying-attribute-visibility",level:4},{value:"Appending Values To JSON",id:"appending-values-to-json",level:2},{value:"Appending At Run Time",id:"appending-at-run-time",level:4},{value:"Date Serialization",id:"date-serialization",level:2},{value:"Customizing The Default Date Format",id:"customizing-the-default-date-format",level:4},{value:"Customizing The Date Format Per Attribute",id:"customizing-the-date-format-per-attribute",level:4}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"tinyorm-serialization",children:"TinyORM: Serialization"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#serializing-models-and-collections",children:"Serializing Models & Collections"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#serializing-to-vectors-and-maps",children:"Serializing To Vectors & Maps"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#serializing-to-json",children:"Serializing To JSON"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#hiding-attributes-from-json",children:"Hiding Attributes From JSON"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#appending-values-to-json",children:"Appending Values To JSON"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#date-serialization",children:"Date Serialization"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"When building APIs using TinyORM, you will often need to convert your models and relationships to vectors, maps, or JSON. TinyORM includes convenient methods for making these conversions, as well as controlling which attributes are included in the serialized representation of your models."}),"\n",(0,t.jsx)(n.h2,{id:"serializing-models-and-collections",children:"Serializing Models & Collections"}),"\n",(0,t.jsx)(n.h3,{id:"serializing-to-vectors-and-maps",children:"Serializing To Vectors & Maps"}),"\n",(0,t.jsxs)(n.p,{children:["To convert a model and its loaded ",(0,t.jsx)(n.a,{href:"/tinyorm/relationships",children:"relationships"})," to a vector, you should use the ",(0,t.jsx)(n.code,{children:"toVector"})," or ",(0,t.jsx)(n.code,{children:"toMap"})," methods. This methods are recursive, so all attributes and all relations (including the relations of relations) will be converted to vectors:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'using Models::User;\n\nauto user = User::with("roles")->first();\n\nreturn user->toVector();\n\nreturn user->toMap();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"attributesToVector"})," or ",(0,t.jsx)(n.code,{children:"attributesToMap"})," methods may be used to convert a model's attributes to a vector or map but not its relationships:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"auto user = User::first();\n\nreturn user->attributesToVector();\n\nreturn user->attributesToMap();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You may also convert entire ",(0,t.jsx)(n.a,{href:"/tinyorm/collections",children:"collections"})," of models to vectors or maps by calling the ",(0,t.jsx)(n.a,{href:"/tinyorm/collections#method-tovector",children:(0,t.jsx)(n.code,{children:"toVector"})})," or ",(0,t.jsx)(n.a,{href:"/tinyorm/collections#method-tomap",children:(0,t.jsx)(n.code,{children:"toMap"})})," methods on the collection instance:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users = User::with("roles")->all();\n\nreturn users.toVector();\n\nreturn users.toMap();\n'})}),"\n",(0,t.jsx)(n.h3,{id:"serializing-to-json",children:"Serializing To JSON"}),"\n",(0,t.jsxs)(n.p,{children:["To convert a model to JSON, you should use the ",(0,t.jsx)(n.code,{children:"toJson"})," method. Like ",(0,t.jsx)(n.code,{children:"toVector"})," or ",(0,t.jsx)(n.code,{children:"toMap"}),", the ",(0,t.jsx)(n.code,{children:"toJson"})," method is recursive, so all attributes and relations will be converted to JSON. You may also specify any JSON encoding options that are supported by ",(0,t.jsx)(n.a,{href:"https://doc.qt.io/qt/qjsondocument.html#toJson",children:"QJsonDocument::toJson"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'using Models::User;\n\nauto user = User::with("roles")->find(1);\n\nreturn user->toJson();\n\nreturn user->toJson(QJsonDocument::Indented);\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You may also convert entire ",(0,t.jsx)(n.a,{href:"/tinyorm/collections",children:"collections"})," of models to JSON by calling the ",(0,t.jsx)(n.a,{href:"/tinyorm/collections#method-tojson",children:(0,t.jsx)(n.code,{children:"toJson"})})," method on the collection instance:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'ModelsCollection<User> users = User::with("roles")->findMany({1, 2});\n\nreturn users.toJson();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You can also convert models to the ",(0,t.jsx)(n.a,{href:"https://doc.qt.io/qt/qjsonobject.html",children:(0,t.jsx)(n.code,{children:"QJsonObject"})})," and ",(0,t.jsx)(n.a,{href:"https://doc.qt.io/qt/qjsondocument.html",children:(0,t.jsx)(n.code,{children:"QJsonDocument"})})," using the ",(0,t.jsx)(n.code,{children:"toJsonArray"})," and ",(0,t.jsx)(n.code,{children:"toJsonDocument"})," methods and collection of models to ",(0,t.jsx)(n.a,{href:"https://doc.qt.io/qt/qjsonarray.html",children:(0,t.jsx)(n.code,{children:"QJsonArray"})})," and ",(0,t.jsx)(n.a,{href:"https://doc.qt.io/qt/qjsondocument.html",children:(0,t.jsx)(n.code,{children:"QJsonDocument"})})," using the ",(0,t.jsx)(n.a,{href:"/tinyorm/collections#method-tojsonarray",children:(0,t.jsx)(n.code,{children:"toJsonArray"})})," and ",(0,t.jsx)(n.a,{href:"/tinyorm/collections#method-tojsondocument",children:(0,t.jsx)(n.code,{children:"toJsonDocument"})})," methods."]}),"\n",(0,t.jsx)(n.h4,{id:"relationships",children:"Relationships"}),"\n",(0,t.jsx)(n.p,{children:'When a TinyORM model is converted to JSON, its loaded relationships will automatically be included as attributes on the JSON object. Also, though TinyORM relationship methods are defined using "camelCase" method names, a relationship\'s JSON attributes will be "snake_case".'}),"\n",(0,t.jsxs)(n.p,{children:["This behavior is affected and can be overridden by the ",(0,t.jsx)(n.code,{children:"u_snakeAttributes"})," static data member:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"#include <orm/tiny/model.hpp>\n\nusing Orm::Tiny::Model;\n\nclass Album final : public Model<Album, AlbumImage>\n{\n    friend Model;\n    using Model::Model;\n\n    /*! Indicates whether attributes are snake_cased during serialization. */\n    inline static const bool u_snakeAttributes = false;\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"hiding-attributes-from-json",children:"Hiding Attributes From JSON"}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes you may wish to limit the attributes, such as passwords, that are included in your model's vector, map, or JSON representation. To do so, add a ",(0,t.jsx)(n.code,{children:"u_hidden"})," static data member to your model. Attributes that are listed in the ",(0,t.jsx)(n.code,{children:"u_hidden"})," data member set will not be included in the serialized representation of your model:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <orm/tiny/model.hpp>\n\nusing Orm::Tiny::Model;\n\nclass User final : public Model<User>\n{\n    friend Model;\n    using Model::Model;\n\n    /*! The attributes that should be hidden during serialization. */\n    inline static std::set<QString> u_hidden {"password"};\n};\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["To hide relationships, add the relationship's method name to your TinyORM model's ",(0,t.jsx)(n.code,{children:"u_hidden"})," static data member."]})}),"\n",(0,t.jsxs)(n.p,{children:["Alternatively, you may use the ",(0,t.jsx)(n.code,{children:"u_visible"}),' static data member to define an "allow list" of attributes that should be included in your model\'s vector, map, and JSON representation. All attributes that are not present in the ',(0,t.jsx)(n.code,{children:"u_visible"})," set will be hidden during serialization:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <orm/tiny/model.hpp>\n\nusing Orm::Tiny::Model;\n\nclass User final : public Model<User>\n{\n    friend Model;\n    using Model::Model;\n\n    /*! The attributes that should be visible during serialization. */\n    inline static std::set<QString> u_visible {\n        "first_name", "last_name",\n    };\n};\n'})}),"\n",(0,t.jsx)(n.h4,{id:"temporarily-modifying-attribute-visibility",children:"Temporarily Modifying Attribute Visibility"}),"\n",(0,t.jsxs)(n.p,{children:["If you would like to make some typically hidden attributes visible on a given model instance, you may use the ",(0,t.jsx)(n.code,{children:"makeVisible"})," method. The ",(0,t.jsx)(n.code,{children:"makeVisible"})," method returns a model reference:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'return user.makeVisible("attribute").toMap();\n\nreturn user.makeVisible({"id", "name"}).toMap();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Likewise, if you would like to hide some attributes that are typically visible, you may use the ",(0,t.jsx)(n.code,{children:"makeHidden"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'return user.makeHidden("attribute").toVector();\n\nreturn user.makeHidden({"id", "name"}).toVector();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If you wish to temporarily override all of the visible or hidden attributes, you may use the ",(0,t.jsx)(n.code,{children:"setVisible"})," and ",(0,t.jsx)(n.code,{children:"setHidden"})," methods respectively:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'return user.setVisible({"id", "name"}).toMap();\n\nreturn user.setHidden({"email", "password", "note"}).toJson();\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can also clear all visible and hidden attributes or determine whether a visible / hidden attribute is defined:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'user.clearVisible();\n\nuser.clearHidden();\n\nreturn user.hasVisible("name");\n\nreturn user.hasHidden("password");\n'})}),"\n",(0,t.jsx)(n.h2,{id:"appending-values-to-json",children:"Appending Values To JSON"}),"\n",(0,t.jsxs)(n.p,{children:["Occasionally, when converting models to vector, map, or JSON, you may wish to add attributes that do not have a corresponding column in your database. To do so, first define an ",(0,t.jsx)(n.a,{href:"/tinyorm/casts#accessors",children:"accessor"})," for the value:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <orm/tiny/model.hpp>\n\nusing Orm::Tiny::Model;\n\nclass User final : public Model<User>\n{\n    friend Model;\n    using Model::Model;\n\nprotected:\n    /*! Accessor to determine if the user is an administrator. */\n    Attribute isAdmin() const noexcept\n    {\n        return Attribute::make(/* get */ []() -> QVariant\n        {\n            return QStringLiteral("yes");\n        });\n    }\n};\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If you would like the accessor to always be appended to your model's vector, map, and JSON representations, you may add the attribute name to the ",(0,t.jsx)(n.code,{children:"u_appends"}),' data member set of your model. Note that attribute names are typically referenced using their "snake_case" serialized representation, even though the accessor\'s method name is defined using "camelCase":']}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <orm/tiny/model.hpp>\n\nusing Orm::Tiny::Model;\n\nclass User final : public Model<User>\n{\n    friend Model;\n    using Model::Model;\n\n    /*! Map of mutator names to methods. */\n    inline static const QHash<QString, MutatorFunction> u_mutators {\n        {"is_admin", &User::isAdmin},\n    };\n\n    /*! The attributes that should be appended during serialization. */\n    std::set<QString> u_appends {"is_admin"};\n};\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Once the attribute has been added to the ",(0,t.jsx)(n.code,{children:"u_appends"})," set, it will be included in both the model's vector, map, and JSON representations. Attributes in the ",(0,t.jsx)(n.code,{children:"u_appends"})," set will also respect the ",(0,t.jsx)(n.code,{children:"u_visible"})," and ",(0,t.jsx)(n.code,{children:"u_hidden"})," attribute settings configured on the model."]}),"\n",(0,t.jsxs)(n.p,{children:["Special note should be given to the ",(0,t.jsx)(n.code,{children:"u_mutators"})," static data member map, which maps accessors' attribute names to its methods. This data member is ",(0,t.jsx)(n.strong,{children:"required"})," because C++ does not currently support reflection."]}),"\n",(0,t.jsx)(n.h4,{id:"appending-at-run-time",children:"Appending At Run Time"}),"\n",(0,t.jsxs)(n.p,{children:["At runtime, you may instruct a model instance to append additional attributes using the ",(0,t.jsx)(n.code,{children:"append"})," method. Or, you may use the ",(0,t.jsx)(n.code,{children:"setAppends"})," method to override the entire set of appended attributes for a given model instance:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'return user.append("is_admin").toVector();\n\nreturn user.append({"is_admin", "is_banned"}).toMap();\n\nreturn user.setAppends({"is_admin"}).toJson();\n'})}),"\n",(0,t.jsx)(n.p,{children:"And you can also clear all appends or determine whether an append is defined:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'user.clearAppends();\n\nreturn user.hasAppend("is_admin");\n'})}),"\n",(0,t.jsx)(n.h2,{id:"date-serialization",children:"Date Serialization"}),"\n",(0,t.jsx)(n.h4,{id:"customizing-the-default-date-format",children:"Customizing The Default Date Format"}),"\n",(0,t.jsxs)(n.p,{children:["You may customize the default serialization format by overriding the ",(0,t.jsx)(n.code,{children:"serializeDate"})," and ",(0,t.jsx)(n.code,{children:"serializeDateTime"})," methods. These methods do not affect how your dates are formatted for storage in the database:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'/*! Prepare a date for vector, map, or JSON serialization. */\nQString serializeDate(const QDate date)\n{\n    return date.toString("yyyy-MM-dd");\n}\n\n/*! Prepare a datetime for vector, map, or JSON serialization. */\nQString serializeDateTime(const QDateTime &datetime)\n{\n    return datetime.toUTC().toString("yyyy-MM-ddTHH:mm:ssZ");\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"customizing-the-date-format-per-attribute",children:"Customizing The Date Format Per Attribute"}),"\n",(0,t.jsxs)(n.p,{children:["You may customize the serialization format of individual TinyORM date attributes by specifying the date format in the model's ",(0,t.jsx)(n.a,{href:"/tinyorm/casts#attribute-casting",children:"cast declarations"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'/*! The attributes that should be cast. */\ninline static std::unordered_map<QString, CastItem> u_casts {\n    {"birthday",  {CastType::CustomQDate, "yyyy-MM-dd"}},\n    {"joined_at", {CastType::CustomQDateTime, "yyyy-MM-dd HH:00"}},\n};\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(6540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);