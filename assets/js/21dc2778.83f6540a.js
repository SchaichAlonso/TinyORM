"use strict";(self.webpackChunktinyorm_org=self.webpackChunktinyorm_org||[]).push([[295],{8478:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>x,contentTitle:()=>m,default:()=>g,frontMatter:()=>h,metadata:()=>u,toc:()=>p});var l=i(4848),t=i(8453),s=i(6684),d=i(2364),a=i(9365),o=i(1470),r=i(7324),c=i(6694);const h={sidebar_position:2,sidebar_label:"Migrations",description:"Migrations are like version control for your database, allowing your team to define and share the application's database schema definition. Migrations use the Schema facade that provides database agnostic support for creating and manipulating tables across all of TinyORM's supported database systems.",keywords:["c++ orm","database","migrations","tinyorm"]},m="Database: Migrations",u={id:"database/migrations",title:"Database: Migrations",description:"Migrations are like version control for your database, allowing your team to define and share the application's database schema definition. Migrations use the Schema facade that provides database agnostic support for creating and manipulating tables across all of TinyORM's supported database systems.",source:"@site/docs/database/migrations.mdx",sourceDirName:"database",slug:"/database/migrations",permalink:"/database/migrations",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Migrations",description:"Migrations are like version control for your database, allowing your team to define and share the application's database schema definition. Migrations use the Schema facade that provides database agnostic support for creating and manipulating tables across all of TinyORM's supported database systems.",keywords:["c++ orm","database","migrations","tinyorm"]},sidebar:"tinyormSidebar",previous:{title:"Query Builder",permalink:"/database/query-builder"},next:{title:"Seeding",permalink:"/database/seeding"}},x={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Generating Migrations",id:"generating-migrations",level:2},{value:"Migrations naming rules",id:"migrations-naming-rules",level:4},{value:"Tab completion",id:"tab-completion",level:2},{value:"Alternative installation methods",id:"alternative-installation-methods",level:3},{value:"Static installation",id:"static-installation",level:4},{value:"Dynamic installation",id:"dynamic-installation",level:4},{value:"Migration Structure",id:"migration-structure",level:2},{value:"Setting The Migration Connection",id:"setting-the-migration-connection",level:4},{value:"Running Migrations",id:"running-migrations",level:2},{value:"Forcing Migrations To Run In Production",id:"forcing-migrations-to-run-in-production",level:4},{value:"Rolling Back Migrations",id:"rolling-back-migrations",level:3},{value:"Roll Back &amp; Migrate Using A Single Command",id:"roll-back--migrate-using-a-single-command",level:4},{value:"Drop All Tables &amp; Migrate",id:"drop-all-tables--migrate",level:4},{value:"Tables",id:"tables",level:2},{value:"Creating Tables",id:"creating-tables",level:3},{value:"Checking For Table / Column Existence",id:"checking-for-table--column-existence",level:4},{value:"Database Connection &amp; Table Options",id:"database-connection--table-options",level:4},{value:"Updating Tables",id:"updating-tables",level:3},{value:"Renaming / Dropping Tables",id:"renaming-and-dropping-tables",level:3},{value:"Renaming Tables With Foreign Keys",id:"renaming-tables-with-foreign-keys",level:4},{value:"Columns",id:"columns",level:2},{value:"Creating Columns",id:"creating-columns",level:3},{value:"Available Column Types",id:"available-column-types",level:3},{value:"<code>bigIncrements()</code>",id:"column-method-bigIncrements",level:4},{value:"<code>bigInteger()</code>",id:"column-method-bigInteger",level:4},{value:"<code>binary()</code>",id:"column-method-binary",level:4},{value:"<code>boolean()</code>",id:"column-method-boolean",level:4},{value:"<code>Char()</code>",id:"column-method-Char",level:4},{value:"<code>date()</code>",id:"column-method-date",level:4},{value:"<code>datetime()</code>",id:"column-method-datetime",level:4},{value:"<code>datetimes()</code>",id:"column-method-datetimes",level:4},{value:"<code>datetimeTz()</code>",id:"column-method-datetimeTz",level:4},{value:"<code>decimal()</code>",id:"column-method-decimal",level:4},{value:"<code>Double()</code>",id:"column-method-Double",level:4},{value:"<code>Enum()</code>",id:"column-method-Enum",level:4},{value:"<code>Float()</code>",id:"column-method-Float",level:4},{value:"<code>foreignId()</code>",id:"column-method-foreignId",level:4},{value:"<code>foreignIdFor()</code>",id:"column-method-foreignIdFor",level:4},{value:"<code>foreignUuid()</code>",id:"column-method-foreignUuid",level:4},{value:"<code>geometry()</code>",id:"column-method-geometry",level:4},{value:"<code>geometryCollection()</code>",id:"column-method-geometryCollection",level:4},{value:"<code>id()</code>",id:"column-method-id",level:4},{value:"<code>increments()</code>",id:"column-method-increments",level:4},{value:"<code>integer()</code>",id:"column-method-integer",level:4},{value:"<code>ipAddress()</code>",id:"column-method-ipAddress",level:4},{value:"<code>json()</code>",id:"column-method-json",level:4},{value:"<code>jsonb()</code>",id:"column-method-jsonb",level:4},{value:"<code>lineString()</code>",id:"column-method-lineString",level:4},{value:"<code>longBinary()</code>",id:"column-method-longBinary",level:4},{value:"<code>longText()</code>",id:"column-method-longText",level:4},{value:"<code>macAddress()</code>",id:"column-method-macAddress",level:4},{value:"<code>mediumBinary()</code>",id:"column-method-mediumBinary",level:4},{value:"<code>mediumIncrements()</code>",id:"column-method-mediumIncrements",level:4},{value:"<code>mediumInteger()</code>",id:"column-method-mediumInteger",level:4},{value:"<code>mediumText()</code>",id:"column-method-mediumText",level:4},{value:"<code>multiLineString()</code>",id:"column-method-multiLineString",level:4},{value:"<code>multiPoint()</code>",id:"column-method-multiPoint",level:4},{value:"<code>multiPolygon()</code>",id:"column-method-multiPolygon",level:4},{value:"<code>point()</code>",id:"column-method-point",level:4},{value:"<code>polygon()</code>",id:"column-method-polygon",level:4},{value:"<code>rememberToken()</code>",id:"column-method-rememberToken",level:4},{value:"<code>set()</code>",id:"column-method-set",level:4},{value:"<code>smallIncrements()</code>",id:"column-method-smallIncrements",level:4},{value:"<code>smallInteger()</code>",id:"column-method-smallInteger",level:4},{value:"<code>softDeletes()</code>",id:"column-method-softDeletes",level:4},{value:"<code>softDeletesDatetime()</code>",id:"column-method-softDeletesDatetime",level:4},{value:"<code>softDeletesTz()</code>",id:"column-method-softDeletesTz",level:4},{value:"<code>string()</code>",id:"column-method-string",level:4},{value:"<code>text()</code>",id:"column-method-text",level:4},{value:"<code>time()</code>",id:"column-method-time",level:4},{value:"<code>timeTz()</code>",id:"column-method-timeTz",level:4},{value:"<code>timestamp()</code>",id:"column-method-timestamp",level:4},{value:"<code>timestampTz()</code>",id:"column-method-timestampTz",level:4},{value:"<code>timestampsTz()</code>",id:"column-method-timestampsTz",level:4},{value:"<code>timestamps()</code>",id:"column-method-timestamps",level:4},{value:"<code>tinyBinary()</code>",id:"column-method-tinyBinary",level:4},{value:"<code>tinyIncrements()</code>",id:"column-method-tinyIncrements",level:4},{value:"<code>tinyInteger()</code>",id:"column-method-tinyInteger",level:4},{value:"<code>tinyText()</code>",id:"column-method-tinyText",level:4},{value:"<code>unsignedBigInteger()</code>",id:"column-method-unsignedBigInteger",level:4},{value:"<code>unsignedDecimal()</code>",id:"column-method-unsignedDecimal",level:4},{value:"<code>unsignedInteger()</code>",id:"column-method-unsignedInteger",level:4},{value:"<code>unsignedMediumInteger()</code>",id:"column-method-unsignedMediumInteger",level:4},{value:"<code>unsignedSmallInteger()</code>",id:"column-method-unsignedSmallInteger",level:4},{value:"<code>unsignedTinyInteger()</code>",id:"column-method-unsignedTinyInteger",level:4},{value:"<code>uuid()</code>",id:"column-method-uuid",level:4},{value:"<code>year()</code>",id:"column-method-year",level:4},{value:"Column Modifiers",id:"column-modifiers",level:3},{value:"Default Expressions",id:"default-expressions",level:4},{value:"Column Order",id:"column-order",level:4},{value:"Modifying Columns",id:"modifying-columns",level:3},{value:"Renaming Columns",id:"renaming-columns",level:4},{value:"Renaming Columns On Legacy Databases",id:"renaming-columns-on-legacy-databases",level:4},{value:"Dropping Columns",id:"dropping-columns",level:3},{value:"Available Command Aliases",id:"available-command-aliases",level:4},{value:"Indexes",id:"indexes",level:2},{value:"Creating Indexes",id:"creating-indexes",level:3},{value:"Available Index Types",id:"available-index-types",level:4},{value:"Index Lengths &amp; MySQL / MariaDB",id:"index-lengths--mysql--mariadb",level:4},{value:"Renaming Indexes",id:"renaming-indexes",level:3},{value:"Dropping Indexes",id:"dropping-indexes",level:3},{value:"Foreign Key Constraints",id:"foreign-key-constraints",level:3},{value:"Dropping Foreign Keys",id:"dropping-foreign-keys",level:4},{value:"Toggling Foreign Key Constraints",id:"toggling-foreign-key-constraints",level:4}];function j(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"database-migrations",children:"Database: Migrations"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#generating-migrations",children:"Generating Migrations"})}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#tab-completion",children:"Tab completion"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#alternative-installation-methods",children:"Alternative installation methods"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#migration-structure",children:"Migration Structure"})}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#running-migrations",children:"Running Migrations"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#rolling-back-migrations",children:"Rolling Back Migrations"})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#tables",children:"Tables"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#creating-tables",children:"Creating Tables"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#updating-tables",children:"Updating Tables"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#renaming-and-dropping-tables",children:"Renaming / Dropping Tables"})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#columns",children:"Columns"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#creating-columns",children:"Creating Columns"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#available-column-types",children:"Available Column Types"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#column-modifiers",children:"Column Modifiers"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#modifying-columns",children:"Modifying Columns"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#dropping-columns",children:"Dropping Columns"})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#indexes",children:"Indexes"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#creating-indexes",children:"Creating Indexes"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#renaming-indexes",children:"Renaming Indexes"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#dropping-indexes",children:"Dropping Indexes"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#foreign-key-constraints",children:"Foreign Key Constraints"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,l.jsx)(n.p,{children:"Migrations are like version control for your database, allowing your team to define and share the application's database schema definition. If you have ever had to tell a teammate to manually add a column to their local database schema after pulling in your changes from source control, you've faced the problem that database migrations solve."}),"\n",(0,l.jsxs)(n.p,{children:["The TinyORM ",(0,l.jsx)(n.code,{children:"Schema"})," facade provides database agnostic support for creating and manipulating tables across all of TinyORM's supported database systems. Typically, migrations will use this facade to create and modify database tables and columns."]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"tom"})," migrations is a small console application that depends on the ",(0,l.jsx)(n.code,{children:"TinyORM"})," library. All migrations logic is compiled so recompilation is needed after adding a new migration class."]}),"\n",(0,l.jsx)(n.admonition,{type:"warning",children:(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.a,{href:"/database/migrations#tables",children:(0,l.jsx)(n.code,{children:"schema builder"})})," and ",(0,l.jsx)(n.a,{href:"/database/migrations",children:(0,l.jsx)(n.code,{children:"migrations"})})," don't support ",(0,l.jsx)(n.a,{href:"/database/getting-started#multi-threading-support",children:"multi-threading"}),"."]})}),"\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsxs)(n.p,{children:["TinyORM's schema builder supports all ",(0,l.jsx)(n.a,{href:"/database/getting-started#introduction",children:"supported databases"})," out of the box."]})}),"\n",(0,l.jsxs)(n.p,{children:["The following image shows what the ",(0,l.jsx)(n.code,{children:"tom"})," console application looks like. \u2728 As you can see it offers everything that is needed to generate and manage migrations and seeders and all of this is backed up with the tab completion."]}),"\n",(0,l.jsx)("img",{src:i(5848).A,alt:"TinyORM - Tom console application - Showcase",width:"760",title:"TinyORM - Tom console application - Showcase"}),"\n",(0,l.jsx)(n.h2,{id:"generating-migrations",children:"Generating Migrations"}),"\n",(0,l.jsxs)(n.p,{children:["You may use the ",(0,l.jsx)(n.code,{children:"make:migration"})," ",(0,l.jsx)(n.code,{children:"tom"})," command to generate a database migration. The new migration will be placed in your ",(0,l.jsx)(n.code,{children:"database/migrations"})," directory. Each migration filename contains a timestamp that allows ",(0,l.jsx)(n.code,{children:"tom"})," to determine the order of the migrations:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"tom make:migration create_posts_table\n"})}),"\n",(0,l.jsxs)(n.p,{children:["tom will use the name of the migration to attempt to guess the name of the table and whether or not the migration will be creating a new table. If ",(0,l.jsx)(n.code,{children:"tom"})," is able to determine the table name from the migration name, ",(0,l.jsx)(n.code,{children:"tom"})," will pre-fill the generated migration file with the specified table. Otherwise, you may simply specify the table in the migration file manually."]}),"\n",(0,l.jsxs)(n.p,{children:["If you would like to specify a custom path for the generated migration, you may use the ",(0,l.jsx)(n.code,{children:"--path"})," option when executing the ",(0,l.jsx)(n.code,{children:"make:migration"})," command. The given path should be relative to your ",(0,l.jsx)("abbr",{title:"Current working directory",children:"pwd"})," or you can use the ",(0,l.jsx)(n.code,{children:"--realpath"})," option and pass the absolute path to the ",(0,l.jsx)(n.code,{children:"--path"})," option."]}),"\n",(0,l.jsx)(n.h4,{id:"migrations-naming-rules",children:"Migrations naming rules"}),"\n",(0,l.jsxs)(n.p,{children:["If the migration name starts with the ",(0,l.jsx)(n.code,{children:"create_"})," string then the stub for table creation will be used and if the migration name contains ",(0,l.jsx)(n.code,{children:"_(from|to|in)_"})," then the stub for table update will be used. You can override these rules using the ",(0,l.jsx)(n.code,{children:"--create"})," and ",(0,l.jsx)(n.code,{children:"--table"})," options and specify the table name manually."]}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsxs)(n.p,{children:["You can also pass the full migration filename with the datetime prefix and extension to the ",(0,l.jsx)(n.code,{children:"make:migration"}),". This command is able to detect almost any combination of the passed value, with or without datetime prefix or extension if it is the filename; or StudlyCase, snake_case, or kebab-case if it is the classname or any combination described above. \ud83d\udc40"]})}),"\n",(0,l.jsx)(n.h2,{id:"tab-completion",children:"Tab completion"}),"\n",(0,l.jsxs)(n.p,{children:["Tab completion is available for the ",(0,l.jsx)(n.code,{children:"pwsh"})," (on Linux too), ",(0,l.jsx)(n.code,{children:"bash"}),", and ",(0,l.jsx)(n.code,{children:"zsh"})," shells. For ",(0,l.jsx)(n.code,{children:"pwsh"})," the ",(0,l.jsx)(n.code,{children:"tom.exe"})," and ",(0,l.jsx)(n.code,{children:"TinyOrm0.dll"})," library must be on the system path to work properly. With ",(0,l.jsx)(n.code,{children:"bash"})," if the ",(0,l.jsx)(n.code,{children:"tom"})," executable and ",(0,l.jsx)(n.code,{children:"libTinyOrm.so"})," library is ",(0,l.jsx)(n.strong,{children:"not"})," on the system path then it will provide less accurate completions."]}),"\n",(0,l.jsx)(n.p,{children:"You can enable it using the following commands."}),"\n",(0,l.jsxs)(o.A,{groupId:r.vf,children:[(0,l.jsx)(a.A,{value:r.b,label:r.ux,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-powershell",children:"tom integrate pwsh\n"})})}),(0,l.jsx)(a.A,{value:r.xj,label:r.gg,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"tom integrate bash\n"})})}),(0,l.jsx)(a.A,{value:r.cy,label:r.$E,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"tom integrate zsh\ntom integrate zsh --path=/usr/share/zsh/site-functions\n"})})})]}),"\n",(0,l.jsxs)(n.p,{children:["Or you can enable it manually. Following actions are the same as the ",(0,l.jsx)(n.code,{children:"tom integrate"})," command does."]}),"\n",(0,l.jsxs)(n.p,{children:["For the ",(0,l.jsx)(n.code,{children:"pwsh"})," paste the following code to the pwsh profile (works on Linux or Windows)."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-powershell",metastring:"title='~/Documents/PowerShell/Microsoft.PowerShell_profile.ps1'",children:"Register-ArgumentCompleter -Native -CommandName tom,tom_testdata -ScriptBlock {\n    Param($wordToComplete, $commandAst, $cursorPosition)\n    [Console]::InputEncoding =\n    [Console]::OutputEncoding = $OutputEncoding = [System.Text.Utf8Encoding]::new()\n    $Local:word = $wordToComplete.Replace('\"', '\\\"')\n    $Local:ast = $commandAst.ToString().Replace('\"', '\\\"')\n    tom complete --word=\"$Local:word\" --commandline=\"$Local:ast\" --position=$cursorPosition\n        | ForEach-Object {\n            $completionText, $listText, $toolTip = $_ -split ';', 3\n            $listText ??= $completionText\n            $toolTip ??= $completionText\n            [System.Management.Automation.CompletionResult]::new(\n                $completionText, $listText, 'ParameterValue', $toolTip)\n        }\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["For ",(0,l.jsx)(n.code,{children:"bash"})," you can copy or create symlink of the ",(0,l.jsx)(n.code,{children:"/tools/completions/tom.bash"})," file to the ",(0,l.jsx)(n.code,{children:"/usr/share/bash-completion/completions"})," folder."]}),"\n",(0,l.jsx)(d.A,{className:"language-bash",children:`sudo ln -s ${(0,c.OZ)(r.xj)}/TinyORM/tools/completions/tom.bash /usr/share/bash-completion/completions/tom`}),"\n",(0,l.jsxs)(n.p,{children:["And for ",(0,l.jsx)(n.code,{children:"zsh"})," you can copy or create symlink of the ",(0,l.jsx)(n.code,{children:"/tools/completions/tom.zsh"})," file to the ",(0,l.jsx)(n.code,{children:"_tom"})," file to ",(0,l.jsx)(n.code,{children:"/usr/local/share/zsh/site-functions"})," folder."]}),"\n",(0,l.jsx)(d.A,{className:"language-bash",children:`sudo ln -s ${(0,c.OZ)(r.xj)}/TinyORM/tools/completions/tom.zsh /usr/local/share/zsh/site-functions/_tom`}),"\n",(0,l.jsxs)(n.p,{children:["It will provide completions for the ",(0,l.jsx)(n.code,{children:"tom"})," commands, long and short parameters, and also for some positional arguments like namespaces for the ",(0,l.jsx)(n.code,{children:"list"})," command or commands for the ",(0,l.jsx)(n.code,{children:"help"})," command."]}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"tom integrate zsh"})," command also accepts the ",(0,l.jsx)(n.code,{children:"--path="})," option with which you can set the location, where the zsh completion file should be created."]})}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsxs)(n.p,{children:["You can also output the completion script using the ",(0,l.jsx)(n.code,{children:"--stdout"})," option eg. ",(0,l.jsx)(n.code,{children:"tom integrate bash --stdout"}),"."]})}),"\n",(0,l.jsx)(n.h3,{id:"alternative-installation-methods",children:"Alternative installation methods"}),"\n",(0,l.jsxs)(n.p,{children:["This section describes alternative installation methods for ",(0,l.jsx)(n.code,{children:"bash"})," and ",(0,l.jsx)(n.code,{children:"zsh"})," tab completions."]}),"\n",(0,l.jsx)(n.h4,{id:"static-installation",children:"Static installation"}),"\n",(0,l.jsx)(n.p,{children:"Idea is to output the tab completion to the file and then source it."}),"\n",(0,l.jsxs)(o.A,{groupId:r.vf,children:[(0,l.jsx)(a.A,{value:r.xj,label:r.gg,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"mkdir -p ~/.local/share/tom\ntom integrate bash --stdout > ~/.local/share/tom/tom.bash\n\n# Then source this file in the ~/.bashrc\nsource $HOME/.local/share/tom/tom.bash\n"})})}),(0,l.jsx)(a.A,{value:r.cy,label:r.$E,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"mkdir -p ~/.local/share/tom\ntom integrate zsh --stdout > ~/.local/share/tom/tom.zsh\n\n# Then source this file in the ~/.zshrc\nsource $HOME/.local/share/tom/tom.zsh\ncompdef _tom tom\n"})})})]}),"\n",(0,l.jsx)(n.h4,{id:"dynamic-installation",children:"Dynamic installation"}),"\n",(0,l.jsxs)(n.p,{children:["Idea is to ",(0,l.jsx)(n.strong,{children:"avoid"})," outputting the tab completion to the file, so you ",(0,l.jsx)(n.code,{children:"eval"})," the tab completion source code right away."]}),"\n",(0,l.jsxs)(o.A,{groupId:r.vf,children:[(0,l.jsx)(a.A,{value:r.xj,label:r.gg,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Add this eval to the ~/.bashrc\neval "$(tom integrate bash --stdout)"\n'})})}),(0,l.jsx)(a.A,{value:r.cy,label:r.$E,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Add this eval to the ~/.zshrc\neval "$(tom integrate zsh --stdout)"\ncompdef _tom tom\n'})})})]}),"\n",(0,l.jsx)(n.h2,{id:"migration-structure",children:"Migration Structure"}),"\n",(0,l.jsxs)(n.p,{children:["A migration class contains two methods: ",(0,l.jsx)(n.code,{children:"up"})," and ",(0,l.jsx)(n.code,{children:"down"}),". The ",(0,l.jsx)(n.code,{children:"up"})," method is used to add new tables, columns, or indexes to your database, while the ",(0,l.jsx)(n.code,{children:"down"})," method should reverse the operations performed by the ",(0,l.jsx)(n.code,{children:"up"})," method."]}),"\n",(0,l.jsxs)(n.p,{children:["Within both of these methods, you may use the TinyORM schema builder to expressively create and modify tables. To learn about all of the methods available on the ",(0,l.jsx)(n.code,{children:"Schema"})," builder, ",(0,l.jsx)(n.a,{href:"#creating-tables",children:"check out its documentation"}),". For example, the following migration creates a ",(0,l.jsx)(n.code,{children:"posts"})," table:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#pragma once\n\n#include <tom/migration.hpp>\n\nnamespace Migrations\n{\n\n    struct CreatePostsTable : Migration\n    {\n        /*! Filename of the migration file. */\n        T_MIGRATION\n\n        /*! Run the migrations. */\n        void up() const override\n        {\n            Schema::create("posts", [](Blueprint &table)\n            {\n                table.id();\n\n                table.string(NAME);\n                table.timestamps();\n            });\n        }\n\n        /*! Reverse the migrations. */\n        void down() const override\n        {\n            Schema::dropIfExists("posts");\n        }\n    };\n\n} // namespace Migrations\n'})}),"\n",(0,l.jsxs)(n.p,{children:['Migration classes can be named in two formats, StudlyCase without the datetime prefix and "snake_case" with the datetime prefix. If the StudlyCase name is used then the ',(0,l.jsx)(n.code,{children:"T_MIGRATION"})," macro must also be used in the migration class."]}),"\n",(0,l.jsx)(n.p,{children:"Naming with the datetime prefix should look like this."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"struct _2014_10_12_000000_create_posts_table : Migration\n{\n\n    /*! Run the migrations. */\n    void up() const override\n    {\n        //\n    }\n\n    /*! Reverse the migrations. */\n    void down() const override\n    {\n        //\n    }\n};\n"})}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsxs)(n.p,{children:["The StudlyCase naming is preferred. Also the ",(0,l.jsx)(n.code,{children:"make:migration"})," command generates migrations in this format."]})}),"\n",(0,l.jsx)(n.h4,{id:"setting-the-migration-connection",children:"Setting The Migration Connection"}),"\n",(0,l.jsxs)(n.p,{children:["If your migration will be interacting with a database connection other than your application's default database connection, you should set the ",(0,l.jsx)(n.code,{children:"connection"})," data member of your migration:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'/*! The name of the database connection to use. */\nQString connection = QStringLiteral("tinyorm_example");\n\n/*! Run the migrations. */\nvoid up() const override\n{\n    //\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"running-migrations",children:"Running Migrations"}),"\n",(0,l.jsxs)(n.p,{children:["To run all of your outstanding migrations, execute the ",(0,l.jsx)(n.code,{children:"migrate"})," Tom command:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"tom migrate\n"})}),"\n",(0,l.jsxs)(n.p,{children:["If you would like to see which migrations have run thus far, you may use the ",(0,l.jsx)(n.code,{children:"migrate:status"})," tom command:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"tom migrate:status\n"})}),"\n",(0,l.jsxs)(n.p,{children:["If you would like to see the SQL statements that will be executed by the migrations without actually running them, you may provide the ",(0,l.jsx)(n.code,{children:"--pretend"})," flag to the ",(0,l.jsx)(n.code,{children:"migrate"})," command:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"tom migrate --pretend\n"})}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsxs)(n.p,{children:["Many ",(0,l.jsx)(n.code,{children:"tom"})," commands offer variety of options, you can explore them using the ",(0,l.jsx)(n.code,{children:"tom list"})," and ",(0,l.jsx)(n.code,{children:"tom help"})," commands. In most cases, these commands and options are self-explanatory."]})}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"tom"})," command is able to guess the command name and command namespace, eg. ",(0,l.jsx)(n.code,{children:"tom mig:st"})," or ",(0,l.jsx)(n.code,{children:"tom m:rol"}),", ..."]})}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsxs)(n.p,{children:["You can pass the ",(0,l.jsx)(n.code,{children:"-vvv"})," command-line argument to any command to see all executed SQL queries. \ud83d\udc4c"]})}),"\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"migrate"})," Tom command internally calls the ",(0,l.jsx)(n.code,{children:"migrate:install"})," command which installs the migration repository table. To uninstall this repository table you can call the ",(0,l.jsx)(n.code,{children:"migrate:uninstall"}),"."]})}),"\n",(0,l.jsx)(n.h4,{id:"forcing-migrations-to-run-in-production",children:"Forcing Migrations To Run In Production"}),"\n",(0,l.jsxs)(n.p,{children:["Some migration operations are destructive, which means they may cause you to lose data. In order to protect you from running these commands against your production database, you will be prompted for confirmation before the commands are executed. To force the commands to run without a prompt, use the ",(0,l.jsx)(n.code,{children:"--force"})," flag:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"tom migrate --force\n"})}),"\n",(0,l.jsx)(n.h3,{id:"rolling-back-migrations",children:"Rolling Back Migrations"}),"\n",(0,l.jsxs)(n.p,{children:["To roll back the latest migration operation, you may use the ",(0,l.jsx)(n.code,{children:"rollback"}),' Tom command. This command rolls back the last "batch" of migrations, which may include multiple migration files:']}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"tom migrate:rollback\n"})}),"\n",(0,l.jsxs)(n.p,{children:["You may roll back a limited number of migrations by providing the ",(0,l.jsx)(n.code,{children:"step"})," option to the ",(0,l.jsx)(n.code,{children:"rollback"})," command. For example, the following command will roll back the last five migrations:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"tom migrate:rollback --step=5\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"migrate:reset"})," command will roll back all of your application's migrations:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"tom migrate:reset\n"})}),"\n",(0,l.jsxs)(n.p,{children:['You may roll back a specific "batch" of migrations by providing the ',(0,l.jsx)(n.code,{children:"batch"})," option to the ",(0,l.jsx)(n.code,{children:"rollback"})," command, where the ",(0,l.jsx)(n.code,{children:"batch"})," option corresponds to a batch value within your application's ",(0,l.jsx)(n.code,{children:"migrations"})," database table. For example, the following command will roll back all migrations in batch three:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"tom migrate:rollback --batch=3\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"migrate:reset"})," command will roll back all of your application's migrations:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"tom migrate:reset\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"migrate:uninstall"})," command will uninstall the migration repository table, it optionally accepts the ",(0,l.jsx)(n.code,{children:"--reset"})," option to roll back all of your application's migrations:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"tom migrate:uninstall --reset\n"})}),"\n",(0,l.jsx)(n.h4,{id:"roll-back--migrate-using-a-single-command",children:"Roll Back & Migrate Using A Single Command"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"migrate:refresh"})," command will roll back all of your migrations and then execute the ",(0,l.jsx)(n.code,{children:"migrate"})," command. This command effectively re-creates your entire database:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"tom migrate:refresh\n"})}),"\n",(0,l.jsxs)(n.p,{children:["You may roll back and re-migrate a limited number of migrations by providing the ",(0,l.jsx)(n.code,{children:"step"})," option to the ",(0,l.jsx)(n.code,{children:"refresh"})," command. For example, the following command will roll back and re-migrate the last five migrations:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"tom migrate:refresh --step=5\n"})}),"\n",(0,l.jsx)(n.h4,{id:"drop-all-tables--migrate",children:"Drop All Tables & Migrate"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"migrate:fresh"})," command will drop all tables from the database and then execute the ",(0,l.jsx)(n.code,{children:"migrate"})," command:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"tom migrate:fresh\n"})}),"\n",(0,l.jsx)(n.admonition,{type:"warning",children:(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"migrate:fresh"})," command will drop all database tables regardless of their prefix. This command should be used with caution when developing on a database that is shared with other applications."]})}),"\n",(0,l.jsx)(n.h2,{id:"tables",children:"Tables"}),"\n",(0,l.jsx)(n.h3,{id:"creating-tables",children:"Creating Tables"}),"\n",(0,l.jsxs)(n.p,{children:["To create a new database table, use the ",(0,l.jsx)(n.code,{children:"create"})," method on the ",(0,l.jsx)(n.code,{children:"Schema"})," facade. The ",(0,l.jsx)(n.code,{children:"create"})," method accepts two arguments: the first is the name of the table, while the second is a lambda expression which receives a ",(0,l.jsx)(n.code,{children:"Orm::SchemaNs::Blueprint"})," object that may be used to define the new table:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#include <orm/schema.hpp>\n\nusing Orm::Schema;\n\nSchema::create("users", [](Blueprint &table)\n{\n    table.id();\n    table.string("name");\n    table.string("email");\n    table.timestamps();\n});\n'})}),"\n",(0,l.jsxs)(n.p,{children:["When creating the table, you may use any of the schema builder's ",(0,l.jsx)(n.a,{href:"#creating-columns",children:"column methods"})," to define the table's columns."]}),"\n",(0,l.jsx)(n.h4,{id:"checking-for-table--column-existence",children:"Checking For Table / Column Existence"}),"\n",(0,l.jsxs)(n.p,{children:["You may check for the existence of a table or column using the ",(0,l.jsx)(n.code,{children:"hasTable"})," and ",(0,l.jsx)(n.code,{children:"hasColumn"})," methods:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'if (Schema::hasTable("users")) {\n    // The "users" table exists...\n}\n\nif (Schema::hasColumn("users", "email")) {\n    // The "users" table exists and has an "email" column...\n}\n'})}),"\n",(0,l.jsx)(n.h4,{id:"database-connection--table-options",children:"Database Connection & Table Options"}),"\n",(0,l.jsxs)(n.p,{children:["If you want to perform a schema operation on a database connection that is not your application's default connection, use the ",(0,l.jsx)(n.code,{children:"connection"})," method or ",(0,l.jsx)(n.code,{children:"on"})," alias:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'Schema::connection("postgres").create("users", [](Blueprint &table)\n{\n    table.id();\n});\n'})}),"\n",(0,l.jsxs)(n.p,{children:["In addition, a few other data members and methods may be used to define other aspects of the table's creation. The ",(0,l.jsx)(n.code,{children:"engine"})," data member may be used to specify the table's storage engine when using MySQL:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#include <orm/constants.hpp>\n\nusing Orm::Constants::InnoDB;\n\nSchema::create("users", [](Blueprint &table)\n{\n    table.engine = InnoDB;\n\n    // ...\n});\n'})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"charset"})," and ",(0,l.jsx)(n.code,{children:"collation"})," data members may be used to specify the character set and collation for the created table when using MySQL:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#include <orm/constants.hpp>\n\nusing Orm::Constants::UTF8MB4;\n\nSchema::create("users", [](Blueprint &table)\n{\n    table.charset = UTF8MB4;\n    table.collation = "utf8mb4_unicode_ci";\n\n    // ...\n});\n'})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"temporary"}),' method may be used to indicate that the table should be "temporary". Temporary tables are only visible to the current connection\'s database session and are dropped automatically when the connection is closed:']}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'Schema::create("calculations", [](Blueprint &table)\n{\n    table.temporary();\n\n    // ...\n});\n'})}),"\n",(0,l.jsxs)(n.p,{children:['If you would like to add a "comment" to a database table, you may invoke the ',(0,l.jsx)(n.code,{children:"comment"})," method on the table instance. Table comments are currently only supported by MySQL and PostgreSQL:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'Schema::create("calculations", [](Blueprint &table)\n{\n    table.comment("Business calculations");\n\n    // ...\n});\n'})}),"\n",(0,l.jsx)(n.h3,{id:"updating-tables",children:"Updating Tables"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"table"})," method on the ",(0,l.jsx)(n.code,{children:"Schema"})," facade may be used to update existing tables. Like the ",(0,l.jsx)(n.code,{children:"create"})," method, the ",(0,l.jsx)(n.code,{children:"table"})," method accepts two arguments: the name of the table and a lambda expression that receives a ",(0,l.jsx)(n.code,{children:"Blueprint"})," instance you may use to add columns or indexes to the table:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#include <orm/schema.hpp>\n\nSchema::table("users", [](Blueprint &table)\n{\n    table.integer("votes");\n});\n'})}),"\n",(0,l.jsx)(n.h3,{id:"renaming-and-dropping-tables",children:"Renaming / Dropping Tables"}),"\n",(0,l.jsxs)(n.p,{children:["To rename an existing database table, use the ",(0,l.jsx)(n.code,{children:"rename"})," method:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#include <orm/schema.hpp>\n\nSchema::rename("from", "to");\n'})}),"\n",(0,l.jsxs)(n.p,{children:["To drop an existing table, you may use the ",(0,l.jsx)(n.code,{children:"drop"})," or ",(0,l.jsx)(n.code,{children:"dropIfExists"})," methods:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'Schema::drop("users");\n\nSchema::dropIfExists("users");\n'})}),"\n",(0,l.jsx)(n.h4,{id:"renaming-tables-with-foreign-keys",children:"Renaming Tables With Foreign Keys"}),"\n",(0,l.jsxs)(n.p,{children:["Before renaming a table, you should verify that any foreign key constraints on the table have an explicit name in your migration files instead of letting TinyORM assign a convention based name. Otherwise, the foreign key constraint ",(0,l.jsx)(n.strong,{children:"index name"})," will refer to the old table name."]}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsxs)(n.p,{children:["After renaming a table, you can re-create (drop and create again) the foreign key constraints to fix an ",(0,l.jsx)(n.strong,{children:"index name"}),", so it refers to a renamed table."]})}),"\n",(0,l.jsx)(n.h2,{id:"columns",children:"Columns"}),"\n",(0,l.jsx)(n.h3,{id:"creating-columns",children:"Creating Columns"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"table"})," method on the ",(0,l.jsx)(n.code,{children:"Schema"})," facade may be used to update existing tables. Like the ",(0,l.jsx)(n.code,{children:"create"})," method, the ",(0,l.jsx)(n.code,{children:"table"})," method accepts two arguments: the name of the table and a lambda expression that receives a ",(0,l.jsx)(n.code,{children:"Blueprint"})," instance you may use to add columns to the table:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#include <orm/schema.hpp>\n\nSchema::table("users", [](Blueprint &table)\n{\n    table.integer("votes");\n});\n'})}),"\n",(0,l.jsx)(n.h3,{id:"available-column-types",children:"Available Column Types"}),"\n",(0,l.jsx)(n.p,{children:"The schema builder blueprint offers a variety of methods that correspond to the different types of columns you can add to your database tables. Each of the available methods are listed in the table below:"}),"\n",(0,l.jsx)("div",{className:"tom-column-types-list",children:(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"#column-method-bigIncrements",children:"bigIncrements"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-bigInteger",children:"bigInteger"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-binary",children:"binary"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-boolean",children:"boolean"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-Char",children:"Char"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-date",children:"date"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-datetime",children:"datetime"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-datetimes",children:"datetimes"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-datetimeTz",children:"datetimeTz"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-decimal",children:"decimal"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-Double",children:"Double"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-Enum",children:"Enum"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-Float",children:"Float"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-foreignId",children:"foreignId"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-foreignIdFor",children:"foreignIdFor"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-foreignUuid",children:"foreignUuid"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-geometry",children:"geometry"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-geometryCollection",children:"geometryCollection"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-id",children:"id"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-increments",children:"increments"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-integer",children:"integer"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-ipAddress",children:"ipAddress"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-json",children:"json"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-jsonb",children:"jsonb"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-lineString",children:"lineString"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-longBinary",children:"longBinary"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-longText",children:"longText"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-macAddress",children:"macAddress"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-mediumBinary",children:"mediumBinary"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-mediumIncrements",children:"mediumIncrements"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-mediumInteger",children:"mediumInteger"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-mediumText",children:"mediumText"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-multiLineString",children:"multiLineString"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-multiPoint",children:"multiPoint"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-multiPolygon",children:"multiPolygon"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-point",children:"point"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-polygon",children:"polygon"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-rememberToken",children:"rememberToken"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-set",children:"set"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-smallIncrements",children:"smallIncrements"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-smallInteger",children:"smallInteger"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-softDeletes",children:"softDeletes"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-softDeletesDatetime",children:"softDeletesDatetime"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-softDeletesTz",children:"softDeletesTz"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-string",children:"string"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-text",children:"text"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-time",children:"time"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-timeTz",children:"timeTz"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-timestamp",children:"timestamp"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-timestampTz",children:"timestampTz"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-timestampsTz",children:"timestampsTz"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-timestamps",children:"timestamps"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-tinyBinary",children:"tinyBinary"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-tinyIncrements",children:"tinyIncrements"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-tinyInteger",children:"tinyInteger"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-tinyText",children:"tinyText"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-unsignedBigInteger",children:"unsignedBigInteger"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-unsignedDecimal",children:"unsignedDecimal"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-unsignedInteger",children:"unsignedInteger"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-unsignedMediumInteger",children:"unsignedMediumInteger"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-unsignedSmallInteger",children:"unsignedSmallInteger"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-unsignedTinyInteger",children:"unsignedTinyInteger"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-uuid",children:"uuid"}),"\n",(0,l.jsx)(n.a,{href:"#column-method-year",children:"year"})]})}),"\n",(0,l.jsx)(n.admonition,{type:"info",children:(0,l.jsxs)(n.p,{children:["Names of ",(0,l.jsx)(n.code,{children:"Char"}),", ",(0,l.jsx)(n.code,{children:"Double"}),", ",(0,l.jsx)(n.code,{children:"Enum"}),", and ",(0,l.jsx)(n.code,{children:"Float"})," column methods are in the CamelCase format to avoid collisions with C++ keywords."]})}),"\n",(0,l.jsxs)("div",{className:"tom-column-types",children:[(0,l.jsx)(n.h4,{id:"column-method-bigIncrements",children:(0,l.jsx)(n.code,{children:"bigIncrements()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"bigIncrements"})," method creates an auto-incrementing ",(0,l.jsx)(n.code,{children:"UNSIGNED BIGINT"})," (primary key) equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"#include <orm/constants.hpp>\n\ntable.bigIncrements(Orm::ID);\n"})}),(0,l.jsx)(n.h4,{id:"column-method-bigInteger",children:(0,l.jsx)(n.code,{children:"bigInteger()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"bigInteger"})," method creates a ",(0,l.jsx)(n.code,{children:"BIGINT"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.bigInteger("votes");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-binary",children:(0,l.jsx)(n.code,{children:"binary()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"binary"})," method creates a ",(0,l.jsx)(n.code,{children:"BLOB"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.binary("photo");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-boolean",children:(0,l.jsx)(n.code,{children:"boolean()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"boolean"})," method creates a ",(0,l.jsx)(n.code,{children:"BOOLEAN"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.boolean("confirmed");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-Char",children:(0,l.jsx)(n.code,{children:"Char()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"Char"})," method creates a ",(0,l.jsx)(n.code,{children:"CHAR"})," equivalent column with of a given length:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"#include <orm/constants.hpp>\n\ntable.Char(Orm::NAME, 100);\n"})}),(0,l.jsx)(n.h4,{id:"column-method-date",children:(0,l.jsx)(n.code,{children:"date()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"date"})," method creates a ",(0,l.jsx)(n.code,{children:"DATE"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.date("created_at");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-datetime",children:(0,l.jsx)(n.code,{children:"datetime()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"datetime"})," method creates a ",(0,l.jsx)(n.code,{children:"DATETIME"})," equivalent column with an optional precision (total digits):"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.datetime("created_at", precision = 0);\n'})}),(0,l.jsx)(n.h4,{id:"column-method-datetimes",children:(0,l.jsx)(n.code,{children:"datetimes()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"datetimes"})," method creates ",(0,l.jsx)(n.code,{children:"created_at"})," and ",(0,l.jsx)(n.code,{children:"updated_at"})," ",(0,l.jsx)(n.code,{children:"DATETIME"})," equivalent columns with an optional precision (total digits):"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"table.datetimes(precision = 0);\n"})}),(0,l.jsx)(n.h4,{id:"column-method-datetimeTz",children:(0,l.jsx)(n.code,{children:"datetimeTz()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"datetimeTz"})," method creates a ",(0,l.jsx)(n.code,{children:"DATETIME"})," (with timezone) equivalent column with an optional precision (total digits):"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"#include <orm/constants.hpp>\n\ntable.datetimeTz(Orm::CREATED_AT, precision = 0);\n"})}),(0,l.jsx)(n.h4,{id:"column-method-decimal",children:(0,l.jsx)(n.code,{children:"decimal()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"decimal"})," method creates a ",(0,l.jsx)(n.code,{children:"DECIMAL"})," equivalent column with the given precision (total digits) and scale (decimal digits):"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.decimal("amount", precision = 8, scale = 2);\n'})}),(0,l.jsx)(n.h4,{id:"column-method-Double",children:(0,l.jsx)(n.code,{children:"Double()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"Double"})," method creates a ",(0,l.jsx)(n.code,{children:"DOUBLE"})," equivalent column with the given precision (total digits) and scale (decimal digits):"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.Double("amount", 8, 2);\n'})}),(0,l.jsx)(n.h4,{id:"column-method-Enum",children:(0,l.jsx)(n.code,{children:"Enum()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"Enum"})," method creates a ",(0,l.jsx)(n.code,{children:"ENUM"})," equivalent column with the given valid values:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.Enum("difficulty", {"easy", "hard"});\n'})}),(0,l.jsx)(n.h4,{id:"column-method-Float",children:(0,l.jsx)(n.code,{children:"Float()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"Float"})," method creates a ",(0,l.jsx)(n.code,{children:"FLOAT"})," equivalent column with the given precision (total digits) and scale (decimal digits):"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.Float("amount", 8, 2);\n'})}),(0,l.jsx)(n.h4,{id:"column-method-foreignId",children:(0,l.jsx)(n.code,{children:"foreignId()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"foreignId"})," method creates an ",(0,l.jsx)(n.code,{children:"UNSIGNED BIGINT"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.foreignId("user_id");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-foreignIdFor",children:(0,l.jsx)(n.code,{children:"foreignIdFor()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"foreignIdFor"})," method adds a ",(0,l.jsx)(n.code,{children:"{column}_id UNSIGNED BIGINT"})," equivalent column for a given model class:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#include "models/user.hpp"\n\nModels::User user;\n\ntable.foreignIdFor(User);\n'})}),(0,l.jsx)(n.h4,{id:"column-method-foreignUuid",children:(0,l.jsx)(n.code,{children:"foreignUuid()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"foreignUuid"})," method creates a ",(0,l.jsx)(n.code,{children:"UUID"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.foreignUuid("user_id");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-geometry",children:(0,l.jsx)(n.code,{children:"geometry()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"geometry"})," method creates a ",(0,l.jsx)(n.code,{children:"GEOMETRY"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.geometry("positions");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-geometryCollection",children:(0,l.jsx)(n.code,{children:"geometryCollection()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"geometryCollection"})," method creates a ",(0,l.jsx)(n.code,{children:"GEOMETRYCOLLECTION"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.geometryCollection("positions");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-id",children:(0,l.jsx)(n.code,{children:"id()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"id"})," method is an alias of the ",(0,l.jsx)(n.code,{children:"bigIncrements"})," method. By default, the method will create an ",(0,l.jsx)(n.code,{children:"id"})," column; however, you may pass a column name if you would like to assign a different name to the column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"table.id();\n"})}),(0,l.jsx)(n.h4,{id:"column-method-increments",children:(0,l.jsx)(n.code,{children:"increments()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"increments"})," method creates an auto-incrementing ",(0,l.jsx)(n.code,{children:"UNSIGNED INTEGER"})," equivalent column as a primary key:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.increments("id");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-integer",children:(0,l.jsx)(n.code,{children:"integer()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"integer"})," method creates an ",(0,l.jsx)(n.code,{children:"INTEGER"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.integer("votes");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-ipAddress",children:(0,l.jsx)(n.code,{children:"ipAddress()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"ipAddress"})," method creates a ",(0,l.jsx)(n.code,{children:"VARCHAR(45)"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.ipAddress("visitor");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-json",children:(0,l.jsx)(n.code,{children:"json()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"json"})," method creates a ",(0,l.jsx)(n.code,{children:"JSON"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.json("options");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-jsonb",children:(0,l.jsx)(n.code,{children:"jsonb()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"jsonb"})," method creates a ",(0,l.jsx)(n.code,{children:"JSONB"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.jsonb("options");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-lineString",children:(0,l.jsx)(n.code,{children:"lineString()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"lineString"})," method creates a ",(0,l.jsx)(n.code,{children:"LINESTRING"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.lineString("positions");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-longBinary",children:(0,l.jsx)(n.code,{children:"longBinary()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"longBinary"})," method creates a ",(0,l.jsx)(n.code,{children:"LONGBLOB"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.longBinary("photo");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-longText",children:(0,l.jsx)(n.code,{children:"longText()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"longText"})," method creates a ",(0,l.jsx)(n.code,{children:"LONGTEXT"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.longText("description");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-macAddress",children:(0,l.jsx)(n.code,{children:"macAddress()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"macAddress"})," method creates a column that is intended to hold a MAC address. Some database systems, such as PostgreSQL, have a dedicated column type for this type of data. Other database systems will use a string equivalent ",(0,l.jsx)(n.code,{children:"VARCHAR(17)"})," column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.macAddress("device");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-mediumBinary",children:(0,l.jsx)(n.code,{children:"mediumBinary()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"mediumBinary"})," method creates a ",(0,l.jsx)(n.code,{children:"MEDIUMBLOB"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.mediumBinary("photo");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-mediumIncrements",children:(0,l.jsx)(n.code,{children:"mediumIncrements()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"mediumIncrements"})," method creates an auto-incrementing ",(0,l.jsx)(n.code,{children:"UNSIGNED MEDIUMINT"})," equivalent column as a primary key:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.mediumIncrements("id");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-mediumInteger",children:(0,l.jsx)(n.code,{children:"mediumInteger()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"mediumInteger"})," method creates a ",(0,l.jsx)(n.code,{children:"MEDIUMINT"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.mediumInteger("votes");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-mediumText",children:(0,l.jsx)(n.code,{children:"mediumText()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"mediumText"})," method creates a ",(0,l.jsx)(n.code,{children:"MEDIUMTEXT"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.mediumText("description");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-multiLineString",children:(0,l.jsx)(n.code,{children:"multiLineString()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"multiLineString"})," method creates a ",(0,l.jsx)(n.code,{children:"MULTILINESTRING"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.multiLineString("positions");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-multiPoint",children:(0,l.jsx)(n.code,{children:"multiPoint()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"multiPoint"})," method creates a ",(0,l.jsx)(n.code,{children:"MULTIPOINT"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.multiPoint("positions");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-multiPolygon",children:(0,l.jsx)(n.code,{children:"multiPolygon()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"multiPolygon"})," method creates a ",(0,l.jsx)(n.code,{children:"MULTIPOLYGON"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.multiPolygon("positions");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-point",children:(0,l.jsx)(n.code,{children:"point()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"point"})," method creates a ",(0,l.jsx)(n.code,{children:"POINT"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.point("position");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-polygon",children:(0,l.jsx)(n.code,{children:"polygon()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"polygon"})," method creates a ",(0,l.jsx)(n.code,{children:"POLYGON"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.polygon("position");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-rememberToken",children:(0,l.jsx)(n.code,{children:"rememberToken()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"rememberToken"})," method creates a nullable, ",(0,l.jsx)(n.code,{children:"VARCHAR(100)"}),' equivalent column that is intended to store the current "remember me" authentication token:']}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"table.rememberToken();\n"})}),(0,l.jsx)(n.h4,{id:"column-method-set",children:(0,l.jsx)(n.code,{children:"set()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"set"})," method creates a ",(0,l.jsx)(n.code,{children:"SET"})," equivalent column with the given list of valid values:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.set("flavors", {"strawberry", "vanilla"});\n'})}),(0,l.jsx)(n.h4,{id:"column-method-smallIncrements",children:(0,l.jsx)(n.code,{children:"smallIncrements()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"smallIncrements"})," method creates an auto-incrementing ",(0,l.jsx)(n.code,{children:"UNSIGNED SMALLINT"})," equivalent column as a primary key:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.smallIncrements("id");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-smallInteger",children:(0,l.jsx)(n.code,{children:"smallInteger()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"smallInteger"})," method creates a ",(0,l.jsx)(n.code,{children:"SMALLINT"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.smallInteger("votes");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-softDeletes",children:(0,l.jsx)(n.code,{children:"softDeletes()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"softDeletes"})," method adds a nullable ",(0,l.jsx)(n.code,{children:"deleted_at"})," ",(0,l.jsx)(n.code,{children:"TIMESTAMP"})," equivalent column with an optional precision (total digits). This column is intended to store the ",(0,l.jsx)(n.code,{children:"deleted_at"}),' timestamp needed for TinyORM\'s "soft delete" functionality:']}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.softDeletes("deleted_at", precision = 0);\n'})}),(0,l.jsx)(n.h4,{id:"column-method-softDeletesDatetime",children:(0,l.jsx)(n.code,{children:"softDeletesDatetime()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"softDeletesDatetime"})," method adds a nullable ",(0,l.jsx)(n.code,{children:"deleted_at"})," ",(0,l.jsx)(n.code,{children:"DATETIME"})," equivalent column with an optional precision (total digits). This column is intended to store the ",(0,l.jsx)(n.code,{children:"deleted_at"}),' timestamp needed for TinyORM\'s "soft delete" functionality:']}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.softDeletesDatetime("deleted_at", precision = 0);\n'})}),(0,l.jsx)(n.h4,{id:"column-method-softDeletesTz",children:(0,l.jsx)(n.code,{children:"softDeletesTz()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"softDeletesTz"})," method adds a nullable ",(0,l.jsx)(n.code,{children:"deleted_at"})," ",(0,l.jsx)(n.code,{children:"TIMESTAMP"})," (with timezone) equivalent column with an optional precision (total digits). This column is intended to store the ",(0,l.jsx)(n.code,{children:"deleted_at"}),' timestamp needed for TinyORM\'s "soft delete" functionality:']}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.softDeletesTz("deleted_at", precision = 0);\n'})}),(0,l.jsx)(n.h4,{id:"column-method-string",children:(0,l.jsx)(n.code,{children:"string()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"string"})," method creates a ",(0,l.jsx)(n.code,{children:"VARCHAR"})," equivalent column of the given length:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"#include <orm/constants.hpp>\n\ntable.string(Orm::NAME, 100);\n"})}),(0,l.jsx)(n.h4,{id:"column-method-text",children:(0,l.jsx)(n.code,{children:"text()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"text"})," method creates a ",(0,l.jsx)(n.code,{children:"TEXT"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.text("description");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-time",children:(0,l.jsx)(n.code,{children:"time()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"time"})," method creates a ",(0,l.jsx)(n.code,{children:"TIME"})," equivalent column with an optional precision (total digits):"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.time("sunrise", precision = 0);\n'})}),(0,l.jsx)(n.h4,{id:"column-method-timeTz",children:(0,l.jsx)(n.code,{children:"timeTz()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"timeTz"})," method creates a ",(0,l.jsx)(n.code,{children:"TIME"})," (with timezone) equivalent column with an optional precision (total digits):"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.timeTz("sunrise", precision = 0);\n'})}),(0,l.jsx)(n.h4,{id:"column-method-timestamp",children:(0,l.jsx)(n.code,{children:"timestamp()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"timestamp"})," method creates a ",(0,l.jsx)(n.code,{children:"TIMESTAMP"})," equivalent column with an optional precision (total digits):"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.timestamp("added_at", precision = 0);\n'})}),(0,l.jsx)(n.h4,{id:"column-method-timestampTz",children:(0,l.jsx)(n.code,{children:"timestampTz()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"timestampTz"})," method creates a ",(0,l.jsx)(n.code,{children:"TIMESTAMP"})," (with timezone) equivalent column with an optional precision (total digits):"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.timestampTz("added_at", precision = 0);\n'})}),(0,l.jsx)(n.h4,{id:"column-method-timestampsTz",children:(0,l.jsx)(n.code,{children:"timestampsTz()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"timestampsTz"})," method creates ",(0,l.jsx)(n.code,{children:"created_at"})," and ",(0,l.jsx)(n.code,{children:"updated_at"})," ",(0,l.jsx)(n.code,{children:"TIMESTAMP"})," (with timezone) equivalent columns with an optional precision (total digits):"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"table.timestampsTz(precision = 0);\n"})}),(0,l.jsx)(n.h4,{id:"column-method-timestamps",children:(0,l.jsx)(n.code,{children:"timestamps()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"timestamps"})," method creates ",(0,l.jsx)(n.code,{children:"created_at"})," and ",(0,l.jsx)(n.code,{children:"updated_at"})," ",(0,l.jsx)(n.code,{children:"TIMESTAMP"})," equivalent columns with an optional precision (total digits):"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"table.timestamps(precision = 0);\n"})}),(0,l.jsx)(n.h4,{id:"column-method-tinyBinary",children:(0,l.jsx)(n.code,{children:"tinyBinary()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"tinyBinary"})," method creates a ",(0,l.jsx)(n.code,{children:"TINYBLOB"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.tinyBinary("photo");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-tinyIncrements",children:(0,l.jsx)(n.code,{children:"tinyIncrements()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"tinyIncrements"})," method creates an auto-incrementing ",(0,l.jsx)(n.code,{children:"UNSIGNED TINYINT"})," equivalent column as a primary key:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.tinyIncrements("id");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-tinyInteger",children:(0,l.jsx)(n.code,{children:"tinyInteger()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"tinyInteger"})," method creates a ",(0,l.jsx)(n.code,{children:"TINYINT"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.tinyInteger("votes");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-tinyText",children:(0,l.jsx)(n.code,{children:"tinyText()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"tinyText"})," method creates a ",(0,l.jsx)(n.code,{children:"TINYTEXT"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.tinyText("notes");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-unsignedBigInteger",children:(0,l.jsx)(n.code,{children:"unsignedBigInteger()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"unsignedBigInteger"})," method creates an ",(0,l.jsx)(n.code,{children:"UNSIGNED BIGINT"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.unsignedBigInteger("votes");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-unsignedDecimal",children:(0,l.jsx)(n.code,{children:"unsignedDecimal()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"unsignedDecimal"})," method creates an ",(0,l.jsx)(n.code,{children:"UNSIGNED DECIMAL"})," equivalent column with an optional precision (total digits) and scale (decimal digits):"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.unsignedDecimal("amount", precision = 8, scale = 2);\n'})}),(0,l.jsx)(n.h4,{id:"column-method-unsignedInteger",children:(0,l.jsx)(n.code,{children:"unsignedInteger()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"unsignedInteger"})," method creates an ",(0,l.jsx)(n.code,{children:"UNSIGNED INTEGER"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.unsignedInteger("votes");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-unsignedMediumInteger",children:(0,l.jsx)(n.code,{children:"unsignedMediumInteger()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"unsignedMediumInteger"})," method creates an ",(0,l.jsx)(n.code,{children:"UNSIGNED MEDIUMINT"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.unsignedMediumInteger("votes");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-unsignedSmallInteger",children:(0,l.jsx)(n.code,{children:"unsignedSmallInteger()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"unsignedSmallInteger"})," method creates an ",(0,l.jsx)(n.code,{children:"UNSIGNED SMALLINT"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.unsignedSmallInteger("votes");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-unsignedTinyInteger",children:(0,l.jsx)(n.code,{children:"unsignedTinyInteger()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"unsignedTinyInteger"})," method creates an ",(0,l.jsx)(n.code,{children:"UNSIGNED TINYINT"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.unsignedTinyInteger("votes");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-uuid",children:(0,l.jsx)(n.code,{children:"uuid()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"uuid"})," method creates a ",(0,l.jsx)(n.code,{children:"UUID"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.uuid("id");\n'})}),(0,l.jsx)(n.h4,{id:"column-method-year",children:(0,l.jsx)(n.code,{children:"year()"})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"year"})," method creates a ",(0,l.jsx)(n.code,{children:"YEAR"})," equivalent column:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.year("birth_year");\n'})})]}),"\n",(0,l.jsx)(n.h3,{id:"column-modifiers",children:"Column Modifiers"}),"\n",(0,l.jsxs)(n.p,{children:['In addition to the column types listed above, there are several column "modifiers" you may use when adding a column to a database table. For example, to make the column "nullable", you may use the ',(0,l.jsx)(n.code,{children:"nullable"})," method:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#include <orm/schema.hpp>\n\nSchema::table("users", [](Blueprint &table)\n{\n    table.string("email").nullable();\n});\n'})}),"\n",(0,l.jsxs)(n.p,{children:["The following table contains all of the available column modifiers. This list does not include ",(0,l.jsx)(n.a,{href:"#creating-indexes",children:"index modifiers"}),":"]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Modifier"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'.after("column")'})}),(0,l.jsxs)(n.td,{children:['Place the column "after" another column ',(0,l.jsx)("small",{children:"(MySQL)"}),"."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:".autoIncrement()"})}),(0,l.jsx)(n.td,{children:"Set INTEGER columns as auto-incrementing (primary key)."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'.charset("utf8mb4")'})}),(0,l.jsxs)(n.td,{children:["Specify a character set for the column ",(0,l.jsx)("small",{children:"(MySQL)"}),"."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)("small",{children:(0,l.jsx)(n.code,{children:'.collation("utf8mb4_unicode_ci")'})})}),(0,l.jsxs)(n.td,{children:["Specify a collation for the column ",(0,l.jsx)("small",{children:"(MySQL/PostgreSQL/SQL Server)"}),"."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'.comment("my comment")'})}),(0,l.jsxs)(n.td,{children:["Add a comment to a column ",(0,l.jsx)("small",{children:"(MySQL / PostgreSQL)"}),".",(0,l.jsx)("br",{}),(0,l.jsx)("small",{children:"Special characters are escaped."})]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:".defaultValue(value)"})}),(0,l.jsxs)(n.td,{children:['Specify a "default" value for the column.',(0,l.jsx)("br",{}),(0,l.jsx)("small",{children:"Special characters are escaped."})]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:".first()"})}),(0,l.jsxs)(n.td,{children:['Place the column "first" in the table ',(0,l.jsx)("small",{children:"(MySQL)"}),"."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:".from(integer)"})}),(0,l.jsxs)(n.td,{children:["Set the starting value of an auto-incrementing field, an alias for ",(0,l.jsx)(n.code,{children:"startingValue()"})," ",(0,l.jsx)("small",{children:"(MySQL / PostgreSQL)"}),"."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:".invisible()"})}),(0,l.jsxs)(n.td,{children:['Make the column "invisible" to ',(0,l.jsx)(n.code,{children:"SELECT *"})," queries ",(0,l.jsx)("small",{children:"(MySQL)"}),"."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:".nullable(value = true)"})}),(0,l.jsx)(n.td,{children:"Allow NULL values to be inserted into the column."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:".startingValue(integer)"})}),(0,l.jsxs)(n.td,{children:["Set the starting value of an auto-incrementing field ",(0,l.jsx)("small",{children:"(MySQL / PostgreSQL)"}),"."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:".storedAs(expression)"})}),(0,l.jsxs)(n.td,{children:["Create a stored generated column ",(0,l.jsx)("small",{children:"(MySQL / PostgreSQL)"}),"."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:".unsigned()"})}),(0,l.jsxs)(n.td,{children:["Set INTEGER columns as UNSIGNED ",(0,l.jsx)("small",{children:"(MySQL)"}),"."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:".useCurrent()"})}),(0,l.jsx)(n.td,{children:"Set TIMESTAMP columns to use CURRENT_TIMESTAMP as default value."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:".useCurrentOnUpdate()"})}),(0,l.jsx)(n.td,{children:"Set TIMESTAMP columns to use CURRENT_TIMESTAMP when a record is updated."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:".virtualAs(expression)"})}),(0,l.jsxs)(n.td,{children:["Create a virtual generated column ",(0,l.jsx)("small",{children:"(MySQL)"}),"."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:".generatedAs(expression)"})}),(0,l.jsxs)(n.td,{children:["Create an identity column with specified sequence options ",(0,l.jsx)("small",{children:"(PostgreSQL)"}),"."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:".always()"})}),(0,l.jsxs)(n.td,{children:["Defines the precedence of sequence values over input for an identity column ",(0,l.jsx)("small",{children:"(PostgreSQL)"}),"."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:".isGeometry()"})}),(0,l.jsxs)(n.td,{children:["Set spatial column type to ",(0,l.jsx)(n.code,{children:"geometry"})," - the default type is ",(0,l.jsx)(n.code,{children:"geography"})," ",(0,l.jsx)("small",{children:"(PostgreSQL)"}),"."]})]})]})]}),"\n",(0,l.jsx)(n.h4,{id:"default-expressions",children:"Default Expressions"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"defaultValue"})," modifier accepts a value or an ",(0,l.jsx)(n.code,{children:"Orm::Query::Expression"})," instance. Using an ",(0,l.jsx)(n.code,{children:"Expression"})," instance will prevent TinyORM from wrapping the value in quotes and allow you to use database-specific functions. One situation where this is particularly useful is when you need to assign default values to JSON columns:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#include <orm/schema.hpp>\n\nusing Orm::Query::Expression;\n\nSchema::create("flights", [](Blueprint &table)\n{\n    table.id();\n    table.json("detail").defaultValue(Expression("(JSON_ARRAY(\'none\'))"));\n    table.timestamps();\n});\n'})}),"\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsx)(n.p,{children:"Support for default expressions depends on your database driver, database version, and the field type. Please refer to your database's documentation."})}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsxs)(n.p,{children:["You can obtain an ",(0,l.jsx)(n.code,{children:"Orm::Query::Expression"})," using the ",(0,l.jsx)(n.a,{href:"/database/query-builder#raw-expressions",children:(0,l.jsx)(n.code,{children:"DB::raw"})})," method if you have access to the ",(0,l.jsx)(n.code,{children:"DB"})," facade."]})}),"\n",(0,l.jsx)(n.h4,{id:"column-order",children:"Column Order"}),"\n",(0,l.jsxs)(n.p,{children:["When using the MySQL database, the ",(0,l.jsx)(n.code,{children:"after"})," method may be used to add columns after an existing column in the schema:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.after("password", [](Blueprint &table)\n{\n    table.string("address_line1");\n    table.string("address_line2");\n    table.string("city");\n});\n'})}),"\n",(0,l.jsx)(n.h3,{id:"modifying-columns",children:"Modifying Columns"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"change"})," method allows you to modify the type and attributes of existing columns. For example, you may wish to increase the size of a ",(0,l.jsx)(n.code,{children:"string"})," column. To see the ",(0,l.jsx)(n.code,{children:"change"})," method in action, let's increase the size of the ",(0,l.jsx)(n.code,{children:"name"})," column from 25 to 50. To accomplish this, we simply define the new state of the column and then call the ",(0,l.jsx)(n.code,{children:"change"})," method:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#include <orm/schema.hpp>\n\nSchema::table("users", [](Blueprint &table)\n{\n    table.string("name", 50).change();\n});\n'})}),"\n",(0,l.jsxs)(n.p,{children:["When modifying a column, you must explicitly include all of the modifiers you want to keep on the column definition - any missing attribute will be dropped. For example, to retain the ",(0,l.jsx)(n.code,{children:"unsigned"}),", ",(0,l.jsx)(n.code,{children:"default"}),", and ",(0,l.jsx)(n.code,{children:"comment"})," attributes, you must call each modifier explicitly when changing the column:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'Schema::table("users", [](Blueprint &table)\n{\n    table.integer("votes").isUnsigned().defaultValue(1).comment("my comment").change();\n});\n'})}),"\n",(0,l.jsx)(n.admonition,{type:"info",children:(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"change"})," method and modifying columns is not implemented for the ",(0,l.jsx)(n.code,{children:"SQLite"})," database because it doesn't support modifying columns out of the box."]})}),"\n",(0,l.jsx)(n.h4,{id:"renaming-columns",children:"Renaming Columns"}),"\n",(0,l.jsxs)(n.p,{children:["To rename a column, you may use the ",(0,l.jsx)(n.code,{children:"renameColumn"})," method provided by the schema builder blueprint:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'Schema::table("users", [](Blueprint &table)\n{\n    table.renameColumn("from", "to");\n});\n'})}),"\n",(0,l.jsx)(n.h4,{id:"renaming-columns-on-legacy-databases",children:"Renaming Columns On Legacy Databases"}),"\n",(0,l.jsx)(n.p,{children:"Renaming columns is not supported if you are running a database installation older than one of the following releases:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["MySQL ",(0,l.jsx)(n.code,{children:"<8.0.3"})]}),"\n",(0,l.jsxs)(n.li,{children:["MariaDB ",(0,l.jsx)(n.code,{children:"<10.5.2"})]}),"\n",(0,l.jsxs)(n.li,{children:["SQLite ",(0,l.jsx)(n.code,{children:"<3.25.0"})]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"dropping-columns",children:"Dropping Columns"}),"\n",(0,l.jsxs)(n.p,{children:["To drop a column, you may use the ",(0,l.jsx)(n.code,{children:"dropColumn"})," method on the schema builder blueprint:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'Schema::table("users", [](Blueprint &table)\n{\n    table.dropColumn("votes");\n});\n'})}),"\n",(0,l.jsxs)(n.p,{children:["You may drop multiple columns from a table by passing a ",(0,l.jsx)(n.code,{children:"QVector<QString>"})," of column names to the ",(0,l.jsx)(n.code,{children:"dropColumns"})," method, the ",(0,l.jsx)(n.code,{children:"dropColumns"})," method also provides parameter pack overload:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'Schema::table("users", [](Blueprint &table)\n{\n    table.dropColumns({"votes", "avatar", "location"});\n    // Parameter pack overload\n    table.dropColumns("votes", "avatar", "location");\n});\n'})}),"\n",(0,l.jsx)(n.admonition,{type:"warning",children:(0,l.jsxs)(n.p,{children:["The SQLite prior to ",(0,l.jsx)(n.code,{children:"v3.35.0"})," doesn't support dropping columns using the ",(0,l.jsx)(n.code,{children:"ALTER TABLE DROP COLUMN"}),", dropping columns was added in the SQLite ",(0,l.jsx)(n.code,{children:"v3.35.0"})," as is described in the ",(0,l.jsx)(n.a,{href:"https://www.sqlite.org/releaselog/3_35_0.html",children:"release notes"}),"."]})}),"\n",(0,l.jsx)(n.h4,{id:"available-command-aliases",children:"Available Command Aliases"}),"\n",(0,l.jsx)(n.p,{children:"TinyORM provides several convenient methods related to dropping common types of columns. Each of these methods is described in the table below:"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Command"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"table.dropRememberToken();"})}),(0,l.jsxs)(n.td,{children:["Drop the ",(0,l.jsx)(n.code,{children:"remember_token"})," column."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"table.dropSoftDeletes();"})}),(0,l.jsxs)(n.td,{children:["Drop the ",(0,l.jsx)(n.code,{children:"deleted_at"})," column."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"table.dropSoftDeletesDatetime();"})}),(0,l.jsxs)(n.td,{children:["Alias of ",(0,l.jsx)(n.code,{children:"dropSoftDeletes()"})," method."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"table.dropSoftDeletesTz();"})}),(0,l.jsxs)(n.td,{children:["Alias of ",(0,l.jsx)(n.code,{children:"dropSoftDeletes()"})," method."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"table.dropTimestamps();"})}),(0,l.jsxs)(n.td,{children:["Drop the ",(0,l.jsx)(n.code,{children:"created_at"})," and ",(0,l.jsx)(n.code,{children:"updated_at"})," columns."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"table.dropTimestampsTz();"})}),(0,l.jsxs)(n.td,{children:["Alias of ",(0,l.jsx)(n.code,{children:"dropTimestamps()"})," method."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"table.dropDatetimes();"})}),(0,l.jsxs)(n.td,{children:["Alias of ",(0,l.jsx)(n.code,{children:"dropTimestamps()"})," method."]})]})]})]}),"\n",(0,l.jsx)(n.h2,{id:"indexes",children:"Indexes"}),"\n",(0,l.jsx)(n.h3,{id:"creating-indexes",children:"Creating Indexes"}),"\n",(0,l.jsxs)(n.p,{children:["The TinyORM schema builder supports several types of indexes. The following example creates a new ",(0,l.jsx)(n.code,{children:"email"})," column and specifies that its values should be unique. To create the index, we can chain the ",(0,l.jsx)(n.code,{children:"unique"})," method onto the column definition:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#include <orm/schema.hpp>\n\nSchema::table("users", [](Blueprint &table)\n{\n    table.string("email").unique();\n});\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Alternatively, you may create the index after defining the column. To do so, you should call the ",(0,l.jsx)(n.code,{children:"unique"})," method on the schema builder blueprint. This method accepts the name of the column that should receive a unique index:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.unique("email");\n'})}),"\n",(0,l.jsxs)(n.p,{children:["You may even pass a ",(0,l.jsx)(n.code,{children:"QVector<QString>"})," of columns to an index method to create a compound (or composite) index:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.index({"account_id", "created_at"});\n'})}),"\n",(0,l.jsx)(n.p,{children:"When creating an index, TinyORM will automatically generate an index name based on the table, column names, and the index type (eg. users_email_unique), but you may pass a second argument to the method to specify the index name yourself:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.unique("email", "unique_email");\n'})}),"\n",(0,l.jsx)(n.h4,{id:"available-index-types",children:"Available Index Types"}),"\n",(0,l.jsx)(n.p,{children:"TinyORM's schema builder blueprint class provides methods for creating each type of index supported by TinyORM. Each index method accepts an optional second argument to specify the name of the index. If omitted, the name will be derived from the names of the table and column(s) used for the index, as well as the index type (eg. users_email_fulltext). Each of the available index methods is described in the table below:"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Command"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'table.primary("id");'})}),(0,l.jsx)(n.td,{children:"Adds a primary key."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'table.primary({"id", "parent_id"});'})}),(0,l.jsx)(n.td,{children:"Adds composite keys."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'table.unique("email");'})}),(0,l.jsx)(n.td,{children:"Adds a unique index."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'table.index("state");'})}),(0,l.jsx)(n.td,{children:"Adds an index."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'table.fullText("body");'})}),(0,l.jsx)(n.td,{children:"Adds a full text index (MySQL/PostgreSQL)."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)("small",{children:(0,l.jsx)(n.code,{children:'table.fullText("body").language("english");'})})}),(0,l.jsx)(n.td,{children:"Adds a full text index of the specified language (PostgreSQL)."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'table.spatialIndex("location");'})}),(0,l.jsx)(n.td,{children:"Adds a spatial index (except SQLite)."})]})]})]}),"\n",(0,l.jsx)(n.h4,{id:"index-lengths--mysql--mariadb",children:"Index Lengths & MySQL / MariaDB"}),"\n",(0,l.jsxs)(n.p,{children:["By default, TinyORM uses the ",(0,l.jsx)(n.code,{children:"utf8mb4"})," character set. If you are running a version of MySQL older than the 5.7.7 release or MariaDB older than the 10.2.2 release, you may need to manually configure the default string length generated by migrations in order for MySQL to create indexes for them. You may configure the default string length by calling the ",(0,l.jsx)(n.code,{children:"Schema::defaultStringLength"})," method:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"#include <orm/schema.hpp>\n\nSchema::defaultStringLength(191);\n"})}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsxs)(n.p,{children:["Alternatively, you may enable the ",(0,l.jsx)(n.code,{children:"innodb_large_prefix"})," option for your database (enabled by default in >=MySQL 5.7.7). Refer to your database's documentation for instructions on how to properly enable this option."]})}),"\n",(0,l.jsx)(n.h3,{id:"renaming-indexes",children:"Renaming Indexes"}),"\n",(0,l.jsxs)(n.p,{children:["To rename an index, you may use the ",(0,l.jsx)(n.code,{children:"renameIndex"})," method provided by the schema builder blueprint. This method accepts the current index name as its first argument and the desired name as its second argument:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.renameIndex("from", "to");\n'})}),"\n",(0,l.jsx)(n.h3,{id:"dropping-indexes",children:"Dropping Indexes"}),"\n",(0,l.jsx)(n.p,{children:"To drop an index, you must specify the index's name. By default, TinyORM automatically assigns an index name based on the table name, the name of the indexed column, and the index type (eg. users_email_unique). Here are some examples:"}),"\n",(0,l.jsx)("div",{id:"apitable-dropping-indexes",children:(0,l.jsx)(s.A,{children:(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Command"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'table.dropPrimary("users_id_primary");'})}),(0,l.jsx)(n.td,{children:'Drop a primary key from the "users" table.'})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'table.dropUnique("users_email_unique");'})}),(0,l.jsx)(n.td,{children:'Drop a unique index from the "users" table.'})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'table.dropIndex("geo_state_index");'})}),(0,l.jsx)(n.td,{children:'Drop a basic index from the "geo" table.'})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)("small",{children:(0,l.jsx)(n.code,{children:'table.dropFullText("posts_body_fulltext");'})})}),(0,l.jsx)(n.td,{children:'Drop a full text index from the "posts" table.'})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)("small",{children:(0,l.jsx)(n.code,{children:'.dropSpatialIndex("geo_location_spatialindex");'})})}),(0,l.jsx)(n.td,{children:'Drop a spatial index from the "geo" table  (except SQLite).'})]})]})]})})}),"\n",(0,l.jsxs)(n.p,{children:["I may also drop indexes by a column name or column names for composite keys, if you pass a ",(0,l.jsx)(n.code,{children:"QVector<QString>"})," of columns into a method that drops indexes, the conventional index name will be generated based on the table name, columns, and index type:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'Schema::table("geo", [](Blueprint &table)\n{\n    table.dropIndex({"state"}); // Drops index \'geo_state_index\'\n});\n'})}),"\n",(0,l.jsx)(n.h3,{id:"foreign-key-constraints",children:"Foreign Key Constraints"}),"\n",(0,l.jsxs)(n.p,{children:["TinyORM also provides support for creating foreign key constraints, which are used to force referential integrity at the database level. For example, let's define a ",(0,l.jsx)(n.code,{children:"user_id"})," column on the ",(0,l.jsx)(n.code,{children:"posts"})," table that references the ",(0,l.jsx)(n.code,{children:"id"})," column on a ",(0,l.jsx)(n.code,{children:"users"})," table:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#include <orm/schema.hpp>\n\nusing Orm::Constants::ID;\n\nSchema::table("posts", [](Blueprint &table)\n{\n    table.unsignedBigInteger("user_id");\n\n    table.foreign("user_id").references(ID).on("users");\n});\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Since this syntax is rather verbose, TinyORM provides additional, terser methods that use conventions to provide a better developer experience. When using the ",(0,l.jsx)(n.code,{children:"foreignId"})," method to create your column, the example above can be rewritten like so:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'Schema::table("posts", [](Blueprint &table)\n{\n    table.foreignId("user_id").constrained();\n});\n'})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"foreignId"})," method creates an ",(0,l.jsx)(n.code,{children:"UNSIGNED BIGINT"})," equivalent column, while the ",(0,l.jsx)(n.code,{children:"constrained"})," method will use conventions to determine the table and column name being referenced. If your table name does not match TinyORM's conventions, you may specify the table name by passing it as an argument to the ",(0,l.jsx)(n.code,{children:"constrained"})," method:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'Schema::table("posts", [](Blueprint &table)\n{\n    table.foreignId("user_id").constrained("users");\n});\n'})}),"\n",(0,l.jsx)(n.p,{children:'You may also specify the desired action for the "on delete" and "on update" properties of the constraint:'}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#include <orm/constants.hpp>\n\nusing Orm::SchemaNs::Constants::Cascade;\n\ntable.foreignId("user_id")\n     .constrained()\n     .onUpdate("cascade")\n     .onDelete(Cascade);\n'})}),"\n",(0,l.jsx)(n.p,{children:"An alternative, expressive syntax is also provided for these actions:"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Method"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"table.cascadeOnUpdate();"})}),(0,l.jsx)(n.td,{children:"Updates should cascade."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"table.restrictOnUpdate();"})}),(0,l.jsx)(n.td,{children:"Updates should be restricted."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"table.cascadeOnDelete();"})}),(0,l.jsx)(n.td,{children:"Deletes should cascade."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"table.restrictOnDelete();"})}),(0,l.jsx)(n.td,{children:"Deletes should be restricted."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"table.nullOnDelete();"})}),(0,l.jsx)(n.td,{children:"Deletes should set the foreign key value to null."})]})]})]}),"\n",(0,l.jsxs)(n.p,{children:["Any additional ",(0,l.jsx)(n.a,{href:"#column-modifiers",children:"column modifiers"})," must be called before the ",(0,l.jsx)(n.code,{children:"constrained"})," method:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.foreignId("user_id")\n     .nullable()\n     .constrained();\n'})}),"\n",(0,l.jsx)(n.h4,{id:"dropping-foreign-keys",children:"Dropping Foreign Keys"}),"\n",(0,l.jsxs)(n.p,{children:["To drop a foreign key, you may use the ",(0,l.jsx)(n.code,{children:"dropForeign"}),' method, passing the name of the foreign key constraint to be deleted as an argument. Foreign key constraints use the same naming convention as indexes. In other words, the foreign key constraint name is based on the name of the table and the columns in the constraint, followed by a "_foreign" suffix:']}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.dropForeign("posts_user_id_foreign");\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Alternatively, you may pass a ",(0,l.jsx)(n.code,{children:"QVector<QString>"})," containing the column name that holds the foreign key to the ",(0,l.jsx)(n.code,{children:"dropForeign"})," method. The ",(0,l.jsx)(n.code,{children:"QVector"})," will be converted to a foreign key constraint name using TinyORM's constraint naming conventions:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'table.dropForeign({"user_id"});\n'})}),"\n",(0,l.jsx)(n.h4,{id:"toggling-foreign-key-constraints",children:"Toggling Foreign Key Constraints"}),"\n",(0,l.jsx)(n.p,{children:"You may enable or disable foreign key constraints within your migrations by using the following methods:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"Schema::enableForeignKeyConstraints();\n\nSchema::disableForeignKeyConstraints();\n\nSchema::withoutForeignKeyConstraints([]\n{\n    // Constraints disabled within this lambda expression...\n});\n"})}),"\n",(0,l.jsx)(n.admonition,{type:"warning",children:(0,l.jsxs)(n.p,{children:["The SQLite disables foreign key constraints by default. When using SQLite, make sure to ",(0,l.jsx)(n.a,{href:"/database/getting-started#sqlite-configuration",children:"enable foreign key support"})," in your database configuration before attempting to create them in your migrations. In addition, SQLite only supports creating foreign keys when creating tables and ",(0,l.jsx)(n.a,{href:"https://www.sqlite.org/omitted.html",children:"not when tables are altered"}),"."]})})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(j,{...e})}):j(e)}},9365:(e,n,i)=>{i.d(n,{A:()=>d});i(6540);var l=i(4164);const t={tabItem:"tabItem_Ymn6"};var s=i(4848);function d(e){let{children:n,hidden:i,className:d}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,l.A)(t.tabItem,d),hidden:i,children:n})}},1470:(e,n,i)=>{i.d(n,{A:()=>T});var l=i(6540),t=i(4164),s=i(3104),d=i(6347),a=i(205),o=i(7485),r=i(1682),c=i(679);function h(e){return l.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:i}=e;return(0,l.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:i,attributes:l,default:t}}=e;return{value:n,label:i,attributes:l,default:t}}))}(i);return function(e){const n=(0,r.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,i])}function u(e){let{value:n,tabValues:i}=e;return i.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:i}=e;const t=(0,d.W6)(),s=function(e){let{queryString:n=!1,groupId:i}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:n,groupId:i});return[(0,o.aZ)(s),(0,l.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})}),[s,t])]}function p(e){const{defaultValue:n,queryString:i=!1,groupId:t}=e,s=m(e),[d,o]=(0,l.useState)((()=>function(e){let{defaultValue:n,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const l=i.find((e=>e.default))??i[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:n,tabValues:s}))),[r,h]=x({queryString:i,groupId:t}),[p,j]=function(e){let{groupId:n}=e;const i=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,s]=(0,c.Dv)(i);return[t,(0,l.useCallback)((e=>{i&&s.set(e)}),[i,s])]}({groupId:t}),g=(()=>{const e=r??p;return u({value:e,tabValues:s})?e:null})();(0,a.A)((()=>{g&&o(g)}),[g]);return{selectedValue:d,selectValue:(0,l.useCallback)((e=>{if(!u({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),j(e)}),[h,j,s]),tabValues:s}}var j=i(2303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=i(4848);function f(e){let{className:n,block:i,selectedValue:l,selectValue:d,tabValues:a}=e;const o=[],{blockElementScrollPositionUntilNextRender:r}=(0,s.a_)(),c=e=>{const n=e.currentTarget,i=o.indexOf(n),t=a[i].value;t!==l&&(r(n),d(t))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const i=o.indexOf(e.currentTarget)+1;n=o[i]??o[0];break}case"ArrowLeft":{const i=o.indexOf(e.currentTarget)-1;n=o[i]??o[o.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":i},n),children:a.map((e=>{let{value:n,label:i,attributes:s}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,ref:e=>o.push(e),onKeyDown:h,onClick:c,...s,className:(0,t.A)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":l===n}),children:i??n},n)}))})}function y(e){let{lazy:n,children:i,selectedValue:t}=e;const s=(Array.isArray(i)?i:[i]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===t));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function v(e){const n=p(e);return(0,b.jsxs)("div",{className:(0,t.A)("tabs-container",g.tabList),children:[(0,b.jsx)(f,{...n,...e}),(0,b.jsx)(y,{...n,...e})]})}function T(e){const n=(0,j.A)();return(0,b.jsx)(v,{...e,children:h(e.children)},String(n))}},6684:(e,n,i)=>{i.d(n,{A:()=>c});var l=i(6540),t=i(3427),s=i(6347);const d={apiTable:"apiTable_flxF"};var a=i(4848);function o(e,n){let{name:i,children:d}=e;const o=function(e){let n=e;for(;(0,l.isValidElement)(n);)[n]=l.Children.toArray(n.props.children);if("string"!=typeof n)throw new Error(`Could not extract APITable row name from JSX tree:\n${JSON.stringify(e,null,2)}`);return n}(d),r=i?`${i}-${o}`:o,c=`#${r}`,h=(0,s.W6)();return(0,t.A)().collectAnchor(r),(0,a.jsx)("tr",{id:r,tabIndex:0,ref:h.location.hash===c?n:void 0,onClick:e=>{const n=e.target;[n,n.parentElement].some((e=>"A"===e?.tagName.toUpperCase()))||h.push(c)},onKeyDown:e=>{"Enter"===e.key&&h.push(c)},children:d.props.children})}const r=l.forwardRef(o);function c(e){let{children:n,name:i}=e;if("table"!==n.type)throw new Error("Bad usage of APITable component.\nIt is probably that your Markdown table is malformed.\nMake sure to double-check you have the appropriate number of columns for each table row.");const[t,s]=l.Children.toArray(n.props.children),o=(0,l.useRef)(null);(0,l.useEffect)((()=>{o.current?.focus()}),[o]);const c=l.Children.map(s.props.children,(e=>(0,a.jsx)(r,{name:i,ref:o,children:e})));return(0,a.jsxs)("table",{className:d.apiTable,children:[t,(0,a.jsx)("tbody",{children:c})]})}},7324:(e,n,i)=>{i.d(n,{$E:()=>j,A3:()=>b,CW:()=>g,Dx:()=>c,F4:()=>m,Fi:()=>r,J_:()=>T,LQ:()=>f,Lf:()=>I,OO:()=>t,Q7:()=>y,b:()=>a,cy:()=>o,gg:()=>x,kl:()=>u,os:()=>h,pW:()=>s,ux:()=>p,vf:()=>l,xj:()=>d,xt:()=>v});const l="shell",t="database",s="application",d="bash",a="pwsh",o="zsh",r="maria",c="mysql",h="postgres",m="sqlite",u="application",x="bash",p="pwsh",j="zsh",g="MariaDB",b="MySQL",f="PostgreSQL",y="SQLite",v="tinyorm.org",T="$HOME/Code/c/",I="$env:USERPROFILE\\Code\\c\\"},6362:(e,n,i)=>{i.d(n,{A:()=>s});var l=i(6540),t=i(1838);function s(){const e=(0,l.useContext)(t.A);if(null!=e)return e;throw new Error("useRootFolderContext is used outside of Layout component.")}},6694:(e,n,i)=>{i.d(n,{OZ:()=>o,Sn:()=>d,T3:()=>c,bw:()=>r,nC:()=>h,np:()=>a});var l=i(6362),t=i(2303),s=i(7324);const d=function(e,n){return void 0===n&&(n=!0),m((0,l.A)().rootFolder[e]??r(e),e,n)},a=()=>(0,l.A)().rootFolder[s.pW]??r(s.pW),o=function(e,n){if(void 0===n&&(n=!0),null==e)throw new Error("The groupId in the applicationFolderPath() can not be empty.");const i=n||e!==s.b?"/":"\\";return m(d(e)+i+a(),e,n)};function r(e){if(null==e)throw new Error("The groupId in the folderDefaultValue() can not be empty.");if(!(0,t.A)())return"";switch(e){case s.b:return s.Lf;case s.xj:return s.J_;case s.pW:return s.xt;default:throw new Error(`No default value for '${e}' groupId in the folderDefaultValue().`)}}function c(e){return e===s.pW}function h(e,n){if(null==n||""===n)return n;const i="$ENV{$1}$2";switch(e){case s.b:return x(n).replace(/\$env:(.+?)(\/.*)/,i);case s.xj:return n.replace(/\$(.+?)(\/.*)/,i);default:throw new Error(`Unsupported shell type '${e}' in the convertToCmakeEnvVariable().`)}}function m(e,n,i){if(void 0===i&&(i=!0),null==e||""===e)return e;if(n!==s.b)return u(e);const l=u(e);return i?x(l):function(e){return null==e||""===e?e:e.replaceAll(/\/+/g,"\\")}(l)}function u(e){return null==e||""===e?e:e.replace(/[/\\]+$/,"")}function x(e){return null==e||""===e?e:e.replaceAll(/\\+(?! )/g,"/")}},5848:(e,n,i)=>{i.d(n,{A:()=>l});const l=i.p+"assets/images/tom_cli-402f7dd4dfe7dbd0b20dfe5fb61838a2.png"}}]);