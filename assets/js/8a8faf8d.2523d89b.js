"use strict";(self.webpackChunktinyorm_org=self.webpackChunktinyorm_org||[]).push([[225],{5162:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(7294),i=t(6010);const r="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,o),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>C});var a=t(7462),i=t(7294),r=t(6010),o=t(6775),l=t(1980),s=t(7392),m=t(12);function p(e){return function(e){return i.Children.map(e,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}function d(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??p(t);return function(e){const n=(0,s.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function u(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function c(e){let{queryString:n=!1,groupId:t}=e;const a=(0,o.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function k(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=d(e),[o,l]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[s,p]=c({queryString:t,groupId:a}),[k,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,m.Nk)(t);return[a,(0,i.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),h=(()=>{const e=s??k;return u({value:e,tabValues:r})?e:null})();(0,i.useLayoutEffect)((()=>{h&&l(h)}),[h]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!u({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),g(e)}),[p,g,r]),tabValues:r}}var g=t(2466),h=t(2389);const b="tabList__CuJ",T="tabItem_LNqP";function N(e){let{className:n,block:t,selectedValue:o,selectValue:l,tabValues:s}=e;const m=[],{blockElementScrollPositionUntilNextRender:p}=(0,g.o5)(),d=e=>{const n=e.currentTarget,t=m.indexOf(n),a=s[t].value;a!==o&&(p(n),l(a))},u=e=>{var n;let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=m.indexOf(e.currentTarget)+1;t=m[n]??m[0];break}case"ArrowLeft":{const n=m.indexOf(e.currentTarget)-1;t=m[n]??m[m.length-1];break}}null==(n=t)||n.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n)},s.map((e=>{let{value:n,label:t,attributes:l}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,key:n,ref:e=>m.push(e),onKeyDown:u,onClick:d},l,{className:(0,r.Z)("tabs__item",T,null==l?void 0:l.className,{"tabs__item--active":o===n})}),t??n)})))}function f(e){let{lazy:n,children:t,selectedValue:a}=e;if(t=Array.isArray(t)?t:[t],n){const e=t.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},t.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function _(e){const n=k(e);return i.createElement("div",{className:(0,r.Z)("tabs-container",b)},i.createElement(N,(0,a.Z)({},e,n)),i.createElement(f,(0,a.Z)({},e,n)))}function C(e){const n=(0,h.Z)();return i.createElement(_,(0,a.Z)({key:String(n)},e))}},2044:(e,n,t)=>{t.d(n,{$t:()=>p,Ae:()=>g,C:()=>c,Fo:()=>l,Fs:()=>i,IM:()=>k,IZ:()=>a,RS:()=>_,VE:()=>h,Wg:()=>T,al:()=>f,jk:()=>u,js:()=>s,of:()=>m,q5:()=>o,qb:()=>N,vk:()=>d,wU:()=>r,zg:()=>b});const a="shell",i="database",r="application",o="bash",l="pwsh",s="zsh",m="mysql",p="postgres",d="sqlite",u="application",c="bash",k="pwsh",g="zsh",h="MySQL",b="PostgreSQL",T="SQLite",N="TestApp",f="$HOME/Code/c/",_="$env:USERPROFILE\\Code\\c\\"},4355:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(7294),i=t(9482);function r(){const e=(0,a.useContext)(i.Z);if(null!=e)return e;throw new Error("useRootFolderContext is used outside of Layout component.")}},6005:(e,n,t)=>{t.d(n,{AE:()=>l,EA:()=>o,em:()=>m,go:()=>s,mT:()=>p,we:()=>d});var a=t(4355),i=t(2389),r=t(2044);const o=function(e,n){return void 0===n&&(n=!0),u((0,a.Z)().rootFolder[e]??m(e),e,n)},l=()=>(0,a.Z)().rootFolder[r.wU]??m(r.wU),s=function(e,n){if(void 0===n&&(n=!0),null==e)throw new Error("The groupId in the applicationFolderPath() can not be empty.");const t=n||e!==r.Fo?"/":"\\";return u(o(e)+t+l(),e,n)};function m(e){if(null==e)throw new Error("The groupId in the folderDefaultValue() can not be empty.");if(!(0,i.Z)())return"";switch(e){case r.Fo:return r.RS;case r.q5:return r.al;case r.wU:return r.qb;default:throw new Error(`No default value for '${e}' groupId in the folderDefaultValue().`)}}function p(e){return e===r.wU}function d(e,n){if(null==n||""===n)return n;const t="$ENV{$1}$2";switch(e){case r.Fo:return k(n).replace(/\$env:(.+?)(\/.*)/,t);case r.q5:return n.replace(/\$(.+?)(\/.*)/,t);default:throw new Error(`Unsupported shell type '${e}' in the convertToCmakeEnvVariable().`)}}function u(e,n,t){if(void 0===t&&(t=!0),null==e||""===e)return e;if(n!==r.Fo)return c(e);const a=c(e);return t?k(a):function(e){return null==e||""===e?e:e.replaceAll(/\/+/g,"\\")}(a)}function c(e){return null==e||""===e?e:e.replace(/[/\\]+$/,"")}function k(e){return null==e||""===e?e:e.replaceAll(/\\+(?! )/g,"/")}},3974:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>p,metadata:()=>u,toc:()=>k});var a=t(7462),i=(t(7294),t(3905)),r=t(452),o=t(5162),l=t(4866),s=t(2044),m=t(6005);const p={sidebar_position:3,sidebar_label:"Migrations",description:"How to compile the TinyORM migrations (tom) c++ console application on Windows and Linux.",keywords:["c++ orm","building","migrations","tinyorm"]},d="Building: Migrations",u={unversionedId:"building/migrations",id:"building/migrations",title:"Building: Migrations",description:"How to compile the TinyORM migrations (tom) c++ console application on Windows and Linux.",source:"@site/docs/building/migrations.mdx",sourceDirName:"building",slug:"/building/migrations",permalink:"/building/migrations",draft:!1,editUrl:"https://github.com/silverqx/TinyORM-github.io/edit/main/docs/building/migrations.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Migrations",description:"How to compile the TinyORM migrations (tom) c++ console application on Windows and Linux.",keywords:["c++ orm","building","migrations","tinyorm"]},sidebar:"tinyormSidebar",previous:{title:"Hello world",permalink:"/building/hello-world"},next:{title:"\ud83d\udcc4 Features Summary",permalink:"/features-summary"}},c={},k=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"vcpkg.json manifest",id:"vcpkg-json-manifest",level:3},{value:"Source code",id:"source-code",level:2},{value:"Main file",id:"main-file",level:3},{value:"Migrations",id:"migrations",level:3},{value:"Seeders",id:"seeders",level:3},{value:"Migrations with CMake",id:"migrations-with-cmake",level:2},{value:"CMake project",id:"cmake-project",level:3},{value:"Build migrations",id:"build-migrations-cmake",level:3},{value:"Execute migrations",id:"execute-migrations-cmake",level:3},{value:"Migrations with qmake",id:"migrations-with-qmake",level:2},{value:"qmake project",id:"qmake-project",level:3},{value:"Configure using .qmake.conf",id:"configure-using-qmakeconf",level:4},{value:"Migrations source files",id:"migrations-source-files",level:4},{value:"Seeders source files",id:"seeders-source-files",level:4},{value:"Build migrations",id:"build-migrations-qmake",level:3},{value:"Execute migrations",id:"execute-migrations-qmake",level:3},{value:"Finish",id:"finish",level:2}],g={toc:k};function h(e){let{components:n,...p}=e;return(0,i.kt)("wrapper",(0,a.Z)({},g,p,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"building-migrations"},"Building: Migrations"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#prerequisites"},"Prerequisites"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#vcpkg-json-manifest"},"vcpkg.json manifest")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#source-code"},"Source code"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#main-file"},"Main file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#migrations"},"Migrations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#seeders"},"Seeders")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#migrations-with-cmake"},"Migrations with CMake"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#cmake-project"},"CMake project")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#build-migrations-cmake"},"Build migrations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#execute-migrations-cmake"},"Execute migrations")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#migrations-with-qmake"},"Migrations with qmake"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#qmake-project"},"qmake project")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#build-migrations-qmake"},"Build migrations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#execute-migrations-qmake"},"Execute migrations")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#finish"},"Finish"))),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"We will try to create a working migrations console application called as ",(0,i.kt)("abbr",{title:"TinyORM migrations"},(0,i.kt)("inlineCode",{parentName:"p"},"tom"))," in the terminal with the ",(0,i.kt)("inlineCode",{parentName:"p"},"CMake")," and in the ",(0,i.kt)("inlineCode",{parentName:"p"},"QtCreator")," IDE with the ",(0,i.kt)("inlineCode",{parentName:"p"},"qmake"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," console application also expects the following ",(0,i.kt)("a",{parentName:"p",href:"/building/tinyorm#folders-structure"},"folders structure"),", let's create them."),(0,i.kt)(l.Z,{groupId:s.IZ,mdxType:"Tabs"},(0,i.kt)(o.Z,{value:s.Fo,label:s.IM,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},`cd ${(0,m.go)(s.Fo)}\nmkdir tom/tom\ncd tom`)),(0,i.kt)(o.Z,{value:s.q5,label:s.C,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},`cd ${(0,m.go)(s.q5)}\nmkdir -p tom/tom\ncd tom`))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"TinyORM")," source tree contains the ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," example application, you can inspire or look at the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/silverqx/TinyORM/tree/main/examples/tom"},"source code"),". Also ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyORM")," unit tests use a ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," migrations internally to create the database structure, internally called as the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/silverqx/TinyORM/tree/main/tests/testdata_tom"},(0,i.kt)("inlineCode",{parentName:"a"},"tom")," migrations for unit tests"),"."),(0,i.kt)("p",null,"All these three console applications the ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," example, ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," migrations for unit tests, and the application described in this tutorial have practically identical source code (the main.cpp file)."),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"Working MySQL database server as the ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," migrations currently provides support only for the MySQL database."),(0,i.kt)("p",null,"Install required dependencies and build the ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyORM")," library with the ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," (it's enabled by default) as is described ",(0,i.kt)("a",{parentName:"p",href:"/building/hello-world#install-dependencies"},"here")," and ",(0,i.kt)("a",{parentName:"p",href:"/building/tinyorm"},"here"),"."),(0,i.kt)("h3",{id:"vcpkg-json-manifest"},"vcpkg.json manifest"),(0,i.kt)("p",null,"Whole section about the ",(0,i.kt)("inlineCode",{parentName:"p"},"vcpkg")," dependencies is described in the ",(0,i.kt)("a",{parentName:"p",href:"/building/hello-world#install-dependencies"},"Install dependencies"),"."),(0,i.kt)("p",null,"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"vcpkg.json")," file with the following content. ",(0,i.kt)("inlineCode",{parentName:"p"},"CMake")," example below uses this method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd tom\nvim vcpkg.json\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "https://raw.githubusercontent.com/microsoft/vcpkg/master/scripts/vcpkg.schema.json",\n  "name": "tom",\n  "version-semver": "0.1.0",\n  "description": "Tom console for TinyORM.",\n  "maintainers": "Silver Zachara <silver.zachara@gmail.com>",\n  "supports": "!(uwp | arm | android | emscripten)",\n  "dependencies": [\n    "range-v3",\n    "tabulate"\n  ]\n}\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Only ",(0,i.kt)("inlineCode",{parentName:"p"},"CMake")," via the ",(0,i.kt)("inlineCode",{parentName:"p"},"toolchain file")," supports this method.")),(0,i.kt)("h2",{id:"source-code"},"Source code"),(0,i.kt)("p",null,"Let's start in the ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," project folder."),(0,i.kt)(l.Z,{groupId:s.IZ,mdxType:"Tabs"},(0,i.kt)(o.Z,{value:s.Fo,label:s.IM,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},`cd ${(0,m.go)(s.Fo)}/tom/tom`)),(0,i.kt)(o.Z,{value:s.q5,label:s.C,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},`cd ${(0,m.go)(s.q5)}/tom/tom`))),(0,i.kt)("h3",{id:"main-file"},"Main file"),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"main.cpp")," source file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"vim main.cpp\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"To paste a source code correctly in ",(0,i.kt)("inlineCode",{parentName:"p"},"vim"),", press ",(0,i.kt)("kbd",null,"Shift")," + ",(0,i.kt)("kbd",null,"p"),".")),(0,i.kt)("p",null,"And paste the following code."),(0,i.kt)("a",{id:"string-constants-example"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include <orm/db.hpp>\n\n#include <tom/application.hpp>\n\n#include "migrations/2014_10_12_000000_create_posts_table.hpp"\n\n#include "seeders/databaseseeder.hpp"\n\nusing Orm::DatabaseManager;\nusing Orm::DB;\n\nusing TomApplication = Tom::Application;\n\nusing namespace Migrations; // NOLINT(google-build-using-namespace)\nusing namespace Seeders;    // NOLINT(google-build-using-namespace)\n\n/*! Build the database manager instance and add a database connection. */\nstd::shared_ptr<DatabaseManager> setupManager();\n\n/*! c++ main function. */\nint main(int argc, char *argv[])\n{\n    try {\n        // Ownership of the shared_ptr()\n        auto db = setupManager();\n\n        return TomApplication(argc, argv, std::move(db), "TOM_MIGRATIONS_ENV")\n                .migrations<CreatePostsTable>()\n                .seeders<DatabaseSeeder>()\n                // Fire it up \ud83d\udd25\ud83d\ude80\u2728\n                .run();\n\n    } catch (const std::exception &e) {\n\n        TomApplication::logException(e);\n    }\n\n    return EXIT_FAILURE;\n}\n\nstd::shared_ptr<DatabaseManager> setupManager()\n{\n    using namespace Orm::Constants; // NOLINT(google-build-using-namespace)\n\n    // Ownership of the shared_ptr()\n    return DB::create({\n        {driver_,         QMYSQL},\n        {host_,           qEnvironmentVariable("DB_MYSQL_HOST", H127001)},\n        {port_,           qEnvironmentVariable("DB_MYSQL_PORT", P3306)},\n        {database_,       qEnvironmentVariable("DB_MYSQL_DATABASE", EMPTY)},\n        {username_,       qEnvironmentVariable("DB_MYSQL_USERNAME", EMPTY)},\n        {password_,       qEnvironmentVariable("DB_MYSQL_PASSWORD", EMPTY)},\n        {charset_,        qEnvironmentVariable("DB_MYSQL_CHARSET", UTF8MB4)},\n        {collation_,      qEnvironmentVariable("DB_MYSQL_COLLATION", UTF8MB40900aici)},\n        {timezone_,       TZ00},\n        {prefix_,         EMPTY},\n        {prefix_indexes,  true},\n        {strict_,         true},\n        {isolation_level, QStringLiteral("REPEATABLE READ")},\n        {engine_,         InnoDB},\n        {Version,         {}}, // Autodetect\n        {options_,        QVariantHash()},\n    },\n        QStringLiteral("tinyorm_tom"));\n}\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you have defined more database connections then you can tag the lines with the database connection names with the ",(0,i.kt)("inlineCode",{parentName:"p"},"// shell:connection")," comment and this connection names will be provided to the bash/zsh/pwsh completion for the ",(0,i.kt)("inlineCode",{parentName:"p"},"--database=")," option, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/silverqx/TinyORM/blob/main/examples/tom/main.cpp#L74"},"example"),".")),(0,i.kt)("h3",{id:"migrations"},"Migrations"),(0,i.kt)("p",null,"If you have already built the ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," application then you can generate a migrations using the ",(0,i.kt)("a",{parentName:"p",href:"/database/migrations#generating-migrations"},(0,i.kt)("inlineCode",{parentName:"a"},"make:migration"))," command \ud83d\ude0e."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"tom make:migration create_posts_table\n")),(0,i.kt)("p",null,"Below is the expected folders structure for the migrations. The ",(0,i.kt)("a",{parentName:"p",href:"#migrations-source-files"},(0,i.kt)("inlineCode",{parentName:"a"},"migrations.pri"))," file is used only by the ",(0,i.kt)("inlineCode",{parentName:"p"},"qmake")," build system and is not needed with ",(0,i.kt)("inlineCode",{parentName:"p"},"CMake")," builds."),(0,i.kt)("a",{id:"folders-structure"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"tom/\n\u2514\u2500\u2500 database/\n    \u251c\u2500\u2500 migrations/\n    \u251c\u2500\u2500 seeders/\n    \u251c\u2500\u2500 migrations.pri\n    \u2514\u2500\u2500 seeders.pri\n")),(0,i.kt)("p",null,"Let's create the first migration manually."),(0,i.kt)(l.Z,{groupId:s.IZ,mdxType:"Tabs"},(0,i.kt)(o.Z,{value:s.Fo,label:s.IM,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},"mkdir database/migrations\n\nvim database/migrations/2014_10_12_000000_create_posts_table.hpp")),(0,i.kt)(o.Z,{value:s.q5,label:s.C,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},"mkdir -p database/migrations\n\nvim database/migrations/2014_10_12_000000_create_posts_table.hpp"))),(0,i.kt)("p",null,"And paste the following code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#pragma once\n\n#include <tom/migration.hpp>\n\nnamespace Migrations\n{\n\n    struct CreatePostsTable : Migration\n    {\n        /*! Filename of the migration file. */\n        T_MIGRATION\n\n        /*! Run the migrations. */\n        void up() const override\n        {\n            Schema::create("posts", [](Blueprint &table)\n            {\n                table.id();\n\n                table.string(NAME);\n                table.timestamps();\n            });\n        }\n\n        /*! Reverse the migrations. */\n        void down() const override\n        {\n            Schema::dropIfExists("posts");\n        }\n    };\n\n} // namespace Migrations\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"If you want, you can also build the ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," application without the migrations, simply comment out the ",(0,i.kt)("inlineCode",{parentName:"p"},"migrations")," method and the corresponding ",(0,i.kt)("inlineCode",{parentName:"p"},'#include "migrations/xyz.hpp"')," files.")),(0,i.kt)("h3",{id:"seeders"},"Seeders"),(0,i.kt)("p",null,"If you have already built the ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," application then you can generate a seeder using the ",(0,i.kt)("a",{parentName:"p",href:"/database/seeding#writing-seeders"},(0,i.kt)("inlineCode",{parentName:"a"},"make:seeder"))," command \ud83d\ude0e."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"tom make:seeder PostSeeder\n")),(0,i.kt)("p",null,"The expected folders structure is described a few paragraphs ",(0,i.kt)("a",{parentName:"p",href:"#folders-structure"},"above"),". The ",(0,i.kt)("a",{parentName:"p",href:"#seeders-source-files"},(0,i.kt)("inlineCode",{parentName:"a"},"seeders.pri"))," file is used only by the ",(0,i.kt)("inlineCode",{parentName:"p"},"qmake")," build system and is not needed with ",(0,i.kt)("inlineCode",{parentName:"p"},"CMake")," builds."),(0,i.kt)("p",null,"Let's create the root seeder class manually."),(0,i.kt)(l.Z,{groupId:s.IZ,mdxType:"Tabs"},(0,i.kt)(o.Z,{value:s.Fo,label:s.IM,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},"mkdir database/seeders\n\nvim database/seeders/databaseseeder.hpp")),(0,i.kt)(o.Z,{value:s.q5,label:s.C,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},"mkdir -p database/seeders\n\nvim database/seeders/databaseseeder.hpp"))),(0,i.kt)("p",null,"And paste the following code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#pragma once\n\n#include <tom/seeder.hpp>\n\nnamespace Seeders\n{\n\n    /*! Main database seeder. */\n    struct DatabaseSeeder : Seeder\n    {\n        /*! Run the database seeders. */\n        void run() override\n        {\n            DB::table("posts")->insert({\n                {{"name", "1. post"}},\n                {{"name", "2. post"}},\n            });\n        }\n    };\n\n} // namespace Seeders\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can create more seeder classes like this and use the ",(0,i.kt)("inlineCode",{parentName:"p"},"call<>()")," method to invoke them as is described in the ",(0,i.kt)("a",{parentName:"p",href:"/database/seeding#calling-additional-seeders"},"Calling Additional Seeders")," section.")),(0,i.kt)("h2",{id:"migrations-with-cmake"},"Migrations with CMake"),(0,i.kt)("p",null,"Create a folder for the ",(0,i.kt)("inlineCode",{parentName:"p"},"CMake")," build."),(0,i.kt)(l.Z,{groupId:s.IZ,mdxType:"Tabs"},(0,i.kt)(o.Z,{value:s.Fo,label:s.IM,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},"cd ..\nmkdir tom-builds-cmake/build-debug\n\ncd tom")),(0,i.kt)(o.Z,{value:s.q5,label:s.C,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},"cd ..\nmkdir -p tom-builds-cmake/build-debug\n\ncd tom"))),(0,i.kt)("h3",{id:"cmake-project"},"CMake project"),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"CMakeLists.txt")," file with the following content. I leave the comments in the ",(0,i.kt)("inlineCode",{parentName:"p"},"CMakeLists.txt")," file because it's not as simple as the ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello world")," example; to make it clear what's going on."),(0,i.kt)(l.Z,{groupId:s.IZ,mdxType:"Tabs"},(0,i.kt)(o.Z,{value:s.Fo,label:s.IM,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-cmake",mdxType:"CodeBlock"},'cmake_minimum_required(VERSION VERSION 3.22...3.25 FATAL_ERROR)\n\n# Specify the C++ standard\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nset(CMAKE_AUTOMOC ON)\n\n# Tom command-line application\n# ---\n\nset(Tom_ns tom)\nset(Tom_target tom)\n\nfile(REAL_PATH "../../TinyORM" TinyMainDir)\n\nset(TinyOrmSourceDir "${TinyMainDir}/TinyORM")\nset(TinyOrmBuildDir "${TinyMainDir}/TinyORM-builds-cmake/build-debug")\n\n# TinyORM CMake modules (needed to set the executable version and RC file on Windows)\nlist(APPEND CMAKE_MODULE_PATH "${TinyOrmSourceDir}/cmake/CommonModules")\n\n# build tree\nlist(APPEND CMAKE_PREFIX_PATH "${TinyOrmBuildDir}")\n\n# Initialize Project Version\n# ---\n\ninclude(TinyHelpers)\ntiny_read_version(TINY_VERSION\n    TINY_VERSION_MAJOR TINY_VERSION_MINOR TINY_VERSION_PATCH TINY_VERSION_TWEAK\n    VERSION_HEADER "${TinyOrmSourceDir}/tom/include/tom/version.hpp"\n    PREFIX TINYTOM\n    HEADER_FOR "${Tom_ns}"\n)\n\n# Basic project\n# ---\n\nproject(${Tom_ns}\n    DESCRIPTION "Tom console for TinyORM"\n    HOMEPAGE_URL "https://www.tinyorm.org"\n    LANGUAGES CXX\n    VERSION ${TINY_VERSION}\n)\n\n# Tom command-line application\n# ---\n\nadd_executable(${Tom_target}\n    main.cpp\n)\nadd_executable(${Tom_ns}::${Tom_target} ALIAS ${Tom_target})\n\n# Tom command-line application specific configuration\n# ---\n\nset_target_properties(${Tom_target}\n    PROPERTIES\n        C_VISIBILITY_PRESET "hidden"\n        CXX_VISIBILITY_PRESET "hidden"\n        VISIBILITY_INLINES_HIDDEN YES\n        VERSION ${PROJECT_VERSION}\n)\n\ntarget_include_directories(${Tom_target} PRIVATE\n    "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/database>"\n)\n\n# Tom command-line application defines\n# ---\n\ntarget_compile_definitions(${Tom_target}\n    PRIVATE\n        PROJECT_TOM\n)\n\n# Windows resource and manifest files\n# ---\n\n# Find icons, tom/version.hpp, and Windows manifest file for MinGW\nif(CMAKE_SYSTEM_NAME STREQUAL "Windows")\n    tiny_set_rc_flags("-I \\"${TinyOrmSourceDir}/tom/resources\\"")\nendif()\n\ninclude(TinyResourceAndManifest)\ntiny_resource_and_manifest(${Tom_target}\n    OUTPUT_DIR "${TINY_BUILD_GENDIR}/tmp/"\n    RESOURCES_DIR "${TinyOrmSourceDir}/tom/resources"\n)\n\n# Resolve and link dependencies\n# ---\n\nfind_package(QT NAMES Qt6 Qt5 COMPONENTS Core REQUIRED)\nfind_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)\nfind_package(TinyOrm 0.16.0 CONFIG REQUIRED)\n\n# Unconditional dependencies\ntarget_link_libraries(${Tom_target}\n    PRIVATE\n        Qt${QT_VERSION_MAJOR}::Core\n        TinyOrm::TinyOrm\n)')),(0,i.kt)(o.Z,{value:s.q5,label:s.C,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-cmake",mdxType:"CodeBlock"},'cmake_minimum_required(VERSION VERSION 3.22...3.25 FATAL_ERROR)\n\n# Specify the C++ standard\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nset(CMAKE_AUTOMOC ON)\n\n# Tom command-line application\n# ---\n\nset(Tom_ns tom)\nset(Tom_target tom)\n\nfile(REAL_PATH "../../TinyORM" TinyMainDir)\n\nset(TinyOrmSourceDir "${TinyMainDir}/TinyORM")\nset(TinyOrmBuildDir "${TinyMainDir}/TinyORM-builds-cmake/build-debug")\n\n# TinyORM CMake modules (needed to set the executable version and RC file on Windows)\nlist(APPEND CMAKE_MODULE_PATH "${TinyOrmSourceDir}/cmake/CommonModules")\n\n# build tree\nlist(APPEND CMAKE_PREFIX_PATH "${TinyOrmBuildDir}")\n\n# Initialize Project Version\n# ---\n\ninclude(TinyHelpers)\ntiny_read_version(TINY_VERSION\n    TINY_VERSION_MAJOR TINY_VERSION_MINOR TINY_VERSION_PATCH TINY_VERSION_TWEAK\n    VERSION_HEADER "${TinyOrmSourceDir}/tom/include/tom/version.hpp"\n    PREFIX TINYTOM\n    HEADER_FOR "${Tom_ns}"\n)\n\n# Basic project\n# ---\n\nproject(${Tom_ns}\n    DESCRIPTION "Tom console for TinyORM"\n    HOMEPAGE_URL "https://www.tinyorm.org"\n    LANGUAGES CXX\n    VERSION ${TINY_VERSION}\n)\n\n# Tom command-line application\n# ---\n\nadd_executable(${Tom_target}\n    main.cpp\n)\nadd_executable(${Tom_ns}::${Tom_target} ALIAS ${Tom_target})\n\n# Tom command-line application specific configuration\n# ---\n\nset_target_properties(${Tom_target}\n    PROPERTIES\n        C_VISIBILITY_PRESET "hidden"\n        CXX_VISIBILITY_PRESET "hidden"\n        VISIBILITY_INLINES_HIDDEN YES\n        VERSION ${PROJECT_VERSION}\n)\n\ntarget_include_directories(${Tom_target} PRIVATE\n    "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/database>"\n)\n\n# Tom command-line application defines\n# ---\n\ntarget_compile_definitions(${Tom_target}\n    PRIVATE\n        PROJECT_TOM\n)\n\n# Windows resource and manifest files\n# ---\n\n# Find icons, tom/version.hpp, and Windows manifest file for MinGW\nif(CMAKE_SYSTEM_NAME STREQUAL "Windows")\n    tiny_set_rc_flags("-I \\"${TinyOrmSourceDir}/tom/resources\\"")\nendif()\n\ninclude(TinyResourceAndManifest)\ntiny_resource_and_manifest(${Tom_target}\n    OUTPUT_DIR "${TINY_BUILD_GENDIR}/tmp/"\n    RESOURCES_DIR "${TinyOrmSourceDir}/tom/resources"\n)\n\n# Resolve and link dependencies\n# ---\n\nfind_package(QT NAMES Qt6 Qt5 COMPONENTS Core REQUIRED)\nfind_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)\nfind_package(TinyOrm 0.16.0 CONFIG REQUIRED)\n\n# Unconditional dependencies\ntarget_link_libraries(${Tom_target}\n    PRIVATE\n        Qt${QT_VERSION_MAJOR}::Core\n        TinyOrm::TinyOrm\n)'))),(0,i.kt)("h3",{id:"build-migrations-cmake"},"Build migrations"),(0,i.kt)("p",null,"Now you are ready to configure ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," ",(0,i.kt)("inlineCode",{parentName:"p"},"CMake")," application. Don't forget to prepare the build environment with the ",(0,i.kt)("a",{parentName:"p",href:"/building/tinyorm#windows-prerequisites"},(0,i.kt)("inlineCode",{parentName:"a"},"qtenv6.ps1"))," command if you are building with the ",(0,i.kt)("inlineCode",{parentName:"p"},"msvc"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd ../tom-builds-cmake/build-debug\n")),(0,i.kt)(l.Z,{groupId:s.IZ,mdxType:"Tabs"},(0,i.kt)(o.Z,{value:s.Fo,label:s.IM,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},`cmake.exe \`\n-S "${(0,m.go)(s.Fo)}/tom/tom" \`\n-B "${(0,m.go)(s.Fo)}/tom/tom-builds-cmake/build-debug" \`\n-G 'Ninja' \`\n-D CMAKE_BUILD_TYPE:STRING='Debug' \`\n-D CMAKE_TOOLCHAIN_FILE:FILEPATH="${(0,m.EA)(s.Fo)}/vcpkg/scripts/buildsystems/vcpkg.cmake" \`\n-D CMAKE_INSTALL_PREFIX:PATH="${(0,m.EA)(s.Fo)}/tmp/tom"`)),(0,i.kt)(o.Z,{value:s.q5,label:s.C,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},`cmake \\\n-S "${(0,m.go)(s.q5)}/tom/tom" \\\n-B "${(0,m.go)(s.q5)}/tom/tom-builds-cmake/build-debug" \\\n-G 'Ninja' \\\n-D CMAKE_BUILD_TYPE:STRING='Debug' \\\n-D CMAKE_TOOLCHAIN_FILE:FILEPATH="${(0,m.EA)(s.q5)}/vcpkg/scripts/buildsystems/vcpkg.cmake" \\\n-D CMAKE_INSTALL_PREFIX:PATH="${(0,m.EA)(s.q5)}/tmp/tom"`))),(0,i.kt)("p",null,"And build."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cmake --build . --target all\n")),(0,i.kt)("h3",{id:"execute-migrations-cmake"},"Execute migrations"),(0,i.kt)("p",null,"Do not forget to add ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyOrm0d.dll")," on the path on Windows and on the ",(0,i.kt)("inlineCode",{parentName:"p"},"LD_LIBRARY_PATH")," on Linux, so ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," application can find it during execution, as is described ",(0,i.kt)("a",{parentName:"p",href:"/building/tinyorm#tinyorm-on-path-cmake"},"here"),"."),(0,i.kt)(l.Z,{groupId:s.IZ,name:"tinyorm-on-path",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:s.Fo,label:s.IM,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},`$env:Path = "${(0,m.go)(s.Fo,!1)}\\TinyORM\\TinyORM-builds-cmake\\build-debug;" + $env:Path`)),(0,i.kt)(o.Z,{value:s.q5,label:s.C,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},`export LD_LIBRARY_PATH=${(0,m.go)(s.q5)}/TinyORM/TinyORM-builds-cmake/build-debug\${PATH:+:}$PATH`))),(0,i.kt)("p",null,"Execute ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," application."),(0,i.kt)(l.Z,{groupId:s.IZ,mdxType:"Tabs"},(0,i.kt)(o.Z,{value:s.Fo,label:s.IM,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},".\\tom.exe migrate:status\n"))),(0,i.kt)(o.Z,{value:s.q5,label:s.C,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./tom migrate:status\n")))),(0,i.kt)("p",null,"The output will look something like this."),(0,i.kt)("img",{src:t(3086).Z,alt:"Tom migrations - migrate:status command output",width:"660"}),(0,i.kt)("p",null,"See also the ",(0,i.kt)("a",{parentName:"p",href:"#finish"},"final thoughts")," on how to verify the ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," executable file properties."),(0,i.kt)("p",null,"Happy migrating \ud83c\udf89\ud83d\udc4c"),(0,i.kt)("h2",{id:"migrations-with-qmake"},"Migrations with qmake"),(0,i.kt)("p",null,"Create a folder for the ",(0,i.kt)("inlineCode",{parentName:"p"},"qmake")," build."),(0,i.kt)(l.Z,{groupId:s.IZ,mdxType:"Tabs"},(0,i.kt)(o.Z,{value:s.Fo,label:s.IM,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-powershell",mdxType:"CodeBlock"},`cd ${(0,m.go)(s.Fo)}/tom\n\nmkdir tom-builds-qmake`)),(0,i.kt)(o.Z,{value:s.q5,label:s.C,mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},`cd ${(0,m.go)(s.q5)}/tom\n\nmkdir tom-builds-qmake`))),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"#source-code"},(0,i.kt)("inlineCode",{parentName:"a"},"source code"))," is the same as for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Migrations with CMake")," console application."),(0,i.kt)("h3",{id:"qmake-project"},"qmake project"),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"tom.pro")," qmake file with the following content."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd tom\nvim tom.pro\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"To paste a source code correctly in ",(0,i.kt)("inlineCode",{parentName:"p"},"vim"),", press ",(0,i.kt)("kbd",null,"Shift")," + ",(0,i.kt)("kbd",null,"p"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-qmake"},"QT *= core sql\nQT -= gui\n\nTEMPLATE = app\nTARGET = tom\n\nCONFIG *= console\n\nDEFINES += PROJECT_TOM\n\nSOURCES += $$PWD/main.cpp\n\n# Database migrations\ninclude($$PWD/database/migrations.pri)\n# Database seeders\ninclude($$PWD/database/seeders.pri)\n\n# Configure TinyORM library for the migrations purposes\ninclude($$TINY_MAIN_DIR/TinyORM/qmake/tom.pri)\n\n# vcpkg - range-v3 and tabulate\nwin32-msvc: \\\n    INCLUDEPATH += $$quote($$TINY_VCPKG_INSTALLED/x64-windows/include/)\nmingw: \\\n    QMAKE_CXXFLAGS += -isystem $$shell_quote($$TINY_VCPKG_INSTALLED/x64-mingw-dynamic/include/)\nunix:!macx: \\\n    QMAKE_CXXFLAGS += -isystem $$shell_quote($$TINY_VCPKG_INSTALLED/x64-linux/include/)\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The exact ",(0,i.kt)("a",{parentName:"p",href:"/building/tinyorm#folders-structure"},"folders structure")," is crucial in this example because the paths to the ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyORM")," source and build folders are relative.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"On Linux ",(0,i.kt)("inlineCode",{parentName:"p"},"-isystem")," marks the directory as a system directory, it prevents warnings."),(0,i.kt)("p",{parentName:"admonition"},"On Windows you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"QMAKE_CXXFLAGS_WARN_ON = -external:anglebrackets -external:W0"),", it applies a warning level 0 to the angel bracket includes; ",(0,i.kt)("inlineCode",{parentName:"p"},"#include <file>"),".")),(0,i.kt)("h4",{id:"configure-using-qmakeconf"},"Configure using .qmake.conf"),(0,i.kt)("p",null,"To correctly set a file properties as the version, description, ... you have to provide the path to the ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyORM")," qmake features (",(0,i.kt)("inlineCode",{parentName:"p"},".prf")," files) which handle this correctly, this path is provided by the ",(0,i.kt)("inlineCode",{parentName:"p"},"QMAKEFEATURES")," variable and can be set only in the ",(0,i.kt)("inlineCode",{parentName:"p"},".qmake.conf")," file."),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},".qmake.conf")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," application root folder with the following content."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-qmake"},"TINY_MAIN_DIR = $$clean_path($$PWD/../../TinyORM)\n# Name of this qmake variable is crucial\nTINYORM_BUILD_TREE = $$quote($$TINY_MAIN_DIR/TinyOrm-builds-qmake/build-TinyOrm-Desktop_Qt_6_3_1_MSVC2019_64bit-Debug)\n# vcpkg - range-v3 and tabulate\nTINY_VCPKG_INSTALLED = $$clean_path($$PWD/../../../vcpkg/installed)\n\nQMAKEFEATURES *= $$quote($$TINY_MAIN_DIR/TinyORM/qmake/features)\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Configuring with the ",(0,i.kt)("inlineCode",{parentName:"p"},".qmake.conf")," file has one big advantage that is that you do not have to modify the project files.")),(0,i.kt)("h4",{id:"migrations-source-files"},"Migrations source files"),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"database/migrations.pri")," file and paste the following code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-qmake"},"INCLUDEPATH += $$PWD\n\nHEADERS += \\\n    $$PWD/migrations/2014_10_12_000000_create_posts_table.hpp \\\n")),(0,i.kt)("h4",{id:"seeders-source-files"},"Seeders source files"),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"database/seeders.pri")," file and paste the following code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-qmake"},"INCLUDEPATH += $$PWD\n\nHEADERS += \\\n    $$PWD/seeders/databaseseeder.hpp \\\n")),(0,i.kt)("h3",{id:"build-migrations-qmake"},"Build migrations"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"I recommend creating a new ",(0,i.kt)("inlineCode",{parentName:"p"},"Session")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"QtCreator IDE")," as is described ",(0,i.kt)("a",{parentName:"p",href:"/building/tinyorm#open-qtcreator-ide"},"here"),".")),(0,i.kt)("p",null,"Now you can open the ",(0,i.kt)("inlineCode",{parentName:"p"},"tom.pro")," project in the ",(0,i.kt)("inlineCode",{parentName:"p"},"QtCreator IDE"),"."),(0,i.kt)("p",null,"This will open the ",(0,i.kt)("inlineCode",{parentName:"p"},"Configure Project")," tab, select some kit and update build folder paths to meet our ",(0,i.kt)("a",{parentName:"p",href:"/building/tinyorm#folders-structure"},"folders structure")," or like you want."),(0,i.kt)("img",{src:t(6191).Z,alt:"tom - QtCreator - Configure Project",width:"760"}),(0,i.kt)("p",null,"You are ready to configure build options, hit ",(0,i.kt)("kbd",null,"Ctrl"),"+",(0,i.kt)("kbd",null,"5")," to open ",(0,i.kt)("inlineCode",{parentName:"p"},"Project Settings")," tab and select ",(0,i.kt)("inlineCode",{parentName:"p"},"Build")," in the left sidebar to open the ",(0,i.kt)("inlineCode",{parentName:"p"},"Build Settings"),", it should look similar to the following picture."),(0,i.kt)("img",{src:t(5539).Z,className:"no-blurry",alt:"tom - QtCreator - Build Settings",width:"760"}),(0,i.kt)("p",null,"Disable ",(0,i.kt)("inlineCode",{parentName:"p"},"QML debugging and profiling")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Qt Quick Compiler"),", they are not used."),(0,i.kt)("p",null,"In the left sidebar open ",(0,i.kt)("inlineCode",{parentName:"p"},"Dependencies")," and check ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyOrm")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Synchronize configuration"),", this setting ensures that the current project will be rebuilt correctly when the ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyORM")," library source code changes."),(0,i.kt)("p",null,"Everything is ready to build, you can press ",(0,i.kt)("kbd",null,"Ctrl"),"+",(0,i.kt)("kbd",null,"b")," to build the project."),(0,i.kt)("h3",{id:"execute-migrations-qmake"},"Execute migrations"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"QtCreator")," takes care about all the necessary configuration, sets up the build environment correctly and also prepends dependency libraries on the path on Windows and on the ",(0,i.kt)("inlineCode",{parentName:"p"},"LD_LIBRARY_PATH")," on Linux."),(0,i.kt)("p",null,"Only one thing you might want to change is to run the ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," application in the new terminal window. To do so, hit ",(0,i.kt)("kbd",null,"Ctrl"),"+",(0,i.kt)("kbd",null,"5")," to open the ",(0,i.kt)("inlineCode",{parentName:"p"},"Project Settings")," tab and select ",(0,i.kt)("inlineCode",{parentName:"p"},"Run")," in the left sidebar to open the ",(0,i.kt)("inlineCode",{parentName:"p"},"Run Settings"),", then in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Run")," section select the ",(0,i.kt)("inlineCode",{parentName:"p"},"Run in terminal")," checkbox."),(0,i.kt)("p",null,"You can also set the ",(0,i.kt)("inlineCode",{parentName:"p"},"Command line arguments")," in this ",(0,i.kt)("inlineCode",{parentName:"p"},"Run")," section, eg. the ",(0,i.kt)("inlineCode",{parentName:"p"},"migrate:status"),"."),(0,i.kt)("p",null,"To execute the ",(0,i.kt)("inlineCode",{parentName:"p"},"tom")," application press ",(0,i.kt)("kbd",null,"Ctrl")," + ",(0,i.kt)("kbd",null,"r"),"."),(0,i.kt)("p",null,"The output will look something like this."),(0,i.kt)("img",{src:t(3086).Z,alt:"Tom migrations - migrate:status command output",width:"660"}),(0,i.kt)("p",null,"Happy migrating \ud83c\udf89\ud83d\udc4c"),(0,i.kt)("h2",{id:"finish"},"Finish"),(0,i.kt)("p",null,"As the last thing, you can check that all the file properties were correctly set by the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/windows/win32/menurc/resource-compiler"},(0,i.kt)("inlineCode",{parentName:"a"},"rc"))," compiler."),(0,i.kt)("p",null,"Find the ",(0,i.kt)("inlineCode",{parentName:"p"},"tom.exe")," file and press ",(0,i.kt)("kbd",null,"Alt")," + ",(0,i.kt)("kbd",null,"Enter")," to open the file properties. To check the executable manifest you can use eg. the ",(0,i.kt)("a",{parentName:"p",href:"http://www.angusj.com/resourcehacker/"},"Resource Hacker"),"."),(0,i.kt)("img",{src:t(643).Z,alt:"tom.exe file properties detail",width:"440"}))}h.isMDXComponent=!0},5539:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/qmake-build_settings-7ce9fbef0172788275c1081e69fb61cc.png"},6191:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/qmake-configure_project-0612b44b4d612e31bfbeb6496d865289.png"},643:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/tom_file_properties-44abf8fb5495499dd6325a1eb08510dc.png"},3086:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/tom_migrate_status-63c129a10bfe6bffe8d2d5ea280860e5.png"}}]);